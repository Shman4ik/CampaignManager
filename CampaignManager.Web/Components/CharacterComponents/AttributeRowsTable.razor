@using CampaignManager.Web.Model
<div class="w-full">
    <table class="w-full text-sm mb-2 table-fixed">
        <thead>
        <tr>
            <th class="text-left w-12"></th>
            <th class="w-14 text-center text-xs font-semibold">Обыч.</th>
            <th class="w-14 text-center text-xs font-semibold">Труд.</th>
            <th class="w-14 text-center text-xs font-semibold">Чрез.</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var prop in typeof(Characteristics).GetProperties())
        {
            var value = (AttributeValue)prop.GetValue(Characteristics);
            <tr>
                <td class="py-0.5 pr-1 whitespace-nowrap">
                    <span class="font-medium text-xs">@GetShortName(prop.Name)</span>
                </td>
                <td class="py-0.5 px-0.5">
                    <input type="number" @bind="value.Regular" @bind:event="oninput"
                           @onchange="() => OnUpdate.InvokeAsync(value)"
                           class="w-full p-0.5 text-center text-sm border border-gray-300 rounded"/>
                </td>
                <td class="py-0.5 px-0.5">
                    <input type="number" value="@value.Half" disabled
                           class="w-full p-0.5 text-center text-sm bg-gray-100 border border-gray-300 rounded"/>
                </td>
                <td class="py-0.5 px-0.5">
                    <input type="number" value="@value.Fifth" disabled
                           class="w-full p-0.5 text-center text-sm bg-gray-100 border border-gray-300 rounded"/>
                </td>
            </tr>
        }
        </tbody>
    </table>
</div>

@code {
    [Parameter] public Characteristics Characteristics { get; set; }
    [Parameter] public EventCallback<AttributeValue> OnUpdate { get; set; }

    private string GetFullName(string fullName)
    {
        var russianNames = new Dictionary<string, string>
        {
            { "Strength", "Сила" },
            { "Constitution", "Выносливость" },
            { "Size", "Телосложение" },
            { "Dexterity", "Ловкость" },
            { "Appearance", "Наружность" },
            { "Intelligence", "Интеллект" },
            { "Power", "Мощь" },
            { "Education", "Образование" }
        };

        return russianNames.TryGetValue(fullName, out var russianName) ? russianName : fullName;
    }

    private string GetShortName(string fullName)
    {
        var shortNames = new Dictionary<string, string>
        {
            { "Strength", "СИЛ" },
            { "Constitution", "ВЫН" },
            { "Size", "ТЕЛ" },
            { "Dexterity", "ЛВК" },
            { "Appearance", "НАР" },
            { "Intelligence", "ИНТ" },
            { "Power", "МОЩ" },
            { "Education", "ОБР" }
        };

        return shortNames.TryGetValue(fullName, out var shortName) ? shortName : fullName;
    }
}