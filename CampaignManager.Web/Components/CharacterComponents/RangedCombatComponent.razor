@using CampaignManager.Web.Model
@using CampaignManager.Web.Services
@inject WeaponService WeaponService

<div class="bg-white shadow rounded-lg p-4 mb-4">
    <h3 class="text-xl font-bold mb-4">Оружие дальнего боя</h3>
    
    <div class="mb-4">
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th scope="col" class="px-2 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Оружие</th>
                        <th scope="col" class="px-2 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Навык</th>
                        <th scope="col" class="px-2 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Урон</th>
                        <th scope="col" class="px-2 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Дальн.</th>
                        <th scope="col" class="px-2 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Атаки</th>
                        <th scope="col" class="px-2 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Патроны</th>
                        <th scope="col" class="px-2 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Неиспр.</th>
                        <th scope="col" class="px-2 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Цена</th>
                        <th scope="col" class="px-2 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Примечания</th>
                        <th scope="col" class="px-2 py-2 text-xs font-medium text-gray-500 uppercase tracking-wider w-16">Действия</th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                    @foreach (var weapon in Character.RangedCombat.Weapons)
                    {
                        <tr>
                            <td class="px-2 py-2 whitespace-nowrap text-sm text-gray-900">
                                <input type="text" @bind="weapon.Name" class="w-full p-1 border border-gray-300 rounded" />
                            </td>
                            <td class="px-2 py-2 whitespace-nowrap text-sm text-gray-900">
                                <input type="text" @bind="weapon.Skill" class="w-full p-1 border border-gray-300 rounded" />
                            </td>
                            <td class="px-2 py-2 whitespace-nowrap text-sm text-gray-900">
                                <input type="text" @bind="weapon.Damage" class="w-full p-1 border border-gray-300 rounded" />
                            </td>
                            <td class="px-2 py-2 whitespace-nowrap text-sm text-gray-900">
                                <input type="text" @bind="weapon.Range" class="w-full p-1 border border-gray-300 rounded" />
                            </td>
                            <td class="px-2 py-2 whitespace-nowrap text-sm text-gray-900">
                                <input type="text" @bind="weapon.Attacks" class="w-full p-1 border border-gray-300 rounded" />
                            </td>
                            <td class="px-2 py-2 whitespace-nowrap text-sm text-gray-900">
                                <input type="text" @bind="weapon.Ammo" class="w-full p-1 border border-gray-300 rounded" />
                            </td>
                            <td class="px-2 py-2 whitespace-nowrap text-sm text-gray-900">
                                <input type="text" @bind="weapon.Malfunction" class="w-full p-1 border border-gray-300 rounded" />
                            </td>
                            <td class="px-2 py-2 whitespace-nowrap text-sm text-gray-900">
                                <input type="text" @bind="weapon.Cost" class="w-full p-1 border border-gray-300 rounded" />
                            </td>
                            <td class="px-2 py-2 whitespace-nowrap text-sm text-gray-900">
                                <input type="text" @bind="weapon.Notes" class="w-full p-1 border border-gray-300 rounded" />
                            </td>
                            <td class="px-2 py-2 whitespace-nowrap text-right text-sm font-medium">
                                <button @onclick="() => RemoveWeapon(weapon)" class="text-red-600 hover:text-red-900 p-1">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                    </svg>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
    
    <div class="grid grid-cols-1 md:grid-cols-9 gap-2 mb-2">
        <div class="relative">
            <input type="text" value="@newWeaponName" @oninput="OnWeaponNameInput" placeholder="Оружие" 
                class="w-full p-1 border border-gray-300 rounded" />
            @if (suggestedWeapons.Count > 0)
            {
                <div class="absolute z-10 w-full bg-white border border-gray-300 rounded-b shadow-lg">
                    @foreach (var weapon in suggestedWeapons)
                    {
                        <div class="p-2 hover:bg-gray-100 cursor-pointer" @onclick="() => SelectWeapon(weapon)">
                            @weapon.Name
                        </div>
                    }
                </div>
            }
        </div>
        <input type="text" @bind="newWeaponSkill" placeholder="Навык" class="p-1 border border-gray-300 rounded" />
        <input type="text" @bind="newWeaponDamage" placeholder="Урон" class="p-1 border border-gray-300 rounded" />
        <input type="text" @bind="newWeaponRange" placeholder="Дальность" class="p-1 border border-gray-300 rounded" />
        <input type="text" @bind="newWeaponAttacks" placeholder="Атаки" class="p-1 border border-gray-300 rounded" />
        <input type="text" @bind="newWeaponAmmo" placeholder="Патроны" class="p-1 border border-gray-300 rounded" />
        <input type="text" @bind="newWeaponMalfunction" placeholder="Неисправность" class="p-1 border border-gray-300 rounded" />
        <input type="text" @bind="newWeaponCost" placeholder="Цена" class="p-1 border border-gray-300 rounded" />
        <input type="text" @bind="newWeaponNotes" placeholder="Примечания" class="p-1 border border-gray-300 rounded" />
    </div>
    
    <button @onclick="AddWeapon" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded">
        Добавить оружие
    </button>
</div>

@code {
    [Parameter] public Character Character { get; set; } = null!;
    
    private string newWeaponName = "";
    private string newWeaponSkill = "";
    private string newWeaponDamage = "";
    private string newWeaponRange = "";
    private string newWeaponAttacks = "";
    private string newWeaponAmmo = "";
    private string newWeaponMalfunction = "";
    private string newWeaponCost = "";
    private string newWeaponNotes = "";
    
    private List<RangedCombatWeapon> suggestedWeapons = new List<RangedCombatWeapon>();
    
    private void OnWeaponNameInput(ChangeEventArgs e)
    {
        string value = e.Value?.ToString() ?? "";
        newWeaponName = value;
        
        if (string.IsNullOrEmpty(value) || value.Length < 2)
        {
            suggestedWeapons.Clear();
            return;
        }
        
        var allWeapons = WeaponService.GetAllRangedWeapons();
        suggestedWeapons = allWeapons
            .Where(w => w.Name.Contains(value, StringComparison.OrdinalIgnoreCase))
            .Take(5)
            .ToList();
    }
    
    private void SelectWeapon(RangedCombatWeapon weapon)
    {
        newWeaponName = weapon.Name;
        newWeaponSkill = weapon.Skill;
        newWeaponDamage = weapon.Damage;
        newWeaponRange = weapon.Range;
        newWeaponAttacks = weapon.Attacks;
        newWeaponAmmo = weapon.Ammo;
        newWeaponMalfunction = weapon.Malfunction;
        newWeaponCost = weapon.Cost;
        newWeaponNotes = weapon.Notes;
        
        suggestedWeapons.Clear();
    }
    
    private void AddWeapon()
    {
        if (!string.IsNullOrWhiteSpace(newWeaponName))
        {
            Character.RangedCombat.Weapons.Add(new RangedCombatWeapon 
            { 
                Name = newWeaponName,
                Skill = newWeaponSkill,
                Damage = newWeaponDamage,
                Range = newWeaponRange,
                Attacks = newWeaponAttacks,
                Ammo = newWeaponAmmo,
                Malfunction = newWeaponMalfunction,
                Cost = newWeaponCost,
                Notes = newWeaponNotes
            });
            
            newWeaponName = "";
            newWeaponSkill = "";
            newWeaponDamage = "";
            newWeaponRange = "";
            newWeaponAttacks = "";
            newWeaponAmmo = "";
            newWeaponMalfunction = "";
            newWeaponCost = "";
            newWeaponNotes = "";
        }
    }
    
    private void RemoveWeapon(RangedCombatWeapon weapon)
    {
        Character.RangedCombat.Weapons.Remove(weapon);
    }
}
