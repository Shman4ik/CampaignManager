@page "/character/create/{CampaignId:guid}"
@page "/character/{CharacterId:guid}"

@using System.Security.Claims
@using CampaignManager.Web.Components.Shared
@using CampaignManager.Web.Model
@using CampaignManager.Web.Services
@using CampaignManager.Web.Utilities.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using CampaignManager.Web.Components.CharacterComponents

@inject CharacterService CharacterService
@inject NavigationManager NavigationManager
@inject IdentityService UserInformationService
@inject CharacterGenerationService CharacterGenerationService
@inject CampaignService CampaignService
@inject IJSRuntime JSRuntime

@rendermode InteractiveServer

<PageTitle>@(Character?.PersonalInfo?.Name ?? "Новый персонаж")</PageTitle>

<ErrorBoundary @ref="_errorBoundary">
    <ChildContent>
        <div class="sticky top-0 z-10 w-full bg-gray-200 py-2 px-4 border-b-2 border-gray-800 shadow-md mb-4">
            <div class="max-w-7xl mx-auto flex flex-col sm:flex-row justify-between items-start sm:items-center gap-2">
                <h2 class="text-xl font-semibold mb-2 sm:mb-0">@(Character?.PersonalInfo?.Name ?? "Новый персонаж")</h2>
                <div class="flex space-x-2 w-full sm:w-auto">
                    <button @onclick="SaveCharacterAsync"                       
                        class="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded w-full sm:w-auto">
                        Сохранить
                    </button>
                    @if (CharacterId == null || CharacterId == Guid.Empty)
                    {
                        <button @onclick="GenerateRandom"             
                            class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded w-full sm:w-auto">
                            Сгенерировать случайно
                        </button>
                    }
                </div>
            </div>
        </div>

        <div class="max-w-7xl mx-auto p-6 bg-gray-100 border-2 border-gray-800 rounded-lg">
            @if (!string.IsNullOrEmpty(_notification.Message))
            {
                <NotificationAlert Type="@_notification.Type" Message="@_notification.Message" OnClose="ClearNotification" />
            }

            <div class="flex justify-between items-center mb-6">
                <h1 class="text-3xl font-bold">@(Character?.PersonalInfo?.Name ?? "Новый персонаж")</h1>
            </div>

            @if (_isLoading)
            {
                <LoadingIndicator />
            }
            else if (Character != null)
            {
                <EditForm Model="Character" FormName="CharacterForm">
                    <DataAnnotationsValidator />

                    <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <PersonalInfoComponent Character="@Character" />
                        <CharacteristicsComponent Character="@Character" />
                        <CharacterStateComponent Character="@Character" />
                    </div>

                    <div class="mt-4">
                        <SkillComponent Model="@Character.Skills" />
                    </div>
                    <div class="mt-4">
                        <CloseCombatComponent Character="@Character" />
                    </div>
                    <div class="mt-4">
                        <RangedCombatComponent Character="@Character" />
                    </div>

                    <div class="mt-4">
                        <EquipmentComponent Character="@Character" />
                    </div>

                    <div class="mt-4">
                        <FinancesComponent Character="@Character" />
                    </div>

                    <div class="mt-4">
                        <BiographyComponent Character="@Character" />
                    </div> 
                    
                    <div class="bg-white shadow rounded-lg p-4 mb-4">
                        <h4 class="text-lg font-semibold mb-3">Заметки</h4>
                        <InputTextArea @bind-Value="Character.Notes" rows="4" class="w-full p-2 border rounded" />
                    </div>
                    
                    <div class="bg-white shadow rounded-lg p-4 mb-4">
                        <h4 class="text-lg font-semibold mb-3">Предыстория</h4>
                        <InputTextArea @bind-Value="Character.Backstory" rows="4" class="w-full p-2 border rounded" />
                    </div>                   
                </EditForm>
            }
            else
            {
                <p class="text-red-500">Не удалось загрузить или инициализировать данные персонажа.</p>
            }
        </div>
    </ChildContent>
    <ErrorContent>
        <div class="alert alert-danger">
            <p>Произошла ошибка при загрузке страницы. Пожалуйста, обновите страницу или попробуйте позже.</p>
        </div>
    </ErrorContent>
</ErrorBoundary>

@code {
    [Parameter] public Guid? CharacterId { get; set; }
    [Parameter] public Guid? CampaignId { get; set; }

    private Character? Character { get; set; }
    private CharacterStorageDto? CharacterStorageDto { get; set; }
    private ErrorBoundary? _errorBoundary;
    private bool _isLoading = true;
    private bool _isBusy = false;
    private NotificationModel _notification = new();
    private CampaignPlayer? CampaignPlayer { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? AuthState { get; set; }

    private ClaimsPrincipal? User => AuthState?.Result?.User;



    protected override async Task OnInitializedAsync()
    {
        try
        {
            _isLoading = true;
            await LoadCharacterDataAsync();
        }
        catch (Exception ex)
        {
            ShowNotification($"Ошибка при инициализации: {ex.Message}", "error");
            Character = CreateNewCharacterTemplate();
            _errorBoundary?.Recover();
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task LoadCharacterDataAsync()
    {
        try
        {
            if (CharacterId.HasValue && CharacterId.Value != Guid.Empty)
            {
                CharacterStorageDto = await CharacterService.GetCharacterByIdAsync(CharacterId.Value);
                Character = CharacterStorageDto?.Character;
                CampaignPlayer = await CharacterService.GetCampaignPlayerAsync(CharacterStorageDto!.CampaignPlayerId);
                if (Character == null)
                {
                    ShowNotification($"Персонаж с ID {CharacterId.Value} не найден. Создан новый шаблон.", "warning");
                    Character = CreateNewCharacterTemplate();
                    CharacterId = null;
                }
            }
            else
            {
                Character = CreateNewCharacterTemplate();
                if (CampaignId.HasValue)
                    CampaignPlayer = await CampaignService.GetCampaignPlayerAsync(CampaignId.Value);
            }
        }
        catch (Exception ex)
        {
            ShowNotification($"Ошибка при загрузке персонажа: {ex.Message}", "error");
            Character = CreateNewCharacterTemplate();
        }
    }

    private Character CreateNewCharacterTemplate()
    {
        return new Character
        {
            PersonalInfo = new PersonalInfo { PlayerName = CampaignPlayer?.PlayerName ?? "Unknown" },
            Characteristics = new Characteristics(),
            Skills = SkillsModel.DefaultSkillsModel(),
            Backstory = string.Empty,
            Biography = new BiographyInfo(),
            Equipment = new Equipment(),
            Finances = new Finances(),
            CloseCombat = new CloseCombatDetails(),
            RangedCombat = new RangedCombatDetails(),
            Notes = string.Empty,
        };
    }

    private async Task SaveCharacterAsync()
    {
        if (Character == null || _isBusy)
            return;

        _isBusy = true;
        ClearNotification();

        try
        {
            if (string.IsNullOrWhiteSpace(Character.PersonalInfo?.Name))
            {
                Character.PersonalInfo ??= new PersonalInfo();
                Character.PersonalInfo.Name = "Безымянный";
                ShowNotification("Имя персонажа не было указано, установлено 'Безымянный'.", "warning");
            }

            if (Character.PersonalInfo != null && string.IsNullOrEmpty(Character.PersonalInfo.PlayerName))
            {
                Character.PersonalInfo.PlayerName = CampaignPlayer?.PlayerName ?? "Unknown";
            }

            if (CharacterId.HasValue && CharacterId.Value != Guid.Empty && Character.Id == CharacterId.Value)
            {
                await CharacterService.UpdateCharacterAsync(Character);
                ShowNotification("Персонаж успешно обновлен!", "success");
            }
            else
            {
                Character.Id = Guid.Empty;
                var createdCharacter = await CharacterService.CreateCharacterAsync(Character, CampaignPlayer.Id);

                if (createdCharacter?.Id != null && createdCharacter.Id != Guid.Empty)
                {
                    Character.Id = createdCharacter.Id;
                    CharacterId = createdCharacter.Id;
                    ShowNotification("Персонаж успешно создан!", "success");
                    NavigationManager.NavigateTo($"/character/{createdCharacter.Id}", replace: true);
                }
                else
                {
                    ShowNotification("Ошибка: Не удалось получить ID созданного персонажа.", "error");
                    return;
                }
            }
        }
        catch (Exception ex)
        {
            ShowNotification($"Ошибка при сохранении: {ex.Message}", "error");
            _errorBoundary?.Recover();
        }
        finally
        {
            _isBusy = false;
        }
    }

    private void ShowNotification(string message, string type)
    {
        if (string.IsNullOrWhiteSpace(message))
            return;

        _notification.Message = message;
        _notification.Type = type;
    }

    private void ClearNotification()
    {
        _notification.Message = null;
    }

    private void GenerateRandom()
    {
        Character = CharacterGenerationService.GenerateRandomCharacter();

        // Сохраняем имя игрока даже в случайно сгенерированном персонаже
        Character.PersonalInfo.PlayerName = CampaignPlayer?.PlayerName;
    }
}