@page "/character"
@page "/character/{CharacterId:guid}"
@using CampaignManager.Web.Components.CharacterComponents
@using CampaignManager.Web.Services
@using Microsoft.AspNetCore.Components.Authorization
@rendermode InteractiveServer
@inject CharacterGenerationService CharacterGenerationService
@inject CharacterService CharacterService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime

<PageTitle>@(Character?.PersonalInfo?.Name ?? "Новый персонаж")</PageTitle>

<div class="max-w-7xl mx-auto p-6 bg-gray-100 border-2 border-gray-800 rounded-lg">
    @if (!string.IsNullOrEmpty(NotificationMessage))
    {
        <div class="@NotificationCssClass p-4 mb-4 rounded-md flex justify-between items-center">
            <span>@NotificationMessage</span>
            <button @onclick="ClearNotification" class="text-xl">&times;</button>
        </div>
    }

    <div class="flex justify-between items-center mb-6">
        <h1 class="text-3xl font-bold">@(Character?.PersonalInfo?.Name ?? "Новый персонаж")</h1>
        <div>
            <button @onclick="SaveCharacter" disabled="@IsSaving" class="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded mr-2">
                @if (IsSaving)
                {
                    <span>Сохранение...</span>
                }
                else
                {
                    <span>Сохранить</span>
                }
            </button>
            @if (ReturnToCampaign)
            {
                <button @onclick="GoBackToCampaign" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded">
                    Вернуться к кампании
                </button>
            }
        </div>
    </div>

    @if (Character != null)
    {
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
            <PersonalInfoComponent Character="@Character" />
            <CharacteristicsComponent Character="@Character" OnUpdate="StateHasChanged" />
        </div>

        <div class="mt-4">
            <SkillComponent Model="@Character.Skills" />
        </div>

        <div class="mt-4">
            <WeaponsComponent Weapons="@Character.Weapons" />
        </div>

        <div class="mt-4">
            <h3 class="text-xl font-bold mb-2">Предыстория</h3>
            <textarea @bind="Character.Backstory" rows="4" class="w-full p-2 border rounded"></textarea>
        </div>
    }
    else
    {
        <div class="flex justify-center items-center">
            <div class="p-4 text-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="sr-only">Загрузка...</span>
                </div>
                <p class="mt-2">Загрузка персонажа...</p>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public Guid? CharacterId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public Guid? CampaignId { get; set; }

    private Character Character;
    private string CurrentUserId;
    private string UserEmail;
    private string UserName;
    private bool ReturnToCampaign => CampaignId.HasValue;

    // Состояния и уведомления
    private bool IsSaving { get; set; } = false;
    private string NotificationMessage { get; set; }
    private string NotificationCssClass { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            CurrentUserId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            UserEmail = authState.User.FindFirst(System.Security.Claims.ClaimTypes.Email)?.Value;
            UserName = authState.User.FindFirst(System.Security.Claims.ClaimTypes.Name)?.Value ?? UserEmail;

            if (CharacterId.HasValue)
            {
                // Редактирование существующего персонажа
                Character = await CharacterService.GetCharacterByIdAsync(CharacterId.Value);
                if (Character == null)
                {
                    Character = new Character
                    {
                        PersonalInfo = new PersonalInfo { PlayerName = UserName }
                    };
                    ShowNotification("Персонаж не найден, создан новый шаблон", "warning");
                }
            }
            else
            {
                // Создание нового персонажа
                Character = new Character
                {
                    PersonalInfo = new PersonalInfo { PlayerName = UserName }
                };
            }
        }
        catch (Exception ex)
        {
            Character = new Character
            {
                PersonalInfo = new PersonalInfo { PlayerName = UserName ?? "Unknown" }
            };
            ShowNotification($"Ошибка при загрузке: {ex.Message}", "error");
        }
    }

    private async Task SaveCharacter()
    {
        if (IsSaving) return;

        try
        {
            IsSaving = true;
            StateHasChanged();

            // Проверка на валидность персонажа перед сохранением
            if (string.IsNullOrWhiteSpace(Character.PersonalInfo.Name))
            {
                Character.PersonalInfo.Name = "Безымянный";
            }

            // Убедимся, что имя игрока установлено
            if (string.IsNullOrWhiteSpace(Character.PersonalInfo.PlayerName))
            {
                Character.PersonalInfo.PlayerName = UserName;
            }

            if (CharacterId.HasValue)
            {
                await CharacterService.UpdateCharacterAsync(Character);
                ShowNotification("Персонаж успешно обновлен!", "success");
            }
            else
            {
                var result = await CharacterService.CreateCharacterAsync(Character);
                CharacterId = result.Id; // Обновляем ID после создания
                ShowNotification("Персонаж успешно создан!", "success");
            }

            // Если установлен параметр автоматического возврата к кампании, перенаправляем
            if (ReturnToCampaign && await JSRuntime.InvokeAsync<bool>("confirm", "Вернуться к кампании?"))
            {
                GoBackToCampaign();
            }
        }
        catch (Exception ex)
        {
            ShowNotification($"Ошибка при сохранении: {ex.Message}", "error");
        }
        finally
        {
            IsSaving = false;
            StateHasChanged();
        }
    }

    private void GoBackToCampaign()
    {
        if (CampaignId.HasValue)
        {
            NavigationManager.NavigateTo($"/campaign/{CampaignId}");
        }
        else
        {
            ShowNotification("Идентификатор кампании не найден", "error");
        }
    }

    private void ShowNotification(string message, string type)
    {
        NotificationMessage = message;

        NotificationCssClass = type switch
        {
            "success" => "bg-green-100 text-green-800 border border-green-200",
            "warning" => "bg-yellow-100 text-yellow-800 border border-yellow-200",
            "error" => "bg-red-100 text-red-800 border border-red-200",
            _ => "bg-blue-100 text-blue-800 border border-blue-200"
        };

        StateHasChanged();
    }

    private void ClearNotification()
    {
        NotificationMessage = null;
        StateHasChanged();
    }
}