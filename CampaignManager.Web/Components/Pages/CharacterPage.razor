@page "/character"
@page "/character/{CharacterId:guid}"
@using System.Security.Claims
@using CampaignManager.Web.Model
@using CampaignManager.Web.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@rendermode InteractiveServer
@attribute [Authorize]
@implements IDisposable
@inject CharacterService CharacterService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>@(Character?.PersonalInfo?.Name ?? "Новый персонаж")</PageTitle>

<ErrorBoundary @ref="_errorBoundary">
    <ChildContent>
        <div class="max-w-7xl mx-auto p-6 bg-gray-100 border-2 border-gray-800 rounded-lg">
            @if (!string.IsNullOrEmpty(_notification.Message))
            {
                <NotificationAlert Type="@_notification.Type" Message="@_notification.Message" OnClose="ClearNotification" />
            }

            <div class="flex justify-between items-center mb-6">
                <h1 class="text-3xl font-bold">@(Character?.PersonalInfo?.Name ?? "Новый персонаж")</h1>
                <div>
                    <SaveButton IsLoading="@_isBusy" OnClick="SaveCharacterAsync">Сохранить</SaveButton>
                    @if (ReturnToCampaign)
                    {
                        <button @onclick="GoBackToCampaign"
                                class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded">
                            Вернуться к кампании
                        </button>
                    }
                </div>
            </div>

            @if (_isLoading)
            {
                <LoadingIndicator />
            }
            else if (Character != null)
            {
                <EditForm Model="@Character" OnValidSubmit="SaveCharacterAsync">
                    <DataAnnotationsValidator />

                    <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <PersonalInfoComponent Character="@Character" />
                        <CharacteristicsComponent Character="@Character" />
                    </div>

                    <div class="mt-4">
                        <SkillComponent Model="@Character.Skills" />
                    </div>

                    <div class="mt-4">
                        <WeaponsComponent Weapons="@Character.Weapons" />
                    </div>

                    <div class="mt-4">
                        <h3 class="text-xl font-bold mb-2">Предыстория</h3>
                        <InputTextArea @bind-Value="Character.Backstory" rows="4" class="w-full p-2 border rounded" />
                    </div>
                </EditForm>
            }
        </div>
    </ChildContent>
    <ErrorContent>
        <div class="alert alert-danger">
            <p>Произошла ошибка при загрузке страницы. Пожалуйста, обновите страницу или попробуйте позже.</p>
        </div>
    </ErrorContent>
</ErrorBoundary>

@code {
    [Parameter] public Guid? CharacterId { get; set; }
    [Parameter] [SupplyParameterFromQuery] public Guid? CampaignId { get; set; }
    [CascadingParameter] private Task<AuthenticationState> AuthState { get; set; }

    private Character Character { get; set; }
    private string _userName;
    private bool ReturnToCampaign => CampaignId.HasValue;
    
    private bool _isLoading = true;
    private bool _isBusy = false;
    
    private ErrorBoundary _errorBoundary;
    
    // Структура для уведомлений
    private class Notification
    {
        public string Message { get; set; }
        public string Type { get; set; } = "info";
    }
    
    private Notification _notification = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadUserDataAsync();
        }
        catch (Exception ex)
        {
            ShowNotification($"Ошибка аутентификации: {ex.Message}", "error");
        }
    }
    
    protected override async Task OnParametersSetAsync()
    {
        try
        {
            _isLoading = true;
            await LoadCharacterDataAsync();
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task LoadUserDataAsync()
    {
        var authState = await AuthState;
        _userName = authState.User.FindFirst(ClaimTypes.Name)?.Value 
                   ?? authState.User.FindFirst(ClaimTypes.Email)?.Value 
                   ?? "Unknown User";
    }

    private async Task LoadCharacterDataAsync()
    {
        try
        {
            if (CharacterId.HasValue && CharacterId.Value != Guid.Empty)
            {
                Character = await CharacterService.GetCharacterByIdAsync(CharacterId.Value);
            }
            
            // Если персонаж не найден или это новый персонаж
            if (Character == null)
            {
                Character = new Character
                {
                    PersonalInfo = new PersonalInfo { PlayerName = _userName }
                };
                
                if (CharacterId.HasValue && CharacterId.Value != Guid.Empty)
                {
                    ShowNotification("Персонаж не найден, создан новый шаблон", "warning");
                }
            }
        }
        catch (Exception ex)
        {
            Character = new Character
            {
                PersonalInfo = new PersonalInfo { PlayerName = _userName }
            };
            ShowNotification($"Ошибка при загрузке персонажа: {ex.Message}", "error");
        }
    }

    private async Task SaveCharacterAsync()
    {
        if (_isBusy || Character == null) return;

        try
        {
            _isBusy = true;
            
            // Валидация персонажа
            if (string.IsNullOrWhiteSpace(Character.PersonalInfo?.Name))
            {
                Character.PersonalInfo ??= new PersonalInfo();
                Character.PersonalInfo.Name = "Безымянный";
            }

            // Сохранение персонажа
            if (CharacterId.HasValue && CharacterId.Value != Guid.Empty)
            {
                Character.Id = CharacterId.Value;
                await CharacterService.UpdateCharacterAsync(Character);
                ShowNotification("Персонаж успешно обновлен!", "success");
            }
            else
            {
                var result = await CharacterService.CreateCharacterAsync(Character);
                if (result?.Id != Guid.Empty)
                {
                    CharacterId = result.Id;
                    Character.Id = result.Id;
                    ShowNotification("Персонаж успешно создан!", "success");
                }
                else
                {
                    ShowNotification("Ошибка при создании персонажа", "error");
                    return;
                }
            }

            await HandlePostSaveRedirectAsync();
        }
        catch (Exception ex)
        {
            ShowNotification($"Ошибка при сохранении: {ex.Message}", "error");
            _errorBoundary?.Recover();
        }
        finally
        {
            _isBusy = false;
        }
    }

    private async Task HandlePostSaveRedirectAsync()
    {
        if (ReturnToCampaign)
        {
            bool shouldRedirect = await JSRuntime.InvokeAsync<bool>("confirm", "Вернуться к кампании?");
            if (shouldRedirect)
            {
                GoBackToCampaign();
            }
        }
    }

    private void GoBackToCampaign()
    {
        if (CampaignId.HasValue && CampaignId.Value != Guid.Empty)
        {
            NavigationManager.NavigateTo($"/campaign/{CampaignId.Value}", forceLoad: false);
        }
        else
        {
            ShowNotification("Идентификатор кампании не найден", "error");
        }
    }

    private void ShowNotification(string message, string type)
    {
        if (string.IsNullOrWhiteSpace(message)) return;
            
        _notification.Message = message;
        _notification.Type = type;
    }

    private void ClearNotification()
    {
        _notification.Message = null;
    }

    public void Dispose()
    {
        // Освобождение ресурсов, если необходимо
    }
}