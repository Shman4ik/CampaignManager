@page "/character/create/{CampaignId:guid}"
@page "/character/create/{CampaignId:guid}/{npc}"
@page "/character/{CharacterId:guid}"
@using CampaignManager.Web.Components.Shared
@using CampaignManager.Web.Model
@using CampaignManager.Web.Utilities.Services

@inject CharacterService CharacterService
@inject NavigationManager NavigationManager
@inject CharacterGenerationService CharacterGenerationService
@inject CampaignService CampaignService
@inject IJSRuntime JSRuntime

@rendermode InteractiveServer

<PageTitle>@(Character?.PersonalInfo?.Name ?? (IsNpc ? "Новый NPC" : "Новый персонаж"))</PageTitle>

<ErrorBoundary @ref="_errorBoundary">
    <ChildContent>
        <!-- Фиксированный хедер -->
        <div class="sticky top-0 z-10 w-full bg-gray-200 py-2 px-2 sm:px-4 border-b-2 border-gray-800 shadow-md mb-4">
            <div class="max-w-7xl mx-auto flex flex-col space-y-2 sm:space-y-0 sm:flex-row sm:items-center">
                <!-- Первая строка (имя и кнопки действий) -->
                <div class="flex justify-between items-center w-full">
                    <div class="flex items-center">
                        <h2 class="text-lg sm:text-xl font-semibold truncate max-w-[65%] sm:max-w-[40%]">@(Character?.PersonalInfo?.Name ?? (IsNpc ? "Новый NPC" : "Новый персонаж"))</h2>
                        @if (IsNpc)
                        {
                            <span class="ml-2 text-xs px-2 py-0.5 bg-purple-100 text-purple-800 rounded-full">NPC</span>
                        }
                    </div>

                    <div class="flex gap-1 sm:gap-2">
                        <button @onclick="SaveCharacterAsync"
                                class="bg-green-500 hover:bg-green-600 text-white font-bold py-1 sm:py-2 px-2 sm:px-3 rounded flex items-center">
                            <span class="ml-1 sm:inline">Сохранить</span>
                        </button>
                        @if (CharacterId == null || CharacterId == Guid.Empty)
                        {
                            <button @onclick="GenerateRandom"
                                    class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-1 sm:py-2 px-2 sm:px-3 rounded flex items-center">
                                <span class="ml-1 sm:inline">Случайный</span>
                            </button>
                        }
                    </div>
                </div>

                <!-- Навигационные кнопки - для мобильных только иконки в одну строку -->
                <div class="flex justify-between sm:hidden w-full">
                    <button type="button" @onclick='() => ScrollToSection("personal")'
                            class="text-blue-500 hover:text-blue-700 p-2 text-xs border rounded flex-1 flex justify-center items-center mx-0.5">
                        <span>Перс.</span>
                    </button>
                    <button type="button" @onclick='() => ScrollToSection("skills")'
                            class="text-blue-500 hover:text-blue-700 p-2 text-xs border rounded flex-1 flex justify-center items-center mx-0.5">
                        <span>Навыки</span>
                    </button>
                    <button type="button" @onclick='() => ScrollToSection("combat")'
                            class="text-blue-500 hover:text-blue-700 p-2 text-xs border rounded flex-1 flex justify-center items-center mx-0.5">
                        <span>Бой</span>
                    </button>
                    <button type="button" @onclick='() => ScrollToSection("equipment")'
                            class="text-blue-500 hover:text-blue-700 p-2 text-xs border rounded flex-1 flex justify-center items-center mx-0.5">
                        <span>Сняряж.</span>
                    </button>
                    <button type="button" @onclick='() => ScrollToSection("biography")'
                            class="text-blue-500 hover:text-blue-700 p-2 text-xs border rounded flex-1 flex justify-center items-center mx-0.5">
                        <span>Био.</span>
                    </button>
                </div>

                <!-- Навигационные кнопки - для планшетов и десктопов в строку с текстом -->
                <div class="hidden sm:flex justify-center space-x-1 w-full sm:w-auto sm:ml-4">
                    <button type="button" @onclick='() => ScrollToSection("personal")'
                            class="text-blue-500 hover:text-blue-700 px-3 py-1 text-sm border rounded whitespace-nowrap flex-shrink-0">
                        <span>Персонаж</span>
                    </button>
                    <button type="button" @onclick='() => ScrollToSection("skills")'
                            class="text-blue-500 hover:text-blue-700 px-3 py-1 text-sm border rounded whitespace-nowrap flex-shrink-0">
                        <span>Навыки</span>
                    </button>
                    <button type="button" @onclick='() => ScrollToSection("combat")'
                            class="text-blue-500 hover:text-blue-700 px-3 py-1 text-sm border rounded whitespace-nowrap flex-shrink-0">
                        <span>Бой</span>
                    </button>
                    <button type="button" @onclick='() => ScrollToSection("equipment")'
                            class="text-blue-500 hover:text-blue-700 px-3 py-1 text-sm border rounded whitespace-nowrap flex-shrink-0">
                        <span>Снаряжение</span>
                    </button>
                    <button type="button" @onclick='() => ScrollToSection("biography")'
                            class="text-blue-500 hover:text-blue-700 px-3 py-1 text-sm border rounded whitespace-nowrap flex-shrink-0">
                        <span>Биография</span>
                    </button>
                </div>
            </div>
        </div>

        <!-- Основное содержимое -->
        <div class="max-w-7xl mx-auto p-4 sm:p-6 bg-gray-100 border-2 border-gray-800 rounded-lg">
            @if (!string.IsNullOrEmpty(_notification.Message))
            {
                <NotificationAlert Type="@_notification.Type" Message="@_notification.Message"
                                   OnClose="ClearNotification"/>
            }

            @if (_isLoading)
            {
                <LoadingIndicator/>
            }
            else if (Character != null)
            {
                <EditForm Model="Character" FormName="CharacterForm">
                    <DataAnnotationsValidator/>
                    <!-- Секция Персонаж -->
                    <div id="personal" class="mb-6">
                        <div class="grid grid-cols-1 sm:grid-cols-3 gap-4">
                            <PersonalInfoComponent Character="@Character"/>
                            <CharacteristicsComponent Character="@Character" OnUpdate="RecalculateAttributes"/>
                            <CharacterStateComponent Character="@Character"/>
                        </div>
                    </div>

                    <!-- Секция Навыки -->
                    <div id="skills" class="mb-6">
                        <div class="flex justify-between items-center mb-3">
                            <h3 class="text-lg font-semibold">Навыки</h3>
                            <button @onclick="ResetUsedSkills"
                                    class="bg-blue-500 hover:bg-blue-600 text-white text-sm px-3 py-1 rounded">
                                Сбросить использованные навыки
                            </button>
                        </div>

                        <!-- Трехколоночный макет (для lg экранов) -->
                        <div class="hidden lg:grid lg:grid-cols-3 gap-4">
                            <SkillGroupColumn Groups="@Character.Skills.SkillGroups.Take(2).ToList()"/>
                            <SkillGroupColumn Groups="@Character.Skills.SkillGroups.Skip(2).Take(3).ToList()"/>
                            <SkillGroupColumn Groups="@Character.Skills.SkillGroups.Skip(5).ToList()"/>
                        </div>

                        <!-- Двухколоночный макет (для экранов от 600px до lg) -->
                        <div class="hidden sm:grid sm:grid-cols-2 lg:hidden gap-4">
                            <SkillGroupColumn Groups="@Character.Skills.SkillGroups.Take(4).ToList()"/>
                            <SkillGroupColumn Groups="@Character.Skills.SkillGroups.Skip(4).ToList()"/>
                        </div>

                        <!-- Одноколоночный макет (для экранов меньше sm) -->
                        <div class="grid grid-cols-1 sm:hidden gap-4">
                            <SkillGroupColumn Groups="@Character.Skills.SkillGroups.ToList()"/>
                        </div>
                    </div>

                    <!-- Секция Бой (группируем компоненты боя) -->
                    <div id="combat" class="mb-6">
                        <h3 class="text-xl font-bold mb-3 px-1">Боевые характеристики</h3>
                        <div class="grid grid-cols-1 gap-4">
                            <CloseCombatComponent Character="@Character"/>
                            <RangedCombatComponent Character="@Character"/>
                        </div>
                    </div>

                    <!-- Секция Снаряжение -->
                    <div id="equipment" class="mb-6">
                        <h3 class="text-xl font-bold mb-3 px-1">Снаряжение и финансы</h3>
                        <div class="grid grid-cols-1 gap-4">
                            <EquipmentComponent Character="@Character"/>
                            <FinancesComponent Character="@Character"/>
                        </div>
                    </div>

                    <!-- Секция Биография -->
                    <div id="biography" class="mb-6">
                        <BiographyComponent Character="@Character"/>

                        <div class="grid grid-cols-1 gap-4 mt-4">
                            <div class="bg-white shadow rounded-lg p-4">
                                <h4 class="text-lg font-semibold mb-3">Заметки</h4>
                                <InputTextArea @bind-Value="Character.Notes" rows="4"
                                               class="w-full p-2 border rounded"/>
                            </div>

                            <div class="bg-white shadow rounded-lg p-4">
                                <h4 class="text-lg font-semibold mb-3">Предыстория</h4>
                                <InputTextArea @bind-Value="Character.Backstory" rows="4"
                                               class="w-full p-2 border rounded"/>
                            </div>
                        </div>
                    </div>
                </EditForm>
            }
            else
            {
                <p class="text-red-500">Не удалось загрузить или инициализировать данные персонажа.</p>
            }
        </div>

        <!-- Плавающая кнопка сохранения на мобильных устройствах -->
        <div class="md:hidden fixed bottom-4 right-4">
            <button @onclick="SaveCharacterAsync"
                    class="rounded-full w-12 h-12 bg-green-500 text-white shadow-lg flex items-center justify-center">
                <i class="fas fa-save"></i>
            </button>
        </div>
    </ChildContent>
    <ErrorContent>
        <div class="alert alert-danger">
            <p>Произошла ошибка при загрузке страницы. Пожалуйста, обновите страницу или попробуйте позже.</p>
        </div>
    </ErrorContent>
</ErrorBoundary>

@code {
    [Parameter] public Guid? CharacterId { get; set; }
    [Parameter] public Guid? CampaignId { get; set; }

    // Determine if we're in NPC creation mode based on the URL segment after CampaignId
    [Parameter] public string? npc { get; set; }
    private bool IsNpc => npc == "npc" || (Character?.CharacterType == CharacterType.NonPlayerCharacter);

    private Character? Character { get; set; }
    private CharacterStorageDto? CharacterStorageDto { get; set; }
    private ErrorBoundary? _errorBoundary;
    private bool _isLoading = true;
    private bool _isBusy;
    private readonly NotificationModel _notification = new();
    private CampaignPlayer? CampaignPlayer { get; set; }

    [CascadingParameter] private Task<AuthenticationState>? AuthState { get; set; }

    private ClaimsPrincipal? User => AuthState?.Result?.User;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _isLoading = true;
            await LoadCharacterDataAsync();
        }
        catch (Exception ex)
        {
            ShowNotification($"Ошибка при инициализации: {ex.Message}", "error");
            Character = CreateNewCharacterTemplate();
            _errorBoundary?.Recover();
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task LoadCharacterDataAsync()
    {
        try
        {
            if (CharacterId.HasValue && CharacterId.Value != Guid.Empty)
            {
                CharacterStorageDto = await CharacterService.GetCharacterByIdAsync(CharacterId.Value);
                Character = CharacterStorageDto?.Character;
                CampaignPlayer = await CharacterService.GetCampaignPlayerAsync(CharacterStorageDto!.CampaignPlayerId);
                if (Character == null)
                {
                    ShowNotification($"Персонаж с ID {CharacterId.Value} не найден. Создан новый шаблон.", "warning");
                    Character = CreateNewCharacterTemplate();
                    CharacterId = null;
                }
            }
            else
            {
                Character = CreateNewCharacterTemplate();
                if (CampaignId.HasValue)
                    CampaignPlayer = await CampaignService.GetCampaignPlayerAsync(CampaignId.Value);
            }
        }
        catch (Exception ex)
        {
            ShowNotification($"Ошибка при загрузке персонажа: {ex.Message}", "error");
            Character = CreateNewCharacterTemplate();
        }
    }

    private Character CreateNewCharacterTemplate()
    {
        return new Character
        {
            PersonalInfo = new PersonalInfo 
            { 
                PlayerName = IsNpc ? "NPC" : (CampaignPlayer?.PlayerName ?? "Unknown") 
            },
            Characteristics = new Characteristics(),
            Skills = SkillsModel.DefaultSkillsModel(),
            Backstory = string.Empty,
            Biography = new BiographyInfo(),
            Equipment = new Equipment(),
            Finances = new Finances(),
            CloseCombat = new CloseCombatDetails(),
            RangedCombat = new RangedCombatDetails(),
            Notes = string.Empty,
            CharacterType = IsNpc ? CharacterType.NonPlayerCharacter : CharacterType.PlayerCharacter
        };
    }

    private async Task SaveCharacterAsync()
    {
        if (Character == null || _isBusy)
            return;

        _isBusy = true;
        ClearNotification();

        try
        {
            if (string.IsNullOrWhiteSpace(Character.PersonalInfo?.Name))
            {
                Character.PersonalInfo ??= new PersonalInfo();
                Character.PersonalInfo.Name = IsNpc ? "Безымянный NPC" : "Безымянный";
                ShowNotification($"Имя {(IsNpc ? "NPC" : "персонажа")} не было указано, установлено '{Character.PersonalInfo.Name}'.", "warning");
            }
    
            // Ensure character type is set correctly
            Character.CharacterType = IsNpc ? CharacterType.NonPlayerCharacter : CharacterType.PlayerCharacter;
    
            // Set the player name - for NPCs it should be "NPC"
            if (Character.PersonalInfo != null)
            {
                Character.PersonalInfo.PlayerName = IsNpc ? "NPC" : (CampaignPlayer?.PlayerName ?? "Unknown");
            }
    
            if (CharacterId.HasValue && CharacterId.Value != Guid.Empty && Character.Id == CharacterId.Value)
            {
                await CharacterService.UpdateCharacterAsync(Character);
                ShowNotification($"{(IsNpc ? "NPC" : "Персонаж")} успешно обновлен!", "success");
            }
            else
            {
                Character.Id = Guid.Empty;
                var createdCharacter = await CharacterService.CreateCharacterAsync(Character, CampaignPlayer.Id);
    
                if (createdCharacter?.Id != null && createdCharacter.Id != Guid.Empty)
                {
                    Character.Id = createdCharacter.Id;
                    CharacterId = createdCharacter.Id;
                    ShowNotification($"{(IsNpc ? "NPC" : "Персонаж")} успешно создан!", "success");
                    NavigationManager.NavigateTo($"/character/{createdCharacter.Id}", replace: true);
                }
                else
                {
                    ShowNotification($"Ошибка: Не удалось получить ID созданного {(IsNpc ? "NPC" : "персонажа")}.", "error");
                }
            }
        }
        catch (Exception ex)
        {
            ShowNotification($"Ошибка при сохранении: {ex.Message}", "error");
            _errorBoundary?.Recover();
        }
        finally
        {
            _isBusy = false;
        }
    }

    private void ShowNotification(string message, string type)
    {
        if (string.IsNullOrWhiteSpace(message))
            return;

        _notification.Message = message;
        _notification.Type = type;
    }

    private void ClearNotification()
    {
        _notification.Message = null;
    }

    private void GenerateRandom()
    {
        Character = CharacterGenerationService.GenerateRandomCharacter();

        // Сохраняем имя игрока даже в случайно сгенерированном персонаже
        Character.PersonalInfo.PlayerName = IsNpc ? "NPC" : CampaignPlayer?.PlayerName;
        
        // Set the character type based on whether we're creating an NPC
        Character.CharacterType = IsNpc ? CharacterType.NonPlayerCharacter : CharacterType.PlayerCharacter;
    }

    private async Task ScrollToSection(string sectionId)
    {
        await JSRuntime.InvokeVoidAsync("scrollToElement", sectionId);
    }

    private async Task RecalculateAttributes()
    {
        // Здесь можно добавить логику для пересчета атрибутов при изменении характеристик
        StateHasChanged();
    }

    private void ResetUsedSkills()
    {
        if (Character?.Skills?.SkillGroups == null)
            return;

        foreach (var group in Character.Skills.SkillGroups)
        {
            foreach (var skill in group.Skills)
            {
                skill.IsUsed = false;
            }
        }

        ShowNotification("Все использованные навыки сброшены", "success");
        StateHasChanged();
    }

}