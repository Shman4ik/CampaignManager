@page "/create-campaign"
@inject CampaignService CampaignService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer

<div class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
    <h1 class="text-3xl font-bold mb-6">Создать кампанию</h1>

    <EditForm Model="@campaignModel" OnValidSubmit="@CreateCampaign" FormName="createCampaignForm">
        <DataAnnotationsValidator/>
        <Microsoft.AspNetCore.Components.Forms.ValidationSummary/>

        <div class="mb-4">
            <label for="campaignName" class="block text-gray-700 text-sm font-bold mb-2">Название кампании:</label>
            <InputText id="campaignName" @bind-Value="campaignModel.Name"
                       class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"/>
            <Microsoft.AspNetCore.Components.Forms.ValidationMessage For="@(() => campaignModel.Name)"
                                                                     class="text-red-500 text-xs"/>
        </div>

        <div class="mb-4">
            <label for="campaignStatus" class="block text-gray-700 text-sm font-bold mb-2">Статус:</label>
            <InputSelect id="campaignStatus" @bind-Value="campaignModel.Status"
                         class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                @foreach (var status in Enum.GetValues(typeof(CampaignStatus)))
                {
                    <option value="@status">@status</option>
                }
            </InputSelect>
        </div>

        <div class="flex items-center justify-between">
            <button type="submit"
                    class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
                    disabled="@isCreating">
                @if (isCreating)
                {
                    <span>Создание...</span>
                }
                else
                {
                    <span>Создать кампанию</span>
                }
            </button>
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mt-4" role="alert">
                <p>@errorMessage</p>
            </div>
        }
    </EditForm>
</div>

@code {
    private readonly CampaignCreateModel campaignModel = new();
    private bool isCreating;
    private string errorMessage = string.Empty;

    private async Task CreateCampaign()
    {
        try
        {
            isCreating = true;
            errorMessage = string.Empty;

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated != true)
            {
                errorMessage = "Необходимо войти в систему для создания кампании";
                return;
            }

            var campaign = await CampaignService.CreateCampaignAsync(campaignModel.Name);
            NavigationManager.NavigateTo("/");
        }
        catch (UnauthorizedAccessException)
        {
            errorMessage = "У вас нет прав для создания кампании";
        }
        catch (Exception ex)
        {
            errorMessage = $"Ошибка при создании кампании: {ex.Message}";
        }
        finally
        {
            isCreating = false;
        }
    }

}