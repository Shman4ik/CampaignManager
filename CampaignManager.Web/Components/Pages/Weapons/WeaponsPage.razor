@page "/weapons"
@using Blazorise
@using Blazorise.Icons.FontAwesome
@using CampaignManager.Web.Extensions
@using CampaignManager.Web.Model
@using CampaignManager.Web.Services
@using CampaignManager.Web.Weapons
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.AspNetCore.Components.Web

@inject WeaponService WeaponService 
@inject IJSRuntime JSRuntime 
@rendermode InteractiveServer

<PageTitle>Управление оружием - Campaign Manager</PageTitle>

<div class="max-w-7xl mx-auto px-4 py-6 font-sans"> 
    <h1 class="text-3xl font-bold text-gray-800 mb-6">Управление оружием</h1>
    
    <!-- Улучшенная панель фильтров -->
    <div class="bg-white rounded-lg shadow-md p-4 mb-6 border border-gray-200">
        <div class="mb-4">
            <h2 class="text-lg font-semibold text-gray-700 mb-2">Фильтры</h2>
            <div class="flex flex-col sm:flex-row gap-4">
                <div class="flex-grow">
                    <label for="searchQuery" class="block text-sm font-medium text-gray-700 mb-1">Поиск</label>
                    <div class="relative">
                        <input type="text" id="searchQuery"
                               class="w-full border rounded-lg pl-10 pr-4 py-2 text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 shadow-sm" 
                               placeholder="Поиск по названию, навыку..." 
                               @bind="searchQuery" 
                               @bind:event="oninput" />
                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <i class="fas fa-search text-gray-400"></i>
                        </div>
                    </div>
                </div>
                
                <div class="w-full sm:w-56">
                    <label for="typeFilter" class="block text-sm font-medium text-gray-700 mb-1">Тип оружия</label>
                    <select id="typeFilter" 
                            class="w-full border rounded-lg px-4 py-2 text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 shadow-sm"
                            @onchange="OnWeaponTypeFilterChanged">
                        <option value="">Все типы</option>
                        @foreach (var typeValue in EnumExtensions.GetWeaponTypes())
                        {
                            <option value="@typeValue">@typeValue.ToRussianString()</option>
                        }
                    </select>
                </div>
            </div>
        </div>
        
        <div class="flex flex-wrap gap-4 mb-3">
            <!-- Эпоха фильтры -->
            <div class="flex items-center space-x-6">
                <div class="flex items-center">
                    <input type="checkbox" id="is1920Filter" 
                           checked="@is1920Filter"
                           @onchange="@(e => { is1920Filter = (bool)e.Value; ApplyFilters(); })"
                           class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" />
                    <label for="is1920Filter" class="ml-2 text-sm text-gray-700">1920-е</label>
                </div>
                <div class="flex items-center">
                    <input type="checkbox" id="isModernFilter" 
                           checked="@isModernFilter"
                           @onchange="@(e => { isModernFilter = (bool)e.Value; ApplyFilters(); })"
                           class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" />
                    <label for="isModernFilter" class="ml-2 text-sm text-gray-700">Современное</label>
                </div>
            </div>
            
            <!-- Дополнительные фильтры с переключателем видимости -->
            <div class="flex items-center">
                <button type="button" 
                        @onclick="ToggleAdvancedFilters" 
                        class="flex items-center text-sm text-blue-600 hover:text-blue-800">
                    <span>@(showAdvancedFilters ? "Скрыть дополнительные фильтры" : "Показать дополнительные фильтры")</span>
                    <i class="fas @(showAdvancedFilters ? "fa-chevron-up" : "fa-chevron-down") ml-1"></i>
                </button>
            </div>
        </div>
        
        @if (showAdvancedFilters)
        {
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4 pt-3 border-t border-gray-200">
                <div>
                    <label for="damageFilter" class="block text-sm font-medium text-gray-700 mb-1">Фильтр по урону</label>
                    <input type="text" id="damageFilter" 
                           class="w-full border rounded-lg px-3 py-2 text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 shadow-sm" 
                           placeholder="Например: 1D10, 2D6+4" 
                           @bind="damageFilter" 
                           @bind:event="oninput" />
                </div>
                <div>
                    <label for="skillFilter" class="block text-sm font-medium text-gray-700 mb-1">Фильтр по навыку</label>
                    <input type="text" id="skillFilter" 
                           class="w-full border rounded-lg px-3 py-2 text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 shadow-sm" 
                           placeholder="Например: Стрельба (П), Драка" 
                           @bind="skillFilter" 
                           @bind:event="oninput" />
                </div>
                <div>
                    <label for="priceRangeFilter" class="block text-sm font-medium text-gray-700 mb-1">Ценовой диапазон</label>
                    <select id="priceRangeFilter" 
                            class="w-full border rounded-lg px-3 py-2 text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 shadow-sm"
                            @bind="priceRangeFilter">
                        <option value="">Любая цена</option>
                        <option value="low">Недорогое (до $20)</option>
                        <option value="medium">Среднее ($20-$100)</option>
                        <option value="high">Дорогое ($100+)</option>
                    </select>
                </div>
            </div>
        }
        
        <div class="flex flex-col sm:flex-row mt-4 justify-between items-center gap-3">
            <div>
                <span class="text-sm text-gray-600">Найдено оружия: <strong>@(filteredWeapons?.Count() ?? 0)</strong></span>
            </div>
            <button type="button" 
                    @onclick="ResetFilters" 
                    class="flex items-center px-4 py-2 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-lg transition duration-150 ease-in-out">
                <i class="fas fa-undo-alt mr-1"></i>
                <span>Сбросить фильтры</span>
            </button>
        </div>
    </div>
    
    <!-- Кнопка добавления оружия -->
    <div class="mb-6 flex justify-end">
        <button @onclick="ShowAddModal" 
                class="flex items-center px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition duration-150 ease-in-out shadow-md">
            <i class="fas fa-plus mr-2"></i>
            <span>Добавить оружие</span>
        </button>
    </div>
    
    @if (isLoading)
    {
        <div class="flex justify-center items-center p-8">
            <div class="animate-spin rounded-full h-10 w-10 border-b-2 border-blue-600"></div>
            <p class="ml-2 text-gray-600">Загрузка данных...</p>
        </div>
    }
    else if (filteredWeapons.Count() == 0)
    {
        <div class="bg-yellow-50 border-l-4 border-yellow-400 p-4 rounded">
            <div class="flex">
                <div class="flex-shrink-0">
                    <i class="fas fa-exclamation-circle text-yellow-400"></i>
                </div>
                <div class="ml-3">
                    <p class="text-sm text-yellow-700">
                        По заданным критериям поиска ничего не найдено. Попробуйте изменить параметры фильтрации.
                    </p>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="bg-white rounded-lg shadow-md overflow-hidden border border-gray-200">
            <!-- Десктопная версия таблицы -->
            <div class="hidden md:block">
                <QuickGrid Items="(IQueryable<Weapon>)filteredWeapons" TItem="Weapon" Class="w-full">
                    <PropertyColumn Property="@(w => w.Name)" Title="Название" Sortable="true" Class="px-4 py-3 border-b border-gray-200 font-medium">
                    </PropertyColumn>
                    <TemplateColumn Title="Тип" SortBy="GridSort<Weapon>.ByAscending(w => w.Type)" Class="px-4 py-3 border-b border-gray-200">
                        <ChildContent>
                            <div class="flex items-center">
                                <span>@context.Type.ToRussianString()</span>
                            </div>
                        </ChildContent>
                        <ColumnOptions>
                            <div class="p-2">
                                <select @onchange='e => OnColumnHeaderFilterChanged(e, "Type")'
                                        class="w-full border rounded px-2 py-1 text-sm">
                                    <option value="">Все типы</option>
                                    @foreach (var typeValue in EnumExtensions.GetWeaponTypes())
                                    {
                                        <option value="@typeValue">@typeValue.ToRussianString()</option>
                                    }
                                </select>
                            </div>
                        </ColumnOptions>
                    </TemplateColumn>
                    <PropertyColumn Property="@(w => w.Skill)" Title="Навык" Sortable="true" Class="px-4 py-3 border-b border-gray-200" />
                    <PropertyColumn Property="@(w => w.Damage)" Title="Урон" Class="px-4 py-3 border-b border-gray-200" />
                    <TemplateColumn Title="Эпоха" SortBy="GridSort<Weapon>.ByAscending(w => w.Is1920)" Class="px-4 py-3 border-b border-gray-200">
                        <ChildContent>
                            <div>
                                @if (context.Is1920) { <span class="inline-block px-2 py-1 bg-amber-100 text-amber-800 text-xs rounded-full">1920-е</span> }
                                @if (context.IsModern) { <span class="inline-block px-2 py-1 bg-slate-100 text-slate-800 text-xs rounded-full">Современное</span> }
                            </div>
                        </ChildContent>
                    </TemplateColumn>
                    <PropertyColumn Property="@(w => w.Range)" Title="Дистанция" Class="px-4 py-3 border-b border-gray-200" />
                    <PropertyColumn Property="@(w => w.Attacks)" Title="Атаки" Class="px-4 py-3 border-b border-gray-200" />
                    <PropertyColumn Property="@(w => w.Cost)" Title="Стоимость" Class="px-4 py-3 border-b border-gray-200" />
                    <TemplateColumn Title="Действия" Class="px-4 py-3 border-b border-gray-200 text-center">
                        <ChildContent Context="weapon">
                            <div class="flex justify-center space-x-2">
                                <button class="p-1 text-blue-600 hover:text-blue-800 hover:bg-blue-50 rounded-full transition duration-150 ease-in-out" 
                                        @onclick="() => ShowEditModal(weapon)" 
                                        title="Редактировать">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="p-1 text-red-600 hover:text-red-800 hover:bg-red-50 rounded-full transition duration-150 ease-in-out" 
                                        @onclick="() => ShowDeleteModal(weapon)" 
                                        title="Удалить">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </ChildContent>
                    </TemplateColumn>
                    <Paginator State="@pagination" />
                </QuickGrid>
            </div>
            
            <!-- Мобильная версия таблицы (карточки) -->
            <div class="md:hidden">
                @foreach (var weapon in filteredWeapons)
                {
                    <div class="border-b border-gray-200 p-4">
                        <div class="flex justify-between items-start mb-2">
                            <h3 class="font-semibold text-lg text-gray-800">@weapon.Name</h3>
                            <div class="flex space-x-1">
                                <button class="p-1 text-blue-600 hover:text-blue-800 hover:bg-blue-50 rounded-full transition duration-150 ease-in-out" 
                                        @onclick="() => ShowEditModal(weapon)" 
                                        title="Редактировать">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="p-1 text-red-600 hover:text-red-800 hover:bg-red-50 rounded-full transition duration-150 ease-in-out" 
                                        @onclick="() => ShowDeleteModal(weapon)" 
                                        title="Удалить">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                        
                        <div class="grid grid-cols-2 gap-2 text-sm">
                            <div>
                                <span class="text-gray-500">Тип:</span>
                                <span class="ml-1 font-medium">@weapon.Type.ToRussianString()</span>
                            </div>
                            <div>
                                <span class="text-gray-500">Навык:</span>
                                <span class="ml-1">@weapon.Skill</span>
                            </div>
                            <div>
                                <span class="text-gray-500">Урон:</span>
                                <span class="ml-1">@weapon.Damage</span>
                            </div>
                            <div>
                                <span class="text-gray-500">Дистанция:</span>
                                <span class="ml-1">@weapon.Range</span>
                            </div>
                            <div>
                                <span class="text-gray-500">Атаки:</span>
                                <span class="ml-1">@weapon.Attacks</span>
                            </div>
                            <div>
                                <span class="text-gray-500">Стоимость:</span>
                                <span class="ml-1">@weapon.Cost</span>
                            </div>
                        </div>
                        
                        <div class="mt-2 flex flex-wrap gap-1">
                            @if (weapon.Is1920) { <span class="inline-block px-2 py-1 bg-amber-100 text-amber-800 text-xs rounded-full">1920-е</span> }
                            @if (weapon.IsModern) { <span class="inline-block px-2 py-1 bg-slate-100 text-slate-800 text-xs rounded-full">Современное</span> }
                        </div>
                    </div>
                }
                
                <!-- Пагинация для мобильной версии -->
                <div class="p-4 border-t border-gray-200">
                    <Paginator State="@pagination" />
                </div>
            </div>
        </div>
    }
</div>

<!-- Улучшенное модальное окно для добавления/редактирования оружия -->
<Modal @bind-Visible="showModal" Size="ModalSize.Large">
    <ModalContent Centered="true" Class="bg-white rounded-lg shadow-xl overflow-hidden">
        <ModalHeader Class="p-5 border-b border-gray-200 bg-gradient-to-r from-blue-500 to-blue-600 text-white">
            <ModalTitle Class="font-bold text-xl">@(isEditMode ? "Редактировать оружие" : "Добавить оружие")</ModalTitle>
            <CloseButton Clicked="@HideModal" Class="text-white hover:bg-blue-700 rounded-full" />
        </ModalHeader>
        <ModalBody Class="p-6 bg-white max-h-[70vh] overflow-y-auto"> 
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="mb-4 p-3 bg-red-100 text-red-700 rounded-lg border border-red-300 flex items-start">
                    <i class="fas fa-exclamation-circle text-red-500 mr-2 mt-0.5"></i>
                    <span>@errorMessage</span>
                </div>
            }
            <EditForm Model="editWeapon" OnValidSubmit="HandleValidSubmit" Id="weapon-edit-form">
                <DataAnnotationsValidator />
                <Microsoft.AspNetCore.Components.Forms.ValidationSummary class="mb-4 p-3 bg-red-100 text-red-700 rounded-lg border border-red-300" />

                <div class="grid grid-cols-1 md:grid-cols-2 gap-5">
                    <div class="space-y-1">
                        <label for="weaponName" class="block text-sm font-medium text-gray-700">Название</label> 
                        <InputText id="weaponName" @bind-Value="editWeapon.Name" 
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 shadow-sm" /> 
                        <ValidationMessage For="@(() => editWeapon.Name)" class="text-red-600 text-sm" />
                    </div>

                    <div class="space-y-1">
                        <label for="weaponType" class="block text-sm font-medium text-gray-700">Тип</label>
                        <InputSelect id="weaponType" @bind-Value="editWeapon.Type" 
                                     class="w-full px-3 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 shadow-sm">
                            @foreach (var typeValue in EnumExtensions.GetWeaponTypes())
                            {
                                <option value="@typeValue">@typeValue.ToRussianString()</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => editWeapon.Type)" class="text-red-600 text-sm" />
                    </div>

                    <div class="space-y-1">
                        <label for="weaponSkill" class="block text-sm font-medium text-gray-700">Навык</label>
                        <InputText id="weaponSkill" @bind-Value="editWeapon.Skill" 
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 shadow-sm" />
                        <ValidationMessage For="@(() => editWeapon.Skill)" class="text-red-600 text-sm" />
                    </div>

                    <div class="space-y-1">
                        <label for="weaponDamage" class="block text-sm font-medium text-gray-700">Урон</label>
                        <InputText id="weaponDamage" @bind-Value="editWeapon.Damage" 
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 shadow-sm" />
                        <ValidationMessage For="@(() => editWeapon.Damage)" class="text-red-600 text-sm" />
                    </div>

                    <div class="space-y-1">
                        <label for="weaponRange" class="block text-sm font-medium text-gray-700">Дистанция</label>
                        <InputText id="weaponRange" @bind-Value="editWeapon.Range" 
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 shadow-sm" />
                        <ValidationMessage For="@(() => editWeapon.Range)" class="text-red-600 text-sm" />
                    </div>

                    <div class="space-y-1">
                        <label for="weaponAttacks" class="block text-sm font-medium text-gray-700">Атаки</label>
                        <InputText id="weaponAttacks" @bind-Value="editWeapon.Attacks" 
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 shadow-sm" />
                        <ValidationMessage For="@(() => editWeapon.Attacks)" class="text-red-600 text-sm" />
                    </div>

                    <div class="space-y-1">
                        <label for="weaponCost" class="block text-sm font-medium text-gray-700">Стоимость</label>
                        <InputText id="weaponCost" @bind-Value="editWeapon.Cost" 
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 shadow-sm" />
                        <ValidationMessage For="@(() => editWeapon.Cost)" class="text-red-600 text-sm" />
                    </div>

                    <div class="space-y-1">
                        <label for="weaponAmmo" class="block text-sm font-medium text-gray-700">Боеприпасы</label>
                        <InputText id="weaponAmmo" @bind-Value="editWeapon.Ammo" 
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 shadow-sm" />
                        <ValidationMessage For="@(() => editWeapon.Ammo)" class="text-red-600 text-sm" />
                    </div>

                    <div class="space-y-1">
                        <label for="weaponMalfunction" class="block text-sm font-medium text-gray-700">Осечка</label>
                        <InputText id="weaponMalfunction" @bind-Value="editWeapon.Malfunction" 
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 shadow-sm" />
                        <ValidationMessage For="@(() => editWeapon.Malfunction)" class="text-red-600 text-sm" />
                    </div>

                    <div class="flex items-center space-x-6 mt-2">
                         <div class="flex items-center">
                             <InputCheckbox id="weaponIs1920" @bind-Value="editWeapon.Is1920" class="h-5 w-5 text-blue-600 focus:ring-blue-500 border-gray-300 rounded mr-2" />
                             <label for="weaponIs1920" class="text-sm font-medium text-gray-700">Эпоха 1920-х</label>
                         </div>
                         <div class="flex items-center">
                            <InputCheckbox id="weaponIsModern" @bind-Value="editWeapon.IsModern" class="h-5 w-5 text-blue-600 focus:ring-blue-500 border-gray-300 rounded mr-2" />
                            <label for="weaponIsModern" class="text-sm font-medium text-gray-700">Современное</label>
                        </div>
                    </div>
                    
                    <div class="md:col-span-2 space-y-1 mt-2"> 
                        <label for="weaponNotes" class="block text-sm font-medium text-gray-700">Примечания</label>
                        <InputTextArea id="weaponNotes" @bind-Value="editWeapon.Notes" rows="3" 
                                       class="w-full px-3 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 shadow-sm" />
                        <ValidationMessage For="@(() => editWeapon.Notes)" class="text-red-600 text-sm" />
                    </div>
                </div>
            </EditForm>
        </ModalBody>
        <ModalFooter Class="p-5 border-t border-gray-200 flex justify-end space-x-3 bg-gray-50">
            <button type="button" 
                    class="px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition duration-150 ease-in-out shadow-sm" 
                    @onclick="HideModal">
                Отмена
            </button>
            <button type="submit" 
                    form="weapon-edit-form" 
                    class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition duration-150 ease-in-out shadow-sm">
                @(isEditMode ? "Сохранить изменения" : "Добавить оружие")
            </button>
        </ModalFooter>
    </ModalContent>
</Modal>

<!-- Улучшенное модальное окно для подтверждения удаления -->
<Modal @bind-Visible="showDeleteModal" Size="ModalSize.Small">
    <ModalContent Centered="true" Class="bg-white rounded-lg shadow-xl overflow-hidden">
        <ModalHeader Class="p-5 border-b border-gray-200 bg-gradient-to-r from-red-500 to-red-600 text-white">
            <ModalTitle Class="font-bold text-xl">Подтверждение удаления</ModalTitle>
            <CloseButton Clicked="@HideDeleteModal" Class="text-white hover:bg-red-700 rounded-full" />
        </ModalHeader>
        <ModalBody Class="p-6 bg-white max-h-[70vh] overflow-y-auto">
             @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="mb-4 p-3 bg-red-100 text-red-700 rounded-lg border border-red-300 flex items-start">
                    <i class="fas fa-exclamation-circle text-red-500 mr-2 mt-0.5"></i>
                    <span>@errorMessage</span>
                </div>
            }
            @if (deleteWeapon != null)
            {
                <div class="flex items-center mb-4">
                    <div class="mr-4 bg-red-100 text-red-500 rounded-full p-3">
                        <i class="fas fa-trash text-xl"></i>
                    </div>
                    <div>
                        <p class="text-gray-700">Вы уверены, что хотите удалить оружие "<strong>@deleteWeapon.Name</strong>"?</p>
                        <p class="text-sm text-gray-500 mt-1">Это действие нельзя будет отменить.</p>
                    </div>
                </div>
            }
        </ModalBody>
        <ModalFooter Class="p-5 border-t border-gray-200 flex justify-end space-x-3 bg-gray-50">
            <button type="button" 
                    class="px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition duration-150 ease-in-out shadow-sm" 
                    @onclick="HideDeleteModal">
                Отмена
            </button>
            <button type="button" 
                    class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition duration-150 ease-in-out shadow-sm" 
                    @onclick="ConfirmDelete">
                <i class="fas fa-trash mr-1"></i>
                Удалить
            </button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {

    // List to hold all weapons fetched from the service
    private List<Weapon>? weapons; // Nullable to indicate loading state

    // Filtered list based on search query and other filters
    private IQueryable<Weapon> filteredWeapons => GetFilteredWeapons();

    // Search query bound to the input field
    private string searchQuery = string.Empty;

    // Advanced filtering variables
    private WeaponType? selectedTypeFilter = null;
    private bool is1920Filter = false;
    private bool isModernFilter = false;
    private string damageFilter = string.Empty;
    private string skillFilter = string.Empty;
    private string priceRangeFilter = string.Empty;
    private bool showAdvancedFilters = false;

    // Column header filter values
    private Dictionary<string, string> columnFilters = new Dictionary<string, string>();

    // Modal visibility flags
    private bool showModal = false;
    private bool showDeleteModal = false;

    // State for Add/Edit modal
    private bool isEditMode = false;
    private Weapon editWeapon = new(); // Model for the edit form

    // Weapon object targeted for deletion
    private Weapon? deleteWeapon;

    // Pagination state for QuickGrid
    private PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    // Error message state
    private string? errorMessage;

    // Flag to indicate if data is being loaded
    private bool isLoading = false;

    // Lifecycle method: Load data when the component is initialized
    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        await LoadWeaponsAsync();
        isLoading = false;
    }

    // Method to load weapons data from the service
    private async Task LoadWeaponsAsync()
    {
        errorMessage = null; // Clear previous errors
        try
        {
            weapons = await WeaponService.GetAllWeaponsAsync();
        }
        catch (Exception ex)
        {
            // Log the error (e.g., to console or a logging service)
            Console.WriteLine($"Error loading weapons: {ex.Message}");
            errorMessage = "Не удалось загрузить список оружия. Пожалуйста, попробуйте позже.";
            weapons = new List<Weapon>(); // Ensure weapons is not null
        }
    }

    // Reset all filters to their default state
    private void ResetFilters()
    {
        searchQuery = string.Empty;
        selectedTypeFilter = null;
        is1920Filter = false;
        isModernFilter = false;
        damageFilter = string.Empty;
        skillFilter = string.Empty;
        priceRangeFilter = string.Empty;
        columnFilters.Clear();

        // Apply filters to update the UI
        ApplyFilters();
    }

    // Toggle visibility of advanced filters
    private void ToggleAdvancedFilters()
    {
        showAdvancedFilters = !showAdvancedFilters;
    }

    // Handle weapon type filter change
    private void OnWeaponTypeFilterChanged(ChangeEventArgs e)
    {
        string? value = e.Value?.ToString();
        if (string.IsNullOrEmpty(value))
        {
            selectedTypeFilter = null;
        }
        else if (Enum.TryParse<WeaponType>(value, out var typeValue))
        {
            selectedTypeFilter = typeValue;
        }

        ApplyFilters();
    }

    // Handle price range filter change
    private void OnPriceRangeFilterChanged(ChangeEventArgs e)
    {
        priceRangeFilter = e.Value?.ToString() ?? string.Empty;
        ApplyFilters();
    }

    // Handle column header filter change
    private void OnColumnHeaderFilterChanged(ChangeEventArgs e, string columnName)
    {
        string value = e.Value?.ToString() ?? "";

        if (string.IsNullOrWhiteSpace(value))
        {
            if (columnFilters.ContainsKey(columnName))
            {
                columnFilters.Remove(columnName);
            }
        }
        else
        {
            columnFilters[columnName] = value;
        }

        ApplyFilters();
    }

    // Apply all filters (this just calls StateHasChanged since the filteredWeapons property is computed)
    private void ApplyFilters()
    {
        // This will trigger a re-render which will use our updated filter values
        StateHasChanged();
    }

    // Show the modal for adding a new weapon
    private void ShowAddModal()
    {
        isEditMode = false;
        editWeapon = new Weapon(); // Reset the edit model
        errorMessage = null; // Clear errors
        showModal = true;
    }

    // Show the modal for editing an existing weapon
    private void ShowEditModal(Weapon weapon)
    {
        isEditMode = true;
        // Clone the weapon object to avoid modifying the original list item directly
        editWeapon = new Weapon
        {
            Id = weapon.Id,
            Name = weapon.Name,
            Type = weapon.Type,
            Skill = weapon.Skill,
            Is1920 = weapon.Is1920,
            IsModern = weapon.IsModern,
            Damage = weapon.Damage,
            Range = weapon.Range,
            Attacks = weapon.Attacks,
            Cost = weapon.Cost,
            Notes = weapon.Notes,
            Ammo = weapon.Ammo,
            Malfunction = weapon.Malfunction
        };
        errorMessage = null; // Clear errors
        showModal = true;
    }

    // Hide the Add/Edit modal
    private void HideModal()
    {
        showModal = false;
    }

    // Handle the valid submission of the Add/Edit form
    private async Task HandleValidSubmit()
    {
        errorMessage = null; // Clear previous errors
        try
        {
            if (isEditMode)
            {
                await WeaponService.UpdateWeaponAsync(editWeapon);
            }
            else
            {
                await WeaponService.AddWeaponAsync(editWeapon);
            }

            showModal = false; // Close modal on success
            await LoadWeaponsAsync(); // Refresh the list
            ApplyFilters(); // Reapply filters
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving weapon: {ex.Message}");
            errorMessage = $"Не удалось сохранить оружие: {ex.Message}";
            // Keep the modal open to show the error
        }
    }

    // Show the delete confirmation modal
    private void ShowDeleteModal(Weapon weapon)
    {
        deleteWeapon = weapon;
        errorMessage = null; // Clear errors
        showDeleteModal = true;
    }

    // Hide the delete confirmation modal
    private void HideDeleteModal()
    {
        showDeleteModal = false;
        deleteWeapon = null;
    }

    // Confirm and execute the weapon deletion
    private async Task ConfirmDelete()
    {
        if (deleteWeapon == null) return; // Should not happen, but good practice

        errorMessage = null; // Clear previous errors
        try
        {
            await WeaponService.DeleteWeaponAsync(deleteWeapon.Id); // Use Guid Id
            showDeleteModal = false;
            await LoadWeaponsAsync(); // Refresh the list
            deleteWeapon = null; // Clear the selected weapon
            ApplyFilters(); // Reapply filters
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting weapon: {ex.Message}");
            errorMessage = $"Не удалось удалить оружие: {ex.Message}";
            // Keep the modal open to show the error
        }
    }

    // Filter weapons based on all active filters
    private IQueryable<Weapon> GetFilteredWeapons() // Return non-nullable IQueryable<Weapon>
    {
        if (weapons == null)
        {
            return Enumerable.Empty<Weapon>().AsQueryable(); // Return empty IQueryable if source is null
        }

        var query = weapons.AsQueryable(); // Use AsQueryable for QuickGrid

        // Apply text search filter
        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            query = query.Where(w =>
                (w.Name != null && w.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)) ||
                (w.Skill != null && w.Skill.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)) ||
                (w.Type.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase)) ||
                (w.Damage != null && w.Damage.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)) ||
                (w.Notes != null && w.Notes.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
            );
        }

        // Apply weapon type filter
        if (selectedTypeFilter.HasValue)
        {
            query = query.Where(w => w.Type == selectedTypeFilter.Value);
        }

        // Apply era filters
        if (is1920Filter && !isModernFilter)
        {
            query = query.Where(w => w.Is1920);
        }
        else if (!is1920Filter && isModernFilter)
        {
            query = query.Where(w => w.IsModern);
        }
        else if (is1920Filter && isModernFilter)
        {
            query = query.Where(w => w.Is1920 || w.IsModern);
        }

        // Apply damage filter
        if (!string.IsNullOrWhiteSpace(damageFilter))
        {
            query = query.Where(w => w.Damage != null && w.Damage.Contains(damageFilter, StringComparison.OrdinalIgnoreCase));
        }

        // Apply skill filter
        if (!string.IsNullOrWhiteSpace(skillFilter))
        {
            query = query.Where(w => w.Skill != null && w.Skill.Contains(skillFilter, StringComparison.OrdinalIgnoreCase));
        }

        // Apply price range filter
        if (!string.IsNullOrWhiteSpace(priceRangeFilter))
        {
            query = priceRangeFilter switch
            {
                "low" => query.Where(w => IsPriceLow(w.Cost)),
                "medium" => query.Where(w => IsPriceMedium(w.Cost)),
                "high" => query.Where(w => IsPriceHigh(w.Cost)),
                _ => query
            };
        }

        // Apply column header filters
        foreach (var filter in columnFilters)
        {
            if (filter.Key == "Name" && !string.IsNullOrWhiteSpace(filter.Value))
            {
                query = query.Where(w => w.Name != null && w.Name.Contains(filter.Value, StringComparison.OrdinalIgnoreCase));
            }
            else if (filter.Key == "Type" && !string.IsNullOrWhiteSpace(filter.Value))
            {
                if (Enum.TryParse<WeaponType>(filter.Value, out var typeValue))
                {
                    query = query.Where(w => w.Type == typeValue);
                }
            }
        }

        return query;
    }

    // Helper methods to determine price range
    private bool IsPriceLow(string? price)
    {
        if (string.IsNullOrWhiteSpace(price)) return false;

        // Extract numeric parts from the price string
        string numericPart = new string(price.Where(c => char.IsDigit(c) || c == '.').ToArray());
        if (string.IsNullOrWhiteSpace(numericPart)) return false;

        if (decimal.TryParse(numericPart, out decimal value))
        {
            return value < 20;
        }

        return false;
    }

    private bool IsPriceMedium(string? price)
    {
        if (string.IsNullOrWhiteSpace(price)) return false;

        // Extract numeric parts from the price string
        string numericPart = new string(price.Where(c => char.IsDigit(c) || c == '.').ToArray());
        if (string.IsNullOrWhiteSpace(numericPart)) return false;

        if (decimal.TryParse(numericPart, out decimal value))
        {
            return value >= 20 && value <= 100;
        }

        return false;
    }

    private bool IsPriceHigh(string? price)
    {
        if (string.IsNullOrWhiteSpace(price)) return false;

        // Extract numeric parts from the price string
        string numericPart = new string(price.Where(c => char.IsDigit(c) || c == '.').ToArray());
        if (string.IsNullOrWhiteSpace(numericPart)) return false;

        if (decimal.TryParse(numericPart, out decimal value))
        {
            return value > 100;
        }

        return false;
    }

}
