@page "/bestiary/creatures"
@attribute [Authorize]
@inject CreatureService CreatureService
@inject NavigationManager NavigationManager
@inject ILogger<CreaturesPage> Logger
@rendermode InteractiveServer
<PageTitle>Creatures</PageTitle>

<div class="container mx-auto px-4 py-8">
    <div class="flex justify-between items-center mb-6">
        <h1 class="text-3xl font-bold">Creatures</h1>
        <button @onclick="@(() => NavigationManager.NavigateTo("/bestiary/creatures/new"))" 
                class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded inline-flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd" />
            </svg>
            <span>Add Creature</span>
        </button>
    </div>

    <div class="bg-white shadow-md rounded-lg overflow-hidden mb-8">
        <div class="p-4 bg-gray-50 border-b border-gray-200">
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                    <input type="text" @bind="@_searchTerm" @bind:event="oninput" @onkeyup="SearchKeyUp" 
                           placeholder="Search creatures..." 
                           class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
                </div>
                
                <div>
                    <select @bind="_selectedType" class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                        <option value="">All Types</option>
                        @foreach (var type in Enum.GetValues(typeof(CreatureType)))
                        {
                            <option value="@type">@type</option>
                        }
                    </select>
                </div>
                
                <div>
                    <button @onclick="ClearFilters" class="bg-gray-200 hover:bg-gray-300 text-gray-800 py-2 px-4 rounded w-full">
                        Clear Filters
                    </button>
                </div>
            </div>
        </div>
    </div>

    @if (_loading)
    {
        <div class="flex justify-center items-center h-64">
            <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
        </div>
    }
    else if (_filteredCreatures.Count == 0)
    {
        <div class="bg-white shadow-md rounded-lg p-6 text-center">
            @if (!string.IsNullOrEmpty(_searchTerm) || _selectedType != CreatureType.Other.ToString())
            {
                <p class="text-lg text-gray-600 mb-4">No creatures match your search criteria.</p>
                <button @onclick="ClearFilters" class="bg-gray-200 hover:bg-gray-300 text-gray-800 py-2 px-4 rounded">
                    Clear Filters
                </button>
            }
            else
            {
                <p class="text-lg text-gray-600 mb-4">No creatures found in the database.</p>
                <p class="text-gray-500">Add your first creature to get started.</p>
            }
        </div>
    }
    else
    {
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            @foreach (var creature in _filteredCreatures)
            {
                <div class="bg-white shadow-md rounded-lg overflow-hidden hover:shadow-lg transition-shadow duration-300">
                    <div class="p-6">
                        <h2 class="text-xl font-semibold mb-2">@creature.Name</h2>
                        <div class="text-sm text-gray-600 mb-3">
                            <span class="inline-block bg-blue-100 text-blue-800 rounded-full px-3 py-1 text-xs">
                                @creature.Type
                            </span>
                        </div>

                        @if (!string.IsNullOrEmpty(creature.ImageUrl))
                        {
                            <div class="mb-4">
                                <img src="@GetImageUrl(creature.ImageUrl)" alt="@creature.Name" class="w-full h-48 object-cover rounded" />
                            </div>
                        }

                        <h3 class="font-medium mb-1">Characteristics:</h3>
                        <div class="grid grid-cols-2 gap-2 mb-3 text-sm">
                            <div><span class="font-medium">STR:</span> @creature.CreatureCharacteristics?.Strength?.Value</div>
                            <div><span class="font-medium">DEX:</span> @creature.CreatureCharacteristics?.Dexterity?.Value</div>
                            <div><span class="font-medium">INT:</span> @creature.CreatureCharacteristics?.Intelligence?.Value</div>
                            <div><span class="font-medium">CON:</span> @creature.CreatureCharacteristics?.Constitution?.Value</div>
                            <div><span class="font-medium">APP:</span> @creature.CreatureCharacteristics?.Appearance?.Value</div>
                            <div><span class="font-medium">POW:</span> @creature.CreatureCharacteristics?.Power?.Value</div>
                            <div><span class="font-medium">SIZ:</span> @creature.CreatureCharacteristics?.Size?.Value</div>
                            <div><span class="font-medium">EDU:</span> @creature.CreatureCharacteristics?.Education?.Value</div>
                            <div><span class="font-medium">HP:</span> @creature.CreatureCharacteristics?.HealPoint</div>
                            <div><span class="font-medium">MP:</span> @creature.CreatureCharacteristics?.ManaPoint</div>
                        </div>

                        <p class="text-gray-600 line-clamp-3">
                            @(string.IsNullOrEmpty(creature.Description) 
                                ? "No description provided." 
                                : creature.Description)
                        </p>
                    </div>

                    <div class="bg-gray-50 px-6 py-3 flex justify-between">
                        <button @onclick="@(() => NavigationManager.NavigateTo($"/bestiary/creatures/{creature.Id}"))"
                                class="text-blue-600 hover:text-blue-800 hover:bg-blue-50 py-1 px-3 rounded text-sm inline-flex items-center">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                            </svg>
                            <span>View</span>
                        </button>
                        <div>
                            <button @onclick="@(() => NavigationManager.NavigateTo($"/bestiary/creatures/{creature.Id}/edit"))"
                                    class="text-gray-600 hover:text-gray-800 hover:bg-gray-50 py-1 px-3 rounded text-sm inline-flex items-center mr-1">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                </svg>
                                <span>Edit</span>
                            </button>
                            <button @onclick="@(() => ConfirmDelete(creature))"
                                    class="text-red-600 hover:text-red-800 hover:bg-red-50 py-1 px-3 rounded text-sm inline-flex items-center">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                </svg>
                                <span>Delete</span>
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<!-- Delete Confirmation Modal -->
@if (_showDeleteModal)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white rounded-lg shadow-xl p-6 max-w-md w-full">
            <h3 class="text-xl font-semibold mb-4">Confirm Deletion</h3>
            <p class="mb-6">Are you sure you want to delete <strong>@_creatureToDelete?.Name</strong>? This action cannot be undone.</p>
            <div class="flex justify-end space-x-3">
                <button @onclick="() => _showDeleteModal = false" 
                        class="border border-gray-300 bg-white text-gray-700 py-2 px-4 rounded hover:bg-gray-100">
                    Cancel
                </button>
                <button @onclick="DeleteCreature" 
                        class="bg-red-600 hover:bg-red-700 text-white py-2 px-4 rounded">
                    Delete
                </button>
            </div>
        </div>
    </div>
}

@code {
    private List<Creature> _creatures = [];
    private List<Creature> _filteredCreatures = [];
    private bool _loading = true;
    private string _searchTerm = "";
    private string _selectedType = "";
    private bool _showDeleteModal = false;
    private Creature? _creatureToDelete;
    private Timer? _searchTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private string GetImageUrl(string? imageUrl)
    {
        if (string.IsNullOrEmpty(imageUrl))
            return string.Empty;

        // If the URL already starts with http:// or https://, return it as is
        if (imageUrl.StartsWith("http://") || imageUrl.StartsWith("https://"))
            return imageUrl;

        // Otherwise, use our API endpoint to proxy the request to Minio
        return $"/api/minio/image/{imageUrl}";
    }

    private async Task LoadData()
    {
        try
        {
            _loading = true;
            
            // Load creatures
            _creatures = await CreatureService.GetAllCreaturesAsync();
            
            ApplyFilters();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading creatures data");
        }
        finally
        {
            _loading = false;
        }
    }

    private void ApplyFilters()
    {
        _filteredCreatures = _creatures;
        
        // Apply search term filter
        if (!string.IsNullOrWhiteSpace(_searchTerm))
        {
            string searchLower = _searchTerm.ToLower();
            _filteredCreatures = _filteredCreatures
                .Where(c => (c.Name?.ToLower().Contains(searchLower) ?? false) || 
                           (c.Description?.ToLower().Contains(searchLower) ?? false))
                .ToList();
        }
        
        // Apply type filter
        if (!string.IsNullOrWhiteSpace(_selectedType) && Enum.TryParse<CreatureType>(_selectedType, out var creatureType))
        {
            _filteredCreatures = _filteredCreatures
                .Where(c => c.Type == creatureType)
                .ToList();
        }
    }

    private void SearchKeyUp(KeyboardEventArgs e)
    {
        // Debounce search input
        _searchTimer?.Dispose();
        _searchTimer = new Timer(_ =>
        {
            InvokeAsync(() =>
            {
                ApplyFilters();
                StateHasChanged();
            });
        }, null, 300, Timeout.Infinite);
    }

    private void ClearFilters()
    {
        _searchTerm = "";
        _selectedType = "";
        ApplyFilters();
    }

    private void ConfirmDelete(Creature creature)
    {
        _creatureToDelete = creature;
        _showDeleteModal = true;
    }

    private async Task DeleteCreature()
    {
        if (_creatureToDelete is null)
        {
            return;
        }

        try
        {
            bool success = await CreatureService.DeleteCreatureAsync(_creatureToDelete.Id);
            if (success)
            {
                _creatures.Remove(_creatureToDelete);
                ApplyFilters();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting creature {CreatureId}", _creatureToDelete.Id);
        }
        finally
        {
            _showDeleteModal = false;
            _creatureToDelete = null;
        }
    }
}
