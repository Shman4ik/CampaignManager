@using System.Security.Claims
@using CampaignManager.Web.Model
@using CampaignManager.Web.Utilities.Services
@using Blazorise

@inject CampaignService CampaignService
@inject IdentityService UserInformationService
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<Container Class="mb-8">
    <Row>
            <h3 class="mb-4">Ваши кампании</h3>
            @if (!IsUserAuthenticated)
            {
                <Alert Color="Color.Info" Class="mb-4">
                    Войдите в систему, чтобы увидеть свои кампании и присоединиться к новым.
                </Alert>
            }
            else if (UserCampaigns == null)
            {
                <p>Загрузка кампаний...</p>
            }
            else if (UserCampaigns.Count == 0)
            {
                <Alert Color="Color.Warning">У вас пока нет доступных кампаний.</Alert>
            }
            else
            {
                <Row Class="g-4">
                    @foreach (var campaign in UserCampaigns)
                    {
                        <Col md="6" lg="4">
                            <Card Class="mb-4 shadow-sm">
                                <CardHeader>
                                    <strong>@campaign.Name</strong>
                                </CardHeader>
                                <CardBody>
                                    <div class="mb-2 text-muted">
                                        <span class="fw-bold">Хранитель:</span> @campaign.KeeperEmail
                                        @if (CurrentUserId == campaign.KeeperEmail)
                                        {
                                            <Badge Color="Color.Primary" Class="ms-2">Вы</Badge>
                                        }
                                    </div>
                                    <div class="mb-2 text-muted">
                                        <span class="fw-bold">Игроки:</span> @campaign.Players?.Count
                                    </div>
                                    @{
                                        var userCharacter = GetUserCharacter(campaign);
                                    }
                                    @if (userCharacter != null)
                                    {
                                        <Card Class="mb-2 bg-light">
                                            <CardBody>
                                                <div class="fw-bold">@userCharacter!.CharacterName</div>
                                                <div class="small text-muted mb-2">Профессия: @userCharacter!.Character.PersonalInfo.Occupation</div>
                                                <Button Color="Color.Primary" Class="w-100" Clicked="@(() => EditCharacter(userCharacter.Id))">Редактировать</Button>
                                            </CardBody>
                                        </Card>
                                    }
                                    else
                                    {
                                        <div class="mb-2">У вас пока нет персонажей в этой кампании.</div>
                                        <Button Color="Color.Primary" Outline Class="w-100" Clicked="@(() => CreateNewCharacter(campaign.Id))">Создать нового персонажа</Button>
                                    }
                                </CardBody>
                            </Card>
                    }
                </Row>
            }
    </Row>
</Container>

@code {
    private List<Campaign>? UserCampaigns;
    private bool IsUserAuthenticated => CurrentUserId is not null;
    private string? CurrentUserId;

    protected override async Task OnInitializedAsync()
    {
        CurrentUserId = UserInformationService.GetCurrentUserEmail();
        if (IsUserAuthenticated)
        {
            UserCampaigns = await CampaignService.GetUserCampaignsAsync();
        }
    }

    private CharacterStorageDto? GetUserCharacter(Campaign campaign)
    {
        return campaign.Players?
        .FirstOrDefault(p => p.PlayerEmail == CurrentUserId)
        ?.Characters?
        .Where(p => p.Status == CharacterStatus.Active)?
        .SingleOrDefault();
    }

    private void EditCharacter(Guid characterId)
    {
        NavigationManager.NavigateTo($"/character/{characterId}");
    }

    private void CreateNewCharacter(Guid campaignId)
    {
        NavigationManager.NavigateTo($"/character/create/{campaignId}");
    }
}