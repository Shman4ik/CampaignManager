<div class="flex items-center">
    @if (!string.IsNullOrEmpty(Label))
    {
        <label class="text-sm w-24">@Label</label>
    }

    @switch (Type)
    {
        case "text":
            <input type="text"
                   value="@Value"
                   @onchange="@(e => OnValueChanged.InvokeAsync(e.Value?.ToString()))"
                   class="@GetInputClass()"/>
            break;
        case "number":
            <input type="number"
                   value="@Value"
                   @onchange="@(e => OnValueChanged.InvokeAsync(e.Value?.ToString()))"
                   class="@GetInputClass()"/>
            break;
        case "checkbox":
            <input type="checkbox"
                   checked="@(Value?.ToLower() == "true")"
                   @onchange="@(e => OnValueChanged.InvokeAsync(e.Value != null && (bool)e.Value ? "true" : "false"))"
                   class="@GetInputClass()"/>
            break;
    }
</div>

@code {
    [Parameter] public required string Label { get; set; }
    [Parameter] public required string Value { get; set; }
    [Parameter] public string Type { get; set; } = "text";
    [Parameter] public bool FullWidth { get; set; } = true;
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public EventCallback<string> OnValueChanged { get; set; }

    private string GetInputClass()
    {
        var baseClass = "px-2 py-1 text-sm border rounded";
        if (Type == "checkbox")
            return $"{baseClass} text-center";
        if (FullWidth)
            return $"{baseClass} w-full min-w-10";
        return $"{baseClass} w-20 min-w-10";
    }

}