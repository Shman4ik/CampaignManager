@using CampaignManager.Web.Components.Features.Combat.Model
@using CampaignManager.Web.Components.Features.Campaigns.Services
@using CampaignManager.Web.Components.Features.Scenarios.Services
@using CampaignManager.Web.Components.Features.Campaigns.Models
@using CampaignManager.Web.Components.Features.Scenarios.Model
@inject CampaignService CampaignService
@inject ScenarioService ScenarioService

<div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
    <div class="bg-white rounded-lg p-6 max-w-lg w-full mx-4 max-h-[90vh] overflow-y-auto">
        <h2 class="text-xl font-semibold mb-6">–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç –±–æ—è</h2>

        <div class="space-y-4">

            <!-- Campaign Selection -->
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">–ö–∞–º–ø–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label>
                <select @bind="selectedCampaignId"
                        class="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                    <option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–º–ø–∞–Ω–∏—é --</option>
                    @foreach (var campaign in availableCampaigns)
                    {
                        <option value="@campaign.Id">@campaign.Name</option>
                    }
                </select>
            </div>

            <!-- Scenario Selection -->
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">–°—Ü–µ–Ω–∞—Ä–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label>
                <select @bind="selectedScenarioId"
                        class="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                    <option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π --</option>
                    @foreach (var scenario in availableScenarios)
                    {
                        <option value="@scenario.Id">@scenario.Name</option>
                    }
                </select>
            </div>

            <!-- Quick Templates -->
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">–ë—ã—Å—Ç—Ä—ã–µ —à–∞–±–ª–æ–Ω—ã</label>
                <div class="grid grid-cols-2 gap-2">
                    <button @onclick="@(() => UseTemplate("investigation"))"
                            class="p-3 border border-gray-300 rounded-lg hover:bg-gray-50 text-left">
                        <div class="font-medium text-sm">üîç –†–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ</div>
                        <div class="text-xs text-gray-600">–°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å –∫—É–ª—å—Ç–∏—Å—Ç–∞–º–∏</div>
                    </button>

                    <button @onclick="@(() => UseTemplate("street"))"
                            class="p-3 border border-gray-300 rounded-lg hover:bg-gray-50 text-left">
                        <div class="font-medium text-sm">üèôÔ∏è –£–ª–∏—á–Ω–∞—è –¥—Ä–∞–∫–∞</div>
                        <div class="text-xs text-gray-600">–û–±—ã—á–Ω—ã–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∏</div>
                    </button>

                    <button @onclick="@(() => UseTemplate("horror"))"
                            class="p-3 border border-gray-300 rounded-lg hover:bg-gray-50 text-left">
                        <div class="font-medium text-sm">üëπ –£–∂–∞—Å</div>
                        <div class="text-xs text-gray-600">–ú–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Å—É—â–µ—Å—Ç–≤–∞</div>
                    </button>

                    <button @onclick="@(() => UseTemplate("chase"))"
                            class="p-3 border border-gray-300 rounded-lg hover:bg-gray-50 text-left">
                        <div class="font-medium text-sm">üèÉ –ü–æ–≥–æ–Ω—è</div>
                        <div class="text-xs text-gray-600">–î–∏–Ω–∞–º–∏—á–Ω–æ–µ –ø—Ä–µ—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ</div>
                    </button>
                </div>
            </div>

            <!-- Combat Settings Preview -->
            <div class="bg-gray-50 rounded-lg p-4">
                <h4 class="font-medium text-gray-900 mb-2">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—è</h4>
                <div class="space-y-2 text-sm">
                    <label class="flex items-center">
                        <input type="checkbox" @bind="autoRollInitiative" class="mr-2"/>
                        <span>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—Ä–æ—Å–∞—Ç—å –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É</span>
                    </label>

                    <label class="flex items-center">
                        <input type="checkbox" @bind="usePositioning" class="mr-2" disabled/>
                        <span class="text-gray-500">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (—Å–∫–æ—Ä–æ)</span>
                    </label>

                    <label class="flex items-center">
                        <input type="checkbox" @bind="allowDelayedActions" class="mr-2"/>
                        <span>–†–∞–∑—Ä–µ—à–∏—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</span>
                    </label>
                </div>
            </div>

        </div>

        <!-- Buttons -->
        <div class="flex justify-end gap-3 mt-6 pt-4 border-t">
            <button @onclick="@(() => OnCancel.InvokeAsync())"
                    class="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-lg transition-colors">
                –û—Ç–º–µ–Ω–∞
            </button>

            <button @onclick="CreateCombat"
                    class="@GetCreateButtonClass() px-6 py-2 rounded-lg font-medium transition-colors">
                ‚öîÔ∏è –ù–∞—á–∞—Ç—å –±–æ–π
            </button>
        </div>
    </div>
</div>

@code {
    [Parameter] public EventCallback<CombatEncounter> OnCombatCreated { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private string selectedCampaignId = "";
    private string selectedScenarioId = "";
    private bool autoRollInitiative = true;
    private bool usePositioning = false;
    private bool allowDelayedActions = true;

    private List<Campaign> availableCampaigns = new();
    private List<Scenario> availableScenarios = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadCampaignsAsync();
        await LoadScenariosAsync();
    }

    private async Task LoadCampaignsAsync()
    {
        try
        {
            availableCampaigns = await CampaignService.GetAvailableCompaniesAsync();
        }
        catch (Exception)
        {
            // Fallback to empty list if service fails
            availableCampaigns = new List<Campaign>();
        }
    }

    private async Task LoadScenariosAsync()
    {
        try
        {
            availableScenarios = await ScenarioService.GetAllScenariosAsync();
        }
        catch (Exception)
        {
            // Fallback to empty list if service fails
            availableScenarios = new List<Scenario>();
        }
    }

    private void UseTemplate(string templateType)
    {
        // Templates now just set combat settings without name/description
        switch (templateType)
        {
            case "investigation":
                autoRollInitiative = true;
                allowDelayedActions = true;
                break;

            case "street":
                autoRollInitiative = true;
                allowDelayedActions = false;
                break;

            case "horror":
                autoRollInitiative = false; // Manual initiative for dramatic effect
                allowDelayedActions = true;
                break;

            case "chase":
                autoRollInitiative = true;
                allowDelayedActions = false;
                break;
        }
    }

    private async Task CreateCombat()
    {
        // Create new combat encounter with simplified data
        var encounter = new CombatEncounter
        {
            State = CombatState.Setup,
            AutoRollInitiative = autoRollInitiative,
            UsePositioning = usePositioning,
            AllowDelayedActions = allowDelayedActions
        };

        // Set campaign and scenario if selected
        if (Guid.TryParse(selectedCampaignId, out var campaignId))
        {
            encounter.CampaignId = campaignId;
        }

        if (Guid.TryParse(selectedScenarioId, out var scenarioId))
        {
            encounter.ScenarioId = scenarioId;
        }

        await OnCombatCreated.InvokeAsync(encounter);
    }

    private string GetCreateButtonClass()
    {
        return "bg-green-600 hover:bg-green-700 text-white";
    }

}