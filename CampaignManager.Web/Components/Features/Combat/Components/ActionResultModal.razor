@using CampaignManager.Web.Components.Features.Combat.Model
@using CampaignManager.Web.Components.Features.Combat.Services

<div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
    <div class="bg-white rounded-lg p-6 max-w-md w-full mx-4">
        <div class="text-center">
            <!-- Action Icon -->
            <div class="text-4xl mb-4">
                @GetActionIcon()
            </div>

            <!-- Action Title -->
            <h3 class="text-lg font-semibold mb-2 @GetTitleColorClass()">
                @GetActionTitle()
            </h3>

            <!-- Action Description -->
            <p class="text-gray-600 mb-4">
                @Result.Description
            </p>

            <!-- Roll Results -->
            @if (Result.Action.Roll != null)
            {
                <div class="bg-gray-50 rounded-lg p-4 mb-4">
                    <div class="text-sm text-gray-700 mb-2">–†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞:</div>

                    <div class="text-2xl font-bold @GetSuccessLevelColorClass() mb-2">
                        @Result.Action.Roll.Result / @Result.Action.Roll.TargetValue
                    </div>

                    <div class="@GetSuccessLevelColorClass() font-medium">
                        @Result.Action.Roll.SuccessLevel.GetDisplayName()
                    </div>

                    @if (Result.Action.Roll.IsCritical)
                    {
                        <div class="text-yellow-600 font-medium mt-2">
                            ‚≠ê –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Å–ø–µ—Ö!
                        </div>
                    }
                    else if (Result.Action.Roll.IsFumble)
                    {
                        <div class="text-red-600 font-medium mt-2">
                            üí• –ü—Ä–æ–≤–∞–ª!
                        </div>
                    }
                </div>
            }

            <!-- Damage Results -->
            @if (Result.Action.Damage != null && Result.DamageDealt > 0)
            {
                <div class="bg-red-50 border border-red-200 rounded-lg p-4 mb-4">
                    <div class="text-sm text-red-700 mb-2">–ù–∞–Ω–µ—Å–µ–Ω–Ω—ã–π —É—Ä–æ–Ω:</div>

                    <div class="text-2xl font-bold text-red-600 mb-2">
                        @Result.DamageDealt
                    </div>

                    @if (Result.Action.Damage.DiceResults.Any())
                    {
                        <div class="text-sm text-red-600">
                            –ë—Ä–æ—Å–∫–∏: [@string.Join(", ", Result.Action.Damage.DiceResults)]
                            @if (Result.Action.Damage.DamageBonus != 0)
                            {
                                <span> + @Result.Action.Damage.DamageBonus –±–æ–Ω—É—Å</span>
                            }
                        </div>
                    }

                    @if (Result.Action.Damage.IsMaxDamage)
                    {
                        <div class="text-red-700 font-medium mt-2">
                            üéØ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–Ω (—ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —É—Å–ø–µ—Ö)!
                        </div>
                    }
                </div>
            }

            <!-- Conditions Inflicted -->
            @if (Result.Action.InflictedConditions.Any())
            {
                <div class="bg-orange-50 border border-orange-200 rounded-lg p-4 mb-4">
                    <div class="text-sm text-orange-700 mb-2">–ù–∞–ª–æ–∂–µ–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã:</div>

                    @foreach (var condition in Result.Action.InflictedConditions)
                    {
                        <div class="@GetConditionBadgeClass(condition.Type) text-sm px-3 py-1 rounded-full mb-2">
                            @condition.Type.GetDisplayName()
                        </div>
                        @if (!string.IsNullOrEmpty(condition.Description))
                        {
                            <div class="text-xs text-orange-600 mb-2">
                                @condition.Description
                            </div>
                        }
                    }
                </div>
            }

            <!-- Special Messages -->
            @if (GetSpecialMessage() != null)
            {
                <div class="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4">
                    <div class="text-sm text-blue-700">
                        @GetSpecialMessage()
                    </div>
                </div>
            }

            <!-- Error Message -->
            @if (!Result.Success && !string.IsNullOrEmpty(Result.ErrorMessage))
            {
                <div class="bg-red-50 border border-red-200 rounded-lg p-4 mb-4">
                    <div class="text-sm text-red-700">
                        ‚ùå @Result.ErrorMessage
                    </div>
                </div>
            }
        </div>

        <!-- Close Button -->
        <div class="text-center mt-6">
            <button @onclick="@(() => OnClose.InvokeAsync())"
                    class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg font-medium">
                –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
            </button>
        </div>
    </div>
</div>

@code {
    [Parameter] public CombatActionResult Result { get; set; } = null!;
    [Parameter] public EventCallback OnClose { get; set; }

    private string GetActionIcon()
    {
        if (!Result.Success)
            return "‚ùå";

        return Result.Action.ActionType switch
        {
            CombatActionType.Attack => Result.Action.Roll?.SuccessLevel.IsSuccess() == true ? "‚öîÔ∏è" : "üí®",
            CombatActionType.FightBack => "üõ°Ô∏è",
            CombatActionType.Dodge => Result.Action.Roll?.SuccessLevel.IsSuccess() == true ? "üèÉ" : "üòµ",
            CombatActionType.CastSpell => Result.Action.Roll?.SuccessLevel.IsSuccess() == true ? "‚ú®" : "üí•",
            CombatActionType.Maneuver => Result.Action.Roll?.SuccessLevel.IsSuccess() == true ? "ü§º" : "üí´",
            CombatActionType.Move => "üö∂",
            CombatActionType.Ready => "‚ö°",
            CombatActionType.Flee => "üèÉ‚Äçüí®",
            CombatActionType.DoNothing => "‚è∏Ô∏è",
            _ => "‚ùì"
        };
    }

    private string GetActionTitle()
    {
        if (!Result.Success)
            return "–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ";

        var isSuccess = Result.Action.Roll?.SuccessLevel.IsSuccess() ?? true;
        var actionName = Result.Action.ActionType.GetDisplayName();

        return Result.Action.ActionType switch
        {
            CombatActionType.Attack => isSuccess ? $"–£—Å–ø–µ—à–Ω–∞—è –∞—Ç–∞–∫–∞!" : "–ü—Ä–æ–º–∞—Ö",
            CombatActionType.FightBack => "–ì–æ—Ç–æ–≤ –∫ –æ—Ç–ø–æ—Ä—É",
            CombatActionType.Dodge => isSuccess ? "–£—Å–ø–µ—à–Ω–æ–µ —É–∫–ª–æ–Ω–µ–Ω–∏–µ!" : "–ù–µ —É–¥–∞–ª–æ—Å—å —É–∫–ª–æ–Ω–∏—Ç—å—Å—è",
            CombatActionType.CastSpell => isSuccess ? "–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–Ω–µ—Å–µ–Ω–æ!" : "–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å",
            CombatActionType.Maneuver => isSuccess ? "–ú–∞–Ω–µ–≤—Ä —É–¥–∞–ª—Å—è!" : "–ú–∞–Ω–µ–≤—Ä –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è",
            CombatActionType.Move => "–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ",
            CombatActionType.Ready => "–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –¥–µ–π—Å—Ç–≤–∏—é",
            CombatActionType.Flee => "–ü–æ–±–µ–≥ –∏–∑ –±–æ—è",
            CombatActionType.DoNothing => "–•–æ–¥ –ø—Ä–æ–ø—É—â–µ–Ω",
            _ => actionName
        };
    }

    private string GetTitleColorClass()
    {
        if (!Result.Success)
            return "text-red-600";

        var isSuccess = Result.Action.Roll?.SuccessLevel.IsSuccess() ?? true;
        return isSuccess ? "text-green-600" : "text-red-600";
    }

    private string GetSuccessLevelColorClass()
    {
        if (Result.Action.Roll == null)
            return "text-gray-600";

        return Result.Action.Roll.SuccessLevel switch
        {
            SuccessLevel.CriticalSuccess => "text-green-700",
            SuccessLevel.ExtremeSuccess => "text-green-600",
            SuccessLevel.HardSuccess => "text-blue-600",
            SuccessLevel.RegularSuccess => "text-blue-500",
            SuccessLevel.Failure => "text-gray-600",
            SuccessLevel.Fumble => "text-red-600",
            _ => "text-gray-500"
        };
    }

    private string GetConditionBadgeClass(CombatConditionType conditionType)
    {
        return conditionType switch
        {
            CombatConditionType.Dead => "bg-black text-white",
            CombatConditionType.Dying => "bg-red-600 text-white",
            CombatConditionType.Unconscious => "bg-red-500 text-white",
            CombatConditionType.MajorWound => "bg-red-400 text-white",
            CombatConditionType.Stunned => "bg-purple-500 text-white",
            CombatConditionType.Prone => "bg-orange-500 text-white",
            CombatConditionType.Grappled => "bg-yellow-600 text-white",
            CombatConditionType.Pinned => "bg-gray-600 text-white",
            CombatConditionType.Bleeding => "bg-red-300 text-gray-800",
            CombatConditionType.TemporaryInsanity => "bg-purple-600 text-white",
            _ => "bg-gray-400 text-gray-800"
        };
    }

    private string? GetSpecialMessage()
    {
        if (Result.Action.Roll == null)
            return null;

        return Result.Action.Roll.SuccessLevel switch
        {
            SuccessLevel.CriticalSuccess => "–ù–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –±–æ–Ω—É—Å—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã.",
            SuccessLevel.ExtremeSuccess when Result.Action.ActionType == CombatActionType.Attack =>
                "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —É—Å–ø–µ—Ö –≤ –∞—Ç–∞–∫–µ –Ω–∞–Ω–æ—Å–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–Ω!",
            SuccessLevel.Fumble => "–ö–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≤–∞–ª! –í–æ–∑–º–æ–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è.",
            _ => null
        };
    }

}