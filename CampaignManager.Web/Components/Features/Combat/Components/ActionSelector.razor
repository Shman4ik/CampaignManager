@using CampaignManager.Web.Components.Features.Combat.Model
@using CampaignManager.Web.Components.Features.Weapons.Model
@using CampaignManager.Web.Components.Features.Spells.Model

<div class="bg-white rounded-lg border p-4">
    <h4 class="text-lg font-semibold mb-4">–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è @Participant.Name</h4>

    <div class="grid grid-cols-2 md:grid-cols-4 gap-3 mb-4">
        <!-- Attack -->
        <button @onclick="() => SelectActionType(CombatActionType.Attack)"
                class="@GetActionButtonClass(CombatActionType.Attack) p-3 rounded-lg text-center transition-colors">
            <div class="text-2xl mb-1">‚öîÔ∏è</div>
            <div class="text-sm font-medium">–ê—Ç–∞–∫–∞</div>
        </button>

        <!-- Fight Back -->
        <button @onclick="() => SelectActionType(CombatActionType.FightBack)"
                class="@GetActionButtonClass(CombatActionType.FightBack) p-3 rounded-lg text-center transition-colors">
            <div class="text-2xl mb-1">üõ°Ô∏è</div>
            <div class="text-sm font-medium">–î–∞—Ç—å –æ—Ç–ø–æ—Ä</div>
        </button>

        <!-- Dodge -->
        <button @onclick="() => SelectActionType(CombatActionType.Dodge)"
                class="@GetActionButtonClass(CombatActionType.Dodge) p-3 rounded-lg text-center transition-colors">
            <div class="text-2xl mb-1">üèÉ</div>
            <div class="text-sm font-medium">–£–∫–ª–æ–Ω–∏—Ç—å—Å—è</div>
        </button>

        <!-- Cast Spell -->
        <button @onclick="() => SelectActionType(CombatActionType.CastSpell)"
                class="@GetActionButtonClass(CombatActionType.CastSpell) p-3 rounded-lg text-center transition-colors">
            <div class="text-2xl mb-1">üîÆ</div>
            <div class="text-sm font-medium">–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ</div>
        </button>

        <!-- Maneuver -->
        <button @onclick="() => SelectActionType(CombatActionType.Maneuver)"
                class="@GetActionButtonClass(CombatActionType.Maneuver) p-3 rounded-lg text-center transition-colors">
            <div class="text-2xl mb-1">ü§º</div>
            <div class="text-sm font-medium">–ú–∞–Ω–µ–≤—Ä</div>
        </button>

        <!-- Move -->
        <button @onclick="() => SelectActionType(CombatActionType.Move)"
                class="@GetActionButtonClass(CombatActionType.Move) p-3 rounded-lg text-center transition-colors">
            <div class="text-2xl mb-1">üö∂</div>
            <div class="text-sm font-medium">–î–≤–∏–∂–µ–Ω–∏–µ</div>
        </button>

        <!-- Ready -->
        <button @onclick="() => SelectActionType(CombatActionType.Ready)"
                class="@GetActionButtonClass(CombatActionType.Ready) p-3 rounded-lg text-center transition-colors">
            <div class="text-2xl mb-1">‚ö°</div>
            <div class="text-sm font-medium">–ü—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è</div>
        </button>

        <!-- Flee -->
        <button @onclick="() => SelectActionType(CombatActionType.Flee)"
                class="@GetActionButtonClass(CombatActionType.Flee) p-3 rounded-lg text-center transition-colors">
            <div class="text-2xl mb-1">üèÉ‚Äçüí®</div>
            <div class="text-sm font-medium">–ë–µ–∂–∞—Ç—å</div>
        </button>
    </div>

    @if (selectedActionType != null)
    {
        <div class="border-t pt-4">
            @if (selectedActionType.Value.RequiresTarget())
            {
                <!-- Target Selection -->
                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700 mb-2">–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å:</label>
                    <select @bind="selectedTargetId" class="w-full border border-gray-300 rounded-md px-3 py-2">
                        <option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å --</option>
                        @foreach (var participant in GetValidTargets())
                        {
                            <option value="@participant.Id">
                                @participant.Name (@participant.Type) -
                                HP: @participant.CurrentHitPoints/@participant.MaxHitPoints
                            </option>
                        }
                    </select>
                </div>
            }

            @if (selectedActionType.Value == CombatActionType.Attack || selectedActionType.Value == CombatActionType.FightBack)
            {
                <!-- Weapon Selection -->
                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700 mb-2">–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä—É–∂–∏–µ:</label>
                    <select @bind="selectedWeaponIndex" class="w-full border border-gray-300 rounded-md px-3 py-2">
                        <option value="-1">–†—É–∫–æ–ø–∞—à–Ω–∞—è (–î—Ä–∞–∫–∞)</option>
                        @if (availableWeapons != null)
                        {
                            @for (int i = 0; i < availableWeapons.Count; i++)
                            {
                                var weapon = availableWeapons[i];
                                <option value="@i">
                                    @weapon.Name - @weapon.Damage —É—Ä–æ–Ω–∞ (@weapon.Skill)
                                </option>
                            }
                        }
                    </select>
                </div>

                <!-- Skill Value Display -->
                <div class="mb-4 p-3 bg-gray-50 rounded-lg">
                    <div class="text-sm text-gray-700">
                        <strong>–ù–∞–≤—ã–∫:</strong> @GetSelectedSkillName()
                    </div>
                    <div class="text-lg font-bold text-blue-600">
                        @GetSelectedSkillValue()%
                    </div>
                    <div class="text-xs text-gray-500 mt-1">
                        –°–ª–æ–∂–Ω—ã–π: @(GetSelectedSkillValue() / 2)% | –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π: @(GetSelectedSkillValue() / 5)%
                    </div>
                </div>
            }

            @if (selectedActionType.Value == CombatActionType.CastSpell)
            {
                <!-- Spell Selection -->
                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700 mb-2">–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ:</label>
                    <select @bind="selectedSpellIndex" class="w-full border border-gray-300 rounded-md px-3 py-2">
                        <option value="-1">-- –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ --</option>
                        @if (availableSpells != null)
                        {
                            @for (int i = 0; i < availableSpells.Count; i++)
                            {
                                var spell = availableSpells[i];
                                <option value="@i">
                                    @spell.Name - @spell.Cost (@spell.CastingTime)
                                </option>
                            }
                        }
                    </select>
                </div>
            }

            @if (selectedActionType.Value == CombatActionType.Maneuver)
            {
                <!-- Maneuver Type Selection -->
                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700 mb-2">–¢–∏–ø –º–∞–Ω–µ–≤—Ä–∞:</label>
                    <select @bind="selectedManeuverType" class="w-full border border-gray-300 rounded-md px-3 py-2">
                        <option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–Ω–µ–≤—Ä --</option>
                        <option value="@ManeuverType.Disarm">–†–∞–∑–æ—Ä—É–∂–∏—Ç—å</option>
                        <option value="@ManeuverType.KnockDown">–°–±–∏—Ç—å —Å –Ω–æ–≥</option>
                        <option value="@ManeuverType.Grapple">–°—Ö–≤–∞—Ç–∏—Ç—å</option>
                        <option value="@ManeuverType.Pin">–ü—Ä–∏–≥–≤–æ–∑–¥–∏—Ç—å</option>
                        <option value="@ManeuverType.Trip">–ü–æ–¥–Ω–æ–∂–∫–∞</option>
                        <option value="@ManeuverType.Shove">–¢–æ–ª–∫–Ω—É—Ç—å</option>
                    </select>
                </div>
            }

            @if (selectedActionType.Value == CombatActionType.Dodge)
            {
                <!-- Dodge Skill Display -->
                <div class="mb-4 p-3 bg-gray-50 rounded-lg">
                    <div class="text-sm text-gray-700">
                        <strong>–ù–∞–≤—ã–∫:</strong> –£–∫–ª–æ–Ω–µ–Ω–∏–µ
                    </div>
                    <div class="text-lg font-bold text-blue-600">
                        @GetDodgeSkillValue()%
                    </div>
                    <div class="text-xs text-gray-500 mt-1">
                        –°–ª–æ–∂–Ω—ã–π: @(GetDodgeSkillValue() / 2)% | –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π: @(GetDodgeSkillValue() / 5)%
                    </div>
                </div>
            }

            <!-- Action Description -->
            @if (!string.IsNullOrEmpty(GetActionDescription()))
            {
                <div class="mb-4 p-3 bg-blue-50 rounded-lg">
                    <div class="text-sm text-blue-800">
                        @GetActionDescription()
                    </div>
                </div>
            }

            <!-- Execute Button -->
            <div class="flex justify-between">
                <button @onclick="CancelAction"
                        class="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-lg">
                    –û—Ç–º–µ–Ω–∞
                </button>

                <button @onclick="ExecuteAction"
                        disabled="@(!CanExecuteAction())"
                        class="@GetExecuteButtonClass() px-6 py-2 rounded-lg font-medium">
                    üé≤ –í—ã–ø–æ–ª–Ω–∏—Ç—å @selectedActionType.Value.GetDisplayName()
                </button>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public CombatParticipant Participant { get; set; } = null!;
    [Parameter] public List<CombatParticipant> AllParticipants { get; set; } = new();
    [Parameter] public EventCallback<CombatAction> OnActionSelected { get; set; }

    private CombatActionType? selectedActionType;
    private Guid? selectedTargetId;
    private int selectedWeaponIndex = -1;
    private int selectedSpellIndex = -1;
    private ManeuverType? selectedManeuverType;

    // These would be loaded from the participant's character data
    private List<Weapon>? availableWeapons;
    private List<Spell>? availableSpells;

    protected override void OnParametersSet()
    {
        // In a real implementation, these would be loaded from the participant's character
        availableWeapons = new List<Weapon>
        {
            new() { Name = "–ù–æ–∂", Damage = "1d4", Skill = "–ë–ª–∏–∂–Ω–∏–π –±–æ–π (–Ω–æ–∂–∏)", Type = WeaponType.Melee },
            new() { Name = "–ü–∏—Å—Ç–æ–ª–µ—Ç", Damage = "1d10", Skill = "–°—Ç—Ä–µ–ª—å–±–∞ (–ø–∏—Å—Ç–æ–ª–µ—Ç)", Type = WeaponType.Pistols },
            new() { Name = "–í–∏–Ω—Ç–æ–≤–∫–∞", Damage = "2d6+4", Skill = "–°—Ç—Ä–µ–ª—å–±–∞ (–≤–∏–Ω—Ç./–¥—Ä–æ–±.)", Type = WeaponType.Rifles }
        };

        availableSpells = new List<Spell>
        {
            new() { Name = "–ü—Ä–∏–∑–≤–∞—Ç—å —Ç—É–º–∞–Ω", Cost = "3 MP", CastingTime = "1 —Ä–∞—É–Ω–¥", SpellType = "–ü—Ä–∏–∑—ã–≤" },
            new() { Name = "–ò—Å—Ü–µ–ª–µ–Ω–∏–µ", Cost = "5 MP", CastingTime = "1 —Ä–∞—É–Ω–¥", SpellType = "–ò—Å—Ü–µ–ª–µ–Ω–∏–µ" },
            new() { Name = "–ú–µ–Ω—Ç–∞–ª—å–Ω—ã–π —â–∏—Ç", Cost = "2 MP", CastingTime = "–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ", SpellType = "–ó–∞—â–∏—Ç–∞" }
        };
    }

    private void SelectActionType(CombatActionType actionType)
    {
        selectedActionType = actionType;
        selectedTargetId = null;
        selectedWeaponIndex = -1;
        selectedSpellIndex = -1;
        selectedManeuverType = null;
    }

    private void CancelAction()
    {
        selectedActionType = null;
        selectedTargetId = null;
        selectedWeaponIndex = -1;
        selectedSpellIndex = -1;
        selectedManeuverType = null;
    }

    private async Task ExecuteAction()
    {
        if (!selectedActionType.HasValue || !CanExecuteAction())
            return;

        var action = new CombatAction
        {
            ActorId = Participant.Id,
            TargetId = selectedTargetId,
            ActionType = selectedActionType.Value,
            SkillName = GetSelectedSkillName(),
            SkillValue = GetSelectedSkillValue()
        };

        // Set weapon if selected
        if (selectedWeaponIndex >= 0 && availableWeapons != null && selectedWeaponIndex < availableWeapons.Count)
        {
            action.Weapon = availableWeapons[selectedWeaponIndex];
        }

        // Set spell if selected
        if (selectedSpellIndex >= 0 && availableSpells != null && selectedSpellIndex < availableSpells.Count)
        {
            action.Spell = availableSpells[selectedSpellIndex];
        }

        // Set maneuver type if applicable
        if (action.ActionType == CombatActionType.Maneuver && selectedManeuverType.HasValue)
        {
            action = new CombatManeuver
            {
                ActorId = action.ActorId,
                TargetId = action.TargetId,
                ActionType = action.ActionType,
                SkillName = action.SkillName,
                SkillValue = action.SkillValue,
                ManeuverType = selectedManeuverType.Value
            };
        }

        action.Description = GenerateActionDescription(action);

        await OnActionSelected.InvokeAsync(action);
        CancelAction();
    }

    private List<CombatParticipant> GetValidTargets()
    {
        return AllParticipants
            .Where(p => p.Id != Participant.Id && !p.HasCondition(CombatConditionType.Dead))
            .ToList();
    }

    private string GetActionButtonClass(CombatActionType actionType)
    {
        var baseClass = "border-2 transition-colors";

        if (selectedActionType == actionType)
            return $"{baseClass} border-blue-500 bg-blue-100 text-blue-700";

        return $"{baseClass} border-gray-300 bg-white text-gray-700 hover:border-gray-400 hover:bg-gray-50";
    }

    private string GetSelectedSkillName()
    {
        if (!selectedActionType.HasValue)
            return "";

        return selectedActionType.Value switch
        {
            CombatActionType.Attack or CombatActionType.FightBack => GetWeaponSkillName(),
            CombatActionType.Dodge => "–£–∫–ª–æ–Ω–µ–Ω–∏–µ",
            CombatActionType.CastSpell => "–ú–∏—Å—Ç–∏—Ü–∏–∑–º", // or specific spell skill
            CombatActionType.Maneuver => "–ë–ª–∏–∂–Ω–∏–π –±–æ–π (–¥—Ä–∞–∫–∞)",
            _ => ""
        };
    }

    private string GetWeaponSkillName()
    {
        if (selectedWeaponIndex >= 0 && availableWeapons != null && selectedWeaponIndex < availableWeapons.Count)
        {
            return availableWeapons[selectedWeaponIndex].Skill;
        }

        return "–ë–ª–∏–∂–Ω–∏–π –±–æ–π (–¥—Ä–∞–∫–∞)";
    }

    private int GetSelectedSkillValue()
    {
        var skillName = GetSelectedSkillName();

        // In a real implementation, this would look up the actual skill value from the character
        // For now, return placeholder values
        return skillName switch
        {
            "–ë–ª–∏–∂–Ω–∏–π –±–æ–π (–¥—Ä–∞–∫–∞)" => 50,
            "–ë–ª–∏–∂–Ω–∏–π –±–æ–π (–Ω–æ–∂–∏)" => 40,
            "–°—Ç—Ä–µ–ª—å–±–∞ (–ø–∏—Å—Ç–æ–ª–µ—Ç)" => 30,
            "–°—Ç—Ä–µ–ª—å–±–∞ (–≤–∏–Ω—Ç./–¥—Ä–æ–±.)" => 25,
            "–£–∫–ª–æ–Ω–µ–Ω–∏–µ" => Participant.CombatStats.Initiative / 2, // DEX/2
            "–ú–∏—Å—Ç–∏—Ü–∏–∑–º" => 20,
            _ => 25
        };
    }

    private int GetDodgeSkillValue()
    {
        // Dodge = DEX/2 in Call of Cthulhu
        return Participant.CombatStats.Initiative / 2;
    }

    private bool CanExecuteAction()
    {
        if (!selectedActionType.HasValue)
            return false;

        return selectedActionType.Value switch
        {
            CombatActionType.Attack or CombatActionType.FightBack => selectedTargetId.HasValue,
            CombatActionType.CastSpell => selectedTargetId.HasValue && selectedSpellIndex >= 0,
            CombatActionType.Maneuver => selectedTargetId.HasValue && selectedManeuverType.HasValue,
            _ => true
        };
    }

    private string GetExecuteButtonClass()
    {
        if (!CanExecuteAction())
            return "bg-gray-400 text-gray-600 cursor-not-allowed";

        return "bg-green-600 hover:bg-green-700 text-white";
    }

    private string GetActionDescription()
    {
        if (!selectedActionType.HasValue)
            return "";

        return selectedActionType.Value switch
        {
            CombatActionType.Attack => "–ê—Ç–∞–∫–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –æ—Ä—É–∂–∏–µ–º. –¢—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–≤—ã–∫–∞ –≤–ª–∞–¥–µ–Ω–∏—è –æ—Ä—É–∂–∏–µ–º.",
            CombatActionType.FightBack => "–ó–∞—â–∏—Ç–∞ —Å –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–æ–π. –ü—Ä–æ—Ç–∏–≤–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –±—Ä–æ—Å–æ–∫ —Å –∞—Ç–∞–∫—É—é—â–∏–º.",
            CombatActionType.Dodge => "–£–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –∞—Ç–∞–∫–∏. –ü—Ä–æ—Ç–∏–≤–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –±—Ä–æ—Å–æ–∫ –Ω–∞–≤—ã–∫–∞ –£–∫–ª–æ–Ω–µ–Ω–∏–µ.",
            CombatActionType.CastSpell => "–ü—Ä–æ–∏–∑–Ω–µ—Å–µ–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è. –¢—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –ú–∏—Å—Ç–∏—Ü–∏–∑–º–∞ –∏ –∑–∞—Ç—Ä–∞—Ç—É MP.",
            CombatActionType.Maneuver => "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –±–æ–µ–≤–æ–π –º–∞–Ω–µ–≤—Ä (—Ä–∞–∑–æ—Ä—É–∂–µ–Ω–∏–µ, –æ–ø—Ä–æ–∫–∏–¥—ã–≤–∞–Ω–∏–µ –∏ —Ç.–¥.).",
            CombatActionType.Move => "–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏—é, —Ä–∞–≤–Ω—É—é –ø–æ–∫–∞–∑–∞—Ç–µ–ª—é –î–≤–∏–∂–µ–Ω–∏—è.",
            CombatActionType.Ready => "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ä—É–∂–∏—è, –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞ –∏–ª–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –¥–µ–π—Å—Ç–≤–∏—é.",
            CombatActionType.Flee => "–ü–æ–±–µ–≥ –∏–∑ –±–æ—è. –ü–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ–∫–∏–¥–∞–µ—Ç —Å—Ä–∞–∂–µ–Ω–∏–µ.",
            CombatActionType.DoNothing => "–ü—Ä–æ–ø—É—Å–∫ —Ö–æ–¥–∞. –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞–µ—Ç.",
            _ => ""
        };
    }

    private string GenerateActionDescription(CombatAction action)
    {
        var target = selectedTargetId.HasValue ? AllParticipants.FirstOrDefault(p => p.Id == selectedTargetId)?.Name ?? "—Ü–µ–ª—å" : "";

        return action.ActionType switch
        {
            CombatActionType.Attack => $"{Participant.Name} –∞—Ç–∞–∫—É–µ—Ç {target} –∏—Å–ø–æ–ª—å–∑—É—è {action.Weapon?.Name ?? "—Ä—É–∫–æ–ø–∞—à–Ω—É—é"}",
            CombatActionType.FightBack => $"{Participant.Name} –≥–æ—Ç–æ–≤–∏—Ç—Å—è –¥–∞—Ç—å –æ—Ç–ø–æ—Ä {target}",
            CombatActionType.Dodge => $"{Participant.Name} –≥–æ—Ç–æ–≤–∏—Ç—Å—è —É–∫–ª–æ–Ω–∏—Ç—å—Å—è",
            CombatActionType.CastSpell => $"{Participant.Name} –ø—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ {action.Spell?.Name}",
            CombatActionType.Maneuver => $"{Participant.Name} –ø—ã—Ç–∞–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –º–∞–Ω–µ–≤—Ä {selectedManeuverType} –ø—Ä–æ—Ç–∏–≤ {target}",
            CombatActionType.Move => $"{Participant.Name} –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è",
            CombatActionType.Ready => $"{Participant.Name} –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ –¥–µ–π—Å—Ç–≤–∏—é",
            CombatActionType.Flee => $"{Participant.Name} –ø—ã—Ç–∞–µ—Ç—Å—è —É–±–µ–∂–∞—Ç—å",
            CombatActionType.DoNothing => $"{Participant.Name} –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç",
            _ => $"{Participant.Name} –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ"
        };
    }

}