@using CampaignManager.Web.Components.Features.Combat.Model
@using CampaignManager.Web.Components.Features.Characters.Model
@using CampaignManager.Web.Components.Features.Bestiary.Model
@using CampaignManager.Web.Components.Features.Characters.Services
@using CampaignManager.Web.Components.Features.Bestiary.Services
@using CampaignManager.Web.Components.Features.Campaigns.Services
@using CampaignManager.Web.Components.Features.Campaigns.Models
@using CampaignManager.Web.Components.Features.Scenarios.Services
@using CampaignManager.Web.Components.Features.Scenarios.Model
@using CampaignManager.Web.Utilities.Services
@using CampaignManager.Web.Model

<div class="space-y-6">
    <!-- Combat Info -->
    <div class="bg-white rounded-lg border p-4">
        <h3 class="text-lg font-semibold mb-4">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ–µ</h3>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">–ö–∞–º–ø–∞–Ω–∏—è</label>
                <select @bind="selectedCampaignId" @bind:after="OnCampaignChangedAsync" 
                        class="w-full border border-gray-300 rounded-md px-3 py-2">
                    <option value="">-- –ë–µ–∑ –∫–∞–º–ø–∞–Ω–∏–∏ --</option>
                    @foreach (var campaign in availableCampaigns)
                    {
                        <option value="@campaign.Id">@campaign.Name</option>
                    }
                </select>
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">–°—Ü–µ–Ω–∞—Ä–∏–π</label>
                <select @bind="selectedScenarioId" @bind:after="OnScenarioChangedAsync"
                        class="w-full border border-gray-300 rounded-md px-3 py-2"
                        disabled="@(!selectedCampaignGuid.HasValue)">
                    <option value="">-- –ë–µ–∑ —Å—Ü–µ–Ω–∞—Ä–∏—è --</option>
                    @foreach (var scenario in availableScenarios)
                    {
                        <option value="@scenario.Id">@scenario.Name</option>
                    }
                </select>
            </div>
        </div>

        @if (selectedCampaignGuid.HasValue)
        {
            <div class="mt-3 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                <p class="text-sm text-blue-700">
                    <strong>–í—ã–±—Ä–∞–Ω–∞ –∫–∞–º–ø–∞–Ω–∏—è:</strong> @availableCampaigns.FirstOrDefault(c => c.Id == selectedCampaignGuid.Value.ToString())?.Name
                </p>
                @if (selectedScenarioGuid.HasValue)
                {
                    <p class="text-sm text-blue-700 mt-1">
                        <strong>–°—Ü–µ–Ω–∞—Ä–∏–π:</strong> @availableScenarios.FirstOrDefault(s => s.Id == selectedScenarioGuid.Value.ToString())?.Name
                    </p>
                }
            </div>
        }
    </div>

    <!-- Current Participants -->
    <div class="bg-white rounded-lg border p-4">
        <div class="flex justify-between items-center mb-4">
            <div class="flex items-center gap-3">
                <h3 class="text-lg font-semibold">–£—á–∞—Å—Ç–Ω–∏–∫–∏ –±–æ—è (@Encounter.Participants.Count)</h3>
                @if (isUserAdminOrKeeper && CampaignId.HasValue)
                {
                    <span class="bg-blue-100 text-blue-800 text-xs font-medium px-2.5 py-0.5 rounded-full">
                        üõ°Ô∏è –ú–∞—Å—Ç–µ—Ä/–ê–¥–º–∏–Ω
                    </span>
                }
            </div>
            <button @onclick="() => showAddParticipantModal = true"
                    class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg font-medium">
                ‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
            </button>
        </div>

        @if (!Encounter.Participants.Any())
        {
            <div class="text-center py-8 text-gray-500">
                <p class="text-lg mb-2">üé≠</p>
                <p>–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</p>
                <p class="text-sm">–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ –ù–ü–° –¥–ª—è –Ω–∞—á–∞–ª–∞ –±–æ—è</p>
            </div>
        }
        else
        {
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                @foreach (var participant in Encounter.Participants)
                {
                    <div class="border rounded-lg p-4 @GetParticipantCardClass(participant)">
                        <div class="flex justify-between items-start mb-2">
                            <div>
                                <h4 class="font-semibold @GetParticipantNameClass(participant)">
                                    @participant.Name
                                </h4>
                                <p class="text-sm text-gray-600">@participant.Type</p>
                            </div>
                            <button @onclick="() => RemoveParticipant(participant.Id)"
                                    class="text-red-500 hover:text-red-700 text-sm">
                                ‚ùå
                            </button>
                        </div>

                        <!-- Stats Preview -->
                        <div class="grid grid-cols-3 gap-2 text-sm">
                            <div class="text-center">
                                <div class="font-medium">HP</div>
                                <div class="text-gray-600">@participant.CurrentHitPoints/@participant.MaxHitPoints</div>
                            </div>
                            <div class="text-center">
                                <div class="font-medium">DEX</div>
                                <div class="text-gray-600">@participant.CombatStats.Initiative</div>
                            </div>
                            <div class="text-center">
                                <div class="font-medium">–£—Ä–æ–Ω</div>
                                <div class="text-gray-600">@GetDamageBonusDisplay(participant)</div>
                            </div>
                        </div>

                        <!-- Edit Button -->
                        <button @onclick="() => EditParticipant(participant)"
                                class="w-full mt-3 bg-blue-100 hover:bg-blue-200 text-blue-700 py-1 rounded text-sm">
                            ‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å
                        </button>
                    </div>
                }
            </div>
        }

        @if (Encounter.Participants.Count >= 2)
        {
            <div class="mt-6 p-4 bg-green-50 rounded-lg border border-green-200">
                <div class="flex items-center justify-between">
                    <div>
                        <h4 class="font-medium text-green-800">–ì–æ—Ç–æ–≤ –∫ –±–æ—é!</h4>
                        <p class="text-sm text-green-700">–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –±–æ—è</p>
                    </div>
                    <div class="text-2xl">‚öîÔ∏è</div>
                </div>
            </div>
        }
        else if (Encounter.Participants.Any())
        {
            <div class="mt-6 p-4 bg-yellow-50 rounded-lg border border-yellow-200">
                <div class="flex items-center justify-between">
                    <div>
                        <h4 class="font-medium text-yellow-800">–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</h4>
                        <p class="text-sm text-yellow-700">–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞</p>
                    </div>
                    <div class="text-2xl">‚ö†Ô∏è</div>
                </div>
            </div>
        }
    </div>

    <!-- Combat Settings -->
    <div class="bg-white rounded-lg border p-4">
        <h3 class="text-lg font-semibold mb-4">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—è</h3>

        <div class="space-y-4">
            <label class="flex items-center">
                <input type="checkbox" @bind="Encounter.AutoRollInitiative" class="mr-2"/>
                <span class="text-sm">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—Ä–æ—Å–∞—Ç—å –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É</span>
            </label>

            <label class="flex items-center">
                <input type="checkbox" @bind="Encounter.UsePositioning" class="mr-2"/>
                <span class="text-sm">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)</span>
            </label>

            <label class="flex items-center">
                <input type="checkbox" @bind="Encounter.AllowDelayedActions" class="mr-2"/>
                <span class="text-sm">–†–∞–∑—Ä–µ—à–∏—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</span>
            </label>
        </div>
    </div>
</div>

<!-- Add Participant Modal -->
@if (showAddParticipantModal)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white rounded-lg p-6 max-w-md w-full mx-4">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-semibold">–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞</h3>
                @if (isUserAdminOrKeeper && CampaignId.HasValue)
                {
                    <span class="bg-green-100 text-green-800 text-xs font-medium px-2.5 py-0.5 rounded-full">
                        üëë –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø
                    </span>
                }
            </div>

            @if (isUserAdminOrKeeper && CampaignId.HasValue)
            {
                <div class="mb-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                    <p class="text-sm text-blue-700">
                        <strong>–ú–∞—Å—Ç–µ—Ä/–ê–¥–º–∏–Ω:</strong> –í—ã –≤–∏–¥–∏—Ç–µ –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∫–∞–º–ø–∞–Ω–∏–∏, –≤–∫–ª—é—á–∞—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥—Ä—É–≥–∏—Ö
                        –∏–≥—Ä–æ–∫–æ–≤.
                    </p>
                </div>
            }

            <div class="space-y-4">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">–¢–∏–ø —É—á–∞—Å—Ç–Ω–∏–∫–∞</label>
                    <select @bind="newParticipantType" class="w-full border border-gray-300 rounded-md px-3 py-2">
                        <option value="Character">–ü–µ—Ä—Å–æ–Ω–∞–∂ –∏–≥—Ä–æ–∫–∞</option>
                        <option value="NPC">–ù–ü–°</option>
                        <option value="Creature">–°—É—â–µ—Å—Ç–≤–æ</option>
                        <option value="Custom">–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π</option>
                    </select>
                </div>

                @if (newParticipantType == "Custom")
                {
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">–ò–º—è</label>
                        <input @bind="customParticipantName"
                               class="w-full border border-gray-300 rounded-md px-3 py-2"
                               placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞"/>
                    </div>

                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">HP</label>
                            <input @bind="customParticipantHP" type="number"
                                   class="w-full border border-gray-300 rounded-md px-3 py-2"/>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">DEX</label>
                            <input @bind="customParticipantDEX" type="number"
                                   class="w-full border border-gray-300 rounded-md px-3 py-2"/>
                        </div>
                    </div>
                }
                else
                {
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞</label>
                        <select @bind="selectedExistingId" class="w-full border border-gray-300 rounded-md px-3 py-2"
                                disabled="@isLoading">
                            <option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ --</option>
                            @foreach (var item in GetAvailableOptions())
                            {
                                <option value="@item.Id">@item.Name</option>
                            }
                        </select>
                        @if (isLoading)
                        {
                            <div class="text-sm text-gray-500 mt-1">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</div>
                        }
                    </div>
                }
            </div>

            <div class="flex justify-end gap-2 mt-6">
                <button @onclick="() => showAddParticipantModal = false"
                        class="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded">
                    –û—Ç–º–µ–Ω–∞
                </button>
                <button @onclick="AddParticipant"
                        disabled="@isLoading"
                        class="bg-green-600 hover:bg-green-700 disabled:bg-gray-400 text-white px-4 py-2 rounded">
                    @if (isLoading)
                    {
                        <span>–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                    }
                    else
                    {
                        <span>–î–æ–±–∞–≤–∏—Ç—å</span>
                    }
                </button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public CombatEncounter Encounter { get; set; } = null!;
    [Parameter] public EventCallback<CombatParticipant> OnParticipantAdded { get; set; }
    [Parameter] public Guid? CampaignId { get; set; }
    [Parameter] public Guid? ScenarioId { get; set; }

    [Inject] private CharacterService CharacterService { get; set; } = null!;
    [Inject] private CreatureService CreatureService { get; set; } = null!;
    [Inject] private CampaignService CampaignService { get; set; } = null!;
    [Inject] private ScenarioService ScenarioService { get; set; } = null!;
    [Inject] private IdentityService IdentityService { get; set; } = null!;
    [Inject] private ILogger<SetupCombatComponent> Logger { get; set; } = null!;

    private bool showAddParticipantModal = false;
    private string newParticipantType = "Character";
    private string selectedExistingId = "";
    private string customParticipantName = "";
    private int customParticipantHP = 10;
    private int customParticipantDEX = 50;
    private bool isLoading = false;

    // Campaign and Scenario selection
    private string selectedCampaignId = "";
    private string selectedScenarioId = "";
    private Guid? selectedCampaignGuid => Guid.TryParse(selectedCampaignId, out var id) ? id : null;
    private Guid? selectedScenarioGuid => Guid.TryParse(selectedScenarioId, out var id) ? id : null;
    private List<SelectOption> availableCampaigns = new();
    private List<SelectOption> availableScenarios = new();

    // Real data loaded from services
    private List<SelectOption> availableCharacters = new();
    private List<SelectOption> availableCreatures = new();
    private List<SelectOption> availableNPCs = new();
    private bool isUserAdminOrKeeper = false;

    protected override async Task OnInitializedAsync()
    {
        // Set initial values from parameters
        selectedCampaignId = CampaignId?.ToString() ?? "";
        selectedScenarioId = ScenarioId?.ToString() ?? "";
        
        await LoadCampaigns();
        if (selectedCampaignGuid.HasValue)
        {
            await LoadScenarios(selectedCampaignGuid.Value);
        }
        await LoadAvailableOptions();
    }

    private async Task LoadAvailableOptions()
    {
        try
        {
            isLoading = true;

            Logger.LogInformation("Loading available options. CampaignId: {CampaignId}, ScenarioId: {ScenarioId}", CampaignId, ScenarioId);

            // Check if user is admin or keeper for this campaign
            if (CampaignId.HasValue)
            {
                isUserAdminOrKeeper = await CampaignService.IsUserAdminOrKeeperAsync(CampaignId.Value);
                Logger.LogInformation("User admin/keeper status for campaign {CampaignId}: {IsAdminOrKeeper}", CampaignId.Value, isUserAdminOrKeeper);
            }
            else
            {
                // For global context, check if user is admin
                var user = await IdentityService.GetUserAsync();
                isUserAdminOrKeeper = user?.Role == PlayerRole.Administrator;
                Logger.LogInformation("User global admin status: {IsAdmin}, User role: {Role}", isUserAdminOrKeeper, user?.Role);
            }

            // Load characters based on user role and context
            if (CampaignId.HasValue && isUserAdminOrKeeper)
            {
                Logger.LogInformation("Loading characters for admin/keeper in campaign {CampaignId}", CampaignId.Value);

                // Admin/Keeper can see all characters in the campaign
                var campaign = await CampaignService.GetCampaignWithCharactersAsync(CampaignId.Value);
                if (campaign != null)
                {
                    Logger.LogInformation("Campaign found. Players count: {PlayersCount}", campaign.Players.Count);

                    var allCharacters = campaign.Players.SelectMany(p => p.Characters).ToList();
                    Logger.LogInformation("Total characters in campaign: {CharactersCount}", allCharacters.Count);

                    var activePlayerCharacters = allCharacters
                        .Where(c => c.Status == CharacterStatus.Active && c.Character.CharacterType == CharacterType.PlayerCharacter)
                        .ToList();
                    Logger.LogInformation("Active player characters: {ActiveCount}", activePlayerCharacters.Count);

                    availableCharacters = activePlayerCharacters
                        .Select(c => new SelectOption
                        {
                            Id = c.Id.ToString(),
                            Name = $"{c.CharacterName} ({GetPlayerName(campaign, c)})"
                        })
                        .ToList();

                    Logger.LogInformation("Available characters loaded: {Count}, Names: {Names}",
                        availableCharacters.Count,
                        string.Join(", ", availableCharacters.Select(c => c.Name)));
                }
                else
                {
                    Logger.LogWarning("Campaign {CampaignId} not found", CampaignId.Value);
                    availableCharacters = new List<SelectOption>();
                }
            }
            else if (CampaignId.HasValue && !isUserAdminOrKeeper)
            {
                Logger.LogInformation("Loading characters for regular user in campaign {CampaignId}", CampaignId.Value);

                // Regular users in campaign context - load their own characters
                var userCampaignPlayer = await CampaignService.GetCampaignPlayerAsync(CampaignId.Value);
                if (userCampaignPlayer != null)
                {
                    Logger.LogInformation("Found campaign player. Characters count: {Count}", userCampaignPlayer.Characters.Count);

                    availableCharacters = userCampaignPlayer.Characters
                        .Where(c => c.Status == CharacterStatus.Active && c.Character.CharacterType == CharacterType.PlayerCharacter)
                        .Select(c => new SelectOption
                        {
                            Id = c.Id.ToString(),
                            Name = c.CharacterName
                        })
                        .ToList();
                }
                else
                {
                    Logger.LogInformation("User not found in campaign {CampaignId}, loading character templates as fallback", CampaignId.Value);

                    // Fallback to templates if user is not in campaign
                    var characters = await CharacterService.GetAllCharacterTemplatesAsync();
                    availableCharacters = characters
                        .Where(c => (c.Status == CharacterStatus.Active || c.Status == CharacterStatus.Template) &&
                                    c.Character.CharacterType == CharacterType.PlayerCharacter)
                        .Select(c => new SelectOption
                        {
                            Id = c.Id.ToString(),
                            Name = $"{c.CharacterName} (–®–∞–±–ª–æ–Ω)"
                        })
                        .ToList();
                }
            }
            else
            {
                Logger.LogInformation("Loading character templates for user (no campaign context or global admin)");

                // Global context or fallback - load templates
                var characters = await CharacterService.GetAllCharacterTemplatesAsync();
                Logger.LogInformation("All character templates loaded: {Count}", characters.Count);

                availableCharacters = characters
                    .Where(c => (c.Status == CharacterStatus.Active || c.Status == CharacterStatus.Template) &&
                                c.Character.CharacterType == CharacterType.PlayerCharacter)
                    .Select(c => new SelectOption
                    {
                        Id = c.Id.ToString(),
                        Name = c.CharacterName
                    })
                    .ToList();

                Logger.LogInformation("Filtered available characters: {Count}", availableCharacters.Count);
            }

            // Load NPCs based on context and permissions
            if (CampaignId.HasValue && isUserAdminOrKeeper)
            {
                // Admin/Keeper can see campaign NPCs + scenario NPCs + templates
                var allNpcs = new List<SelectOption>();

                // Add campaign NPCs
                var campaign = await CampaignService.GetCampaignWithCharactersAsync(CampaignId.Value);
                if (campaign != null)
                {
                    var campaignNpcs = campaign.Players
                        .SelectMany(p => p.Characters)
                        .Where(c => c.Character.CharacterType == CharacterType.NonPlayerCharacter)
                        .Select(c => new SelectOption
                        {
                            Id = c.Id.ToString(),
                            Name = $"{c.CharacterName} (–ö–∞–º–ø–∞–Ω–∏—è)"
                        });
                    allNpcs.AddRange(campaignNpcs);
                }

                // Add scenario NPCs if specified
                if (ScenarioId.HasValue)
                {
                    var scenarioNpcs = await CharacterService.GetCharacterTemplatesByScenarioIdAsync(ScenarioId.Value);
                    var scenarioOptions = scenarioNpcs
                        .Select(c => new SelectOption
                        {
                            Id = c.Id.ToString(),
                            Name = $"{c.CharacterName} (–°—Ü–µ–Ω–∞—Ä–∏–π)"
                        });
                    allNpcs.AddRange(scenarioOptions);
                }

                // Add general NPC templates
                var npcTemplates = await CharacterService.GetAllCharacterTemplatesAsync();
                var templateOptions = npcTemplates
                    .Where(c => c.Status == CharacterStatus.Template && c.Character.CharacterType == CharacterType.NonPlayerCharacter)
                    .Select(c => new SelectOption
                    {
                        Id = c.Id.ToString(),
                        Name = $"{c.CharacterName} (–®–∞–±–ª–æ–Ω)"
                    });
                allNpcs.AddRange(templateOptions);

                availableNPCs = allNpcs.ToList();
            }
            else
            {
                // Regular users see only scenario NPCs and templates
                if (ScenarioId.HasValue)
                {
                    var npcs = await CharacterService.GetCharacterTemplatesByScenarioIdAsync(ScenarioId.Value);
                    availableNPCs = npcs
                        .Select(c => new SelectOption
                        {
                            Id = c.Id.ToString(),
                            Name = c.CharacterName
                        })
                        .ToList();
                }
                else
                {
                    // Load all NPC templates
                    var allCharacters = await CharacterService.GetAllCharacterTemplatesAsync();
                    availableNPCs = allCharacters
                        .Where(c => c.Status == CharacterStatus.Template && c.Character.CharacterType == CharacterType.NonPlayerCharacter)
                        .Select(c => new SelectOption
                        {
                            Id = c.Id.ToString(),
                            Name = c.CharacterName
                        })
                        .ToList();
                }
            }

            // Load creatures
            var creatures = await CreatureService.GetAllCreaturesAsync("", null, 1, 100); // Get first 100 creatures
            availableCreatures = creatures
                .Select(c => new SelectOption
                {
                    Id = c.Id.ToString(),
                    Name = c.Name
                })
                .ToList();

            // Final logging
            Logger.LogInformation("Loading completed. Characters: {CharacterCount}, NPCs: {NpcCount}, Creatures: {CreatureCount}",
                availableCharacters.Count, availableNPCs.Count, availableCreatures.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading available options for combat setup");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void RemoveParticipant(Guid participantId)
    {
        Encounter.RemoveParticipant(participantId);
    }

    private void EditParticipant(CombatParticipant participant)
    {
        // Open edit modal - not implemented yet
    }

    private async Task AddParticipant()
    {
        CombatParticipant? newParticipant = null;

        if (newParticipantType == "Custom")
        {
            if (string.IsNullOrWhiteSpace(customParticipantName))
                return;

            newParticipant = new CombatParticipant
            {
                Name = customParticipantName,
                Type = "Custom",
                CurrentHitPoints = customParticipantHP,
                MaxHitPoints = customParticipantHP,
                CurrentMagicPoints = 0,
                MaxMagicPoints = 0,
                CurrentSanity = 0,
                MaxSanity = 0,
                CombatStats = new CombatStats
                {
                    Initiative = customParticipantDEX,
                    DamageBonus = 0,
                    Build = 2,
                    MovementRate = 8
                }
            };
        }
        else
        {
            if (string.IsNullOrWhiteSpace(selectedExistingId))
                return;

            newParticipant = await CreateParticipantFromExistingData(selectedExistingId, newParticipantType);
            if (newParticipant == null)
                return;
        }

        if (newParticipant != null)
        {
            await OnParticipantAdded.InvokeAsync(newParticipant);

            // Reset form
            showAddParticipantModal = false;
            selectedExistingId = "";
            customParticipantName = "";
            customParticipantHP = 10;
            customParticipantDEX = 50;
        }
    }

    private void OnParticipantTypeChanged(ChangeEventArgs e)
    {
        newParticipantType = e.Value?.ToString() ?? "Character";
        selectedExistingId = ""; // Reset selection when type changes
        StateHasChanged();
    }

    private List<SelectOption> GetAvailableOptions()
    {
        if (isLoading)
            return new List<SelectOption> { new() { Id = "", Name = "–ó–∞–≥—Ä—É–∑–∫–∞..." } };

        return newParticipantType switch
        {
            "Character" => availableCharacters,
            "Creature" => availableCreatures,
            "NPC" => availableNPCs,
            _ => new List<SelectOption>()
        };
    }

    private string GetParticipantCardClass(CombatParticipant participant)
    {
        return participant.Type switch
        {
            "Character" => "border-blue-200 bg-blue-50",
            "Creature" => "border-red-200 bg-red-50",
            "NPC" => "border-yellow-200 bg-yellow-50",
            _ => "border-gray-200 bg-gray-50"
        };
    }

    private string GetParticipantNameClass(CombatParticipant participant)
    {
        return participant.Type switch
        {
            "Character" => "text-blue-700",
            "Creature" => "text-red-700",
            "NPC" => "text-yellow-700",
            _ => "text-gray-700"
        };
    }

    private string GetDamageBonusDisplay(CombatParticipant participant)
    {
        var bonus = participant.CombatStats.DamageBonus;
        if (bonus == 0) return "0";
        return bonus > 0 ? $"+{bonus}" : bonus.ToString();
    }

    private async Task<CombatParticipant?> CreateParticipantFromExistingData(string selectedId, string participantType)
    {
        try
        {
            if (!Guid.TryParse(selectedId, out var id))
                return null;

            return participantType switch
            {
                "Character" or "NPC" => await CreateParticipantFromCharacter(id),
                "Creature" => await CreateParticipantFromCreature(id),
                _ => null
            };
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error creating participant from existing data: {ParticipantType}, {Id}", participantType, selectedId);
            return null;
        }
    }

    private async Task<CombatParticipant?> CreateParticipantFromCharacter(Guid characterId)
    {
        var character = await CharacterService.GetCharacterByIdAsync(characterId);
        if (character?.Character == null)
            return null;

        var charData = character.Character;
        var combatStats = new CombatStats
        {
            Initiative = charData.Characteristics.Dexterity.Regular,
            DamageBonus = CalculateDamageBonus(charData.Characteristics.Strength.Regular, charData.Characteristics.Size.Regular),
            Build = CalculateBuild(charData.Characteristics.Strength.Regular, charData.Characteristics.Size.Regular),
            MovementRate = CalculateMovementRate(charData.Characteristics.Dexterity.Regular, charData.Characteristics.Strength.Regular, charData.Characteristics.Size.Regular)
        };

        return new CombatParticipant
        {
            CharacterId = characterId,
            Name = character.CharacterName,
            Type = charData.CharacterType == CharacterType.PlayerCharacter ? "Character" : "NPC",
            CurrentHitPoints = charData.DerivedAttributes.HitPoints.Value,
            MaxHitPoints = charData.DerivedAttributes.HitPoints.MaxValue,
            CurrentMagicPoints = charData.DerivedAttributes.MagicPoints.Value,
            MaxMagicPoints = charData.DerivedAttributes.MagicPoints.MaxValue,
            CurrentSanity = charData.DerivedAttributes.Sanity.Value,
            MaxSanity = charData.DerivedAttributes.Sanity.MaxValue,
            CombatStats = combatStats
        };
    }

    private async Task<CombatParticipant?> CreateParticipantFromCreature(Guid creatureId)
    {
        var creature = await CreatureService.GetCreatureByIdAsync(creatureId);
        if (creature?.CreatureCharacteristics == null)
            return null;

        var characteristics = creature.CreatureCharacteristics;
        var combatStats = new CombatStats
        {
            Initiative = characteristics.Initiative > 0 ? characteristics.Initiative : characteristics.Dexterity.Value,
            DamageBonus = ParseDamageBonus(characteristics.AverageBonusToHit),
            Build = characteristics.AverageComplexity > 0 ? characteristics.AverageComplexity : characteristics.Constitutions,
            MovementRate = characteristics.Speed
        };

        return new CombatParticipant
        {
            CreatureId = creatureId,
            Name = creature.Name,
            Type = "Creature",
            CurrentHitPoints = characteristics.HealPoint,
            MaxHitPoints = characteristics.HealPoint,
            CurrentMagicPoints = characteristics.ManaPoint,
            MaxMagicPoints = characteristics.ManaPoint,
            CurrentSanity = characteristics.Power.Value, // Using Power as Sanity for creatures
            MaxSanity = characteristics.Power.Value,
            CombatStats = combatStats
        };
    }

    private int CalculateDamageBonus(int strength, int size)
    {
        var total = strength + size;
        return total switch
        {
            <= 64 => -2,
            <= 84 => -1,
            <= 124 => 0,
            <= 164 => 1,
            <= 204 => 2,
            _ => (total - 204) / 80 + 2
        };
    }

    private int CalculateBuild(int strength, int size)
    {
        var total = strength + size;
        return total switch
        {
            <= 64 => -2,
            <= 84 => -1,
            <= 124 => 0,
            <= 164 => 1,
            <= 204 => 2,
            _ => (total - 204) / 80 + 2
        };
    }

    private int CalculateMovementRate(int dexterity, int strength, int size)
    {
        if (dexterity < size && strength < size) return 7;
        if (dexterity > size && strength > size) return 9;
        return 8;
    }

    private int ParseDamageBonus(string bonusText)
    {
        if (string.IsNullOrEmpty(bonusText)) return 0;

        // Try to extract number from text like "+1d4" or "-2"
        var match = System.Text.RegularExpressions.Regex.Match(bonusText, @"([+-]?\d+)");
        if (match.Success && int.TryParse(match.Groups[1].Value, out var bonus))
            return bonus;

        return 0;
    }

    private string GetPlayerName(Campaign campaign, CharacterStorageDto character)
    {
        var player = campaign.Players.FirstOrDefault(p => p.Characters.Contains(character));
        return player?.PlayerName ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–≥—Ä–æ–∫";
    }

    private async Task LoadCampaigns()
    {
        try
        {
            var campaigns = await CampaignService.GetAvailableCompaniesAsync();
            availableCampaigns = campaigns
                .Select(c => new SelectOption
                {
                    Id = c.Id.ToString(),
                    Name = c.Name
                })
                .ToList();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading campaigns");
            availableCampaigns = new List<SelectOption>();
        }
    }

    private async Task LoadScenarios(Guid campaignId)
    {
        try
        {
            var scenarios = await ScenarioService.GetCampaignScenariosAsync(campaignId);
            availableScenarios = scenarios
                .Select(s => new SelectOption
                {
                    Id = s.Id.ToString(),
                    Name = s.Name
                })
                .ToList();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading scenarios for campaign {CampaignId}", campaignId);
            availableScenarios = new List<SelectOption>();
        }
    }

    private async Task OnCampaignChangedAsync()
    {
        selectedScenarioId = ""; // Reset scenario when campaign changes
        availableScenarios.Clear();
        
        if (selectedCampaignGuid.HasValue)
        {
            await LoadScenarios(selectedCampaignGuid.Value);
            await LoadAvailableOptions(); // Reload options for new campaign context
        }
    }

    private async Task OnScenarioChangedAsync()
    {
        await LoadAvailableOptions(); // Reload options for new scenario context
    }

    private class SelectOption
    {
        public string Id { get; set; } = "";
        public string Name { get; set; } = "";
    }

}