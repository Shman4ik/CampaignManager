@page "/combat"
@attribute [Authorize]
@using CampaignManager.Web.Components.Features.Combat.Model
@using CampaignManager.Web.Components.Features.Combat.Services
@using CampaignManager.Web.Components.Features.Combat.Components
@using CampaignManager.Web.Components.Features.Characters.Services
@using CampaignManager.Web.Components.Features.Bestiary.Services
@using CampaignManager.Web.Components.Features.Characters.Model
@using CampaignManager.Web.Components.Features.Bestiary.Model
@inject CombatEngineService CombatEngine
@inject CharacterService CharacterService
@inject CreatureService CreatureService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Быстрый бой</PageTitle>

<div class="container mx-auto p-4">
    <div class="flex justify-between items-center mb-6">
        <h1 class="text-3xl font-bold text-gray-900">Быстрый бой</h1>

        @if (currentEncounter?.State == CombatState.Active)
        {
            <div class="flex gap-2">
                <button @onclick="NextTurn" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium">
                    ⏭️ Следующий ход
                </button>
                <button @onclick="EndCombat" class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg font-medium">
                    ⏹️ Завершить бой
                </button>
            </div>
        }
    </div>

    @if (currentEncounter == null || currentEncounter.State == CombatState.Setup)
    {
        <SetupCombat OnCombatStarted="StartCombat" />
    }
    else if (currentEncounter.State == CombatState.Active)
    {
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <!-- Initiative Tracker -->
            <div class="lg:col-span-1">
                <InitiativeTracker Encounter="currentEncounter" />
            </div>

            <!-- Main Combat Area -->
            <div class="lg:col-span-2 space-y-6">
                @if (currentEncounter.CurrentParticipant != null)
                {
                    <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-4">
                        <h3 class="text-lg font-semibold text-yellow-800 mb-2">
                            Ход: @currentEncounter.CurrentParticipant.Name
                        </h3>
                        <ActionSelector Participant="currentEncounter.CurrentParticipant"
                                        AllParticipants="currentEncounter.Participants"
                                        OnActionSelected="ExecuteAction" />
                    </div>
                }

                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    @foreach (var participant in currentEncounter.Participants.Where(p => !p.HasCondition(CombatConditionType.Dead)))
                    {
                        <CombatParticipantCard Participant="participant"
                                               IsCurrentTurn="currentEncounter.CurrentParticipant?.Id == participant.Id" />
                    }
                </div>

                <CombatLog Encounter="currentEncounter" />
            </div>
        </div>
    }
    else if (currentEncounter.State == CombatState.Finished)
    {
        <div class="text-center py-12">
            <h2 class="text-2xl font-bold text-gray-800 mb-4">Бой завершен!</h2>
            <p class="text-gray-600 mb-6">Вы можете сохранить результаты или начать новый бой.</p>
            <div class="flex justify-center gap-4">
                <button @onclick="SaveChanges" class="bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-lg font-medium">
                    💾 Сохранить результаты
                </button>
                <button @onclick="ResetCombat" class="bg-gray-500 hover:bg-gray-600 text-white px-6 py-3 rounded-lg font-medium">
                    ⚔️ Начать новый бой
                </button>
            </div>
        </div>
    }
</div>

@if (showActionResultModal && lastActionResult != null)
{
    <ActionResultModal Result="lastActionResult" OnClose="() => showActionResultModal = false" />
}

@code {
    private CombatEncounter? currentEncounter;
    private bool showActionResultModal = false;
    private CombatActionResult? lastActionResult;

    private async Task StartCombat(List<CombatParticipant> participants)
    {
        if (participants.Count < 2)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Для начала боя нужно минимум 2 участника.");
            return;
        }

        var encounter = new CombatEncounter();
        foreach (var p in participants)
        {
            encounter.AddParticipant(p);
        }

        currentEncounter = await CombatEngine.StartCombat(encounter);
        StateHasChanged();
    }

    private async Task NextTurn()
    {
        if (currentEncounter?.State != CombatState.Active) return;

        currentEncounter.NextTurn();

        if (currentEncounter.IsCombatOver)
        {
            currentEncounter.EndCombat();
        }
        else if (currentEncounter.CurrentTurnIndex == 0)
        {
            currentEncounter = await CombatEngine.ProcessRoundEnd(currentEncounter);
        }

        StateHasChanged();
    }

    private void EndCombat()
    {
        if (currentEncounter == null) return;
        currentEncounter.EndCombat();
        StateHasChanged();
    }

    private async Task ExecuteAction(CombatAction action)
    {
        if (currentEncounter == null) return;

        try
        {
            lastActionResult = await CombatEngine.ExecuteAction(currentEncounter, action);

            if (lastActionResult.Success)
            {
                showActionResultModal = true;
                StateHasChanged();
                await Task.Delay(1500); // Delay to show result
                await NextTurn();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", lastActionResult.ErrorMessage);
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Ошибка: {ex.Message}");
        }
    }

    private async Task SaveChanges()
    {
        if (currentEncounter == null) return;

        foreach (var participant in currentEncounter.Participants)
        {
            if (participant.CharacterId.HasValue)
            {
                var characterDto = await CharacterService.GetCharacterByIdAsync(participant.CharacterId.Value);
                if (characterDto != null)
                {
                    var character = characterDto.Character;
                    if (character != null)
                    {
                        character.DerivedAttributes.HitPoints.Value = participant.CurrentHitPoints;
                        // TODO: Apply other changes like sanity loss, conditions, etc.
                        await CharacterService.UpdateCharacterAsync(character);
                    }
                }
            }
        }
        await JSRuntime.InvokeVoidAsync("alert", "Результаты боя сохранены!");
        ResetCombat();
    }

    private void ResetCombat()
    {
        currentEncounter = null;
        StateHasChanged();
    }
}