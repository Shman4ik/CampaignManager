@using CampaignManager.Web.Components.Features.Scenarios.Model
@using CampaignManager.Web.Components.Features.Scenarios.Services
@using CampaignManager.Web.Components.Features.Bestiary.Model

<div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 @(_isVisible ? "" : "hidden")">
    <div class="bg-white rounded-lg shadow-lg max-w-lg w-full p-6 max-h-[90vh] overflow-y-auto">
        <div class="flex justify-between items-center mb-4">
            <h2 class="text-xl font-bold">Add Creature to Scenario</h2>
            <button @onclick="Hide" class="text-gray-500 hover:text-gray-700 focus:outline-none">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </div>

        <div class="mb-4">
            <input type="text" 
                   placeholder="Search creatures..." 
                   @bind-value="_searchTerm" 
                   @bind-value:event="oninput"
                   class="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
        </div>

        <div class="grid grid-cols-1 gap-4 max-h-[50vh] overflow-y-auto">
            @if (_availableCreatures == null || !_availableCreatures.Any())
            {
                <div class="text-center p-4 text-gray-500">
                    No creatures available.
                </div>
            }
            else
            {
                @foreach (var creature in FilteredCreatures)
                {
                    <div class="border p-3 rounded-md hover:bg-gray-50 cursor-pointer @(_selectedCreature?.Id == creature.Id ? "border-blue-500 bg-blue-50" : "border-gray-200")"
                         @onclick="() => SelectCreature(creature)">
                        <div class="flex items-center justify-between">
                            <h3 class="font-medium">@creature.Name</h3>
                            <button @onclick="() => SelectCreature(creature)" class="text-blue-500 hover:text-blue-700 text-sm">
                                Select
                            </button>
                        </div>
                        <div class="mt-2 text-sm text-gray-600">
                            @if (!string.IsNullOrEmpty(creature.Description))
                            {
                                <div class="truncate">@creature.Description</div>
                            }
                            <div class="flex gap-2 mt-1">
                                <div>Type: @creature.Type</div>
                                @if (creature.CreatureCharacteristics != null)
                                {
                                    <div>HP: @creature.CreatureCharacteristics.HealPoint</div>
                                }
                            </div>
                        </div>
                    </div>
                }
            }
        </div>

        <div class="mt-4">
            <div class="mb-2">
                <label for="quantity" class="block text-sm font-medium text-gray-700 mb-1">Quantity</label>
                <input type="number" 
                       id="quantity" 
                       @bind="_quantity"
                       min="1"
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
            </div>
            
            <div class="mb-2">
                <label for="location" class="block text-sm font-medium text-gray-700 mb-1">Location (Optional)</label>
                <input type="text" 
                       id="location" 
                       @bind="_location"
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
            </div>
            
            <div>
                <label for="notes" class="block text-sm font-medium text-gray-700 mb-1">Notes (Optional)</label>
                <textarea id="notes" 
                          @bind="_notes"
                          class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 min-h-[80px]"></textarea>
            </div>
        </div>

        <div class="flex justify-end mt-4 space-x-2">
            <button @onclick="Hide" class="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500">
                Cancel
            </button>
            <button @onclick="AddCreatureToScenario" 
                   disabled="@(_selectedCreature == null)"
                   class="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed">
                Add Creature
            </button>
        </div>
    </div>
</div>

@code {
    [Parameter] public Guid ScenarioId { get; set; }
    [Parameter] public EventCallback<ScenarioCreature> OnCreatureAdded { get; set; }
    
    [Inject] private ScenarioService ScenarioService { get; set; } = null!;
    
    private bool _isVisible;
    private string _searchTerm = string.Empty;
    private List<Creature> _availableCreatures = [];
    private Creature? _selectedCreature;
    private int _quantity = 1;
    private string _location = string.Empty;
    private string _notes = string.Empty;
    
    private IEnumerable<Creature> FilteredCreatures => 
        (string.IsNullOrWhiteSpace(_searchTerm) 
            ? _availableCreatures 
            : _availableCreatures.Where(c => c.Name.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase)))
            .Take(5);
    
    public async Task Show()
    {
        _selectedCreature = null;
        _searchTerm = string.Empty;
        _quantity = 1;
        _location = string.Empty;
        _notes = string.Empty;
        
        // Load data before showing the modal
        await LoadAvailableCreatures();
        
        // Now show the modal with data loaded
        _isVisible = true;
    }
    
    public void Hide()
    {
        _isVisible = false;
    }
    
    private void SelectCreature(Creature creature)
    {
        _selectedCreature = creature;
    }
    
    private async Task LoadAvailableCreatures()
    {
        try
        {
            _availableCreatures = await ScenarioService.GetAllCreaturesAsync();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading creatures: {ex.Message}");
            _availableCreatures = [];
        }
    }
    
    private async Task AddCreatureToScenario()
    {
        if (_selectedCreature == null) return;
        
        try
        {
            // Create a new ScenarioCreature inheriting all properties from the selected Creature
            var scenarioCreature = new ScenarioCreature
            {
                // Base Creature properties
                Name = _selectedCreature.Name,
                Type = _selectedCreature.Type,
                Description = _selectedCreature.Description,
                CreatureCharacteristics = _selectedCreature.CreatureCharacteristics,
                CombatDescriptions = _selectedCreature.CombatDescriptions,
                SpecialAbilities = _selectedCreature.SpecialAbilities,
                
                // ScenarioCreature specific properties
                ScenarioId = ScenarioId,
                Location = _location,
                Notes = _notes
            };
            
            await ScenarioService.AddCreatureToScenarioAsync(scenarioCreature);
            await OnCreatureAdded.InvokeAsync(scenarioCreature);
            Hide();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error adding creature to scenario: {ex.Message}");
        }
    }
}
