@page "/scenarios"
@attribute [Authorize]
@inject ScenarioService ScenarioService
@inject NavigationManager NavigationManager
@inject ILogger<ScenariosPage> Logger
@rendermode InteractiveServer
<PageTitle>Шаблоны сценариев</PageTitle>

<div class="container mx-auto px-4 py-8">
    <div class="flex justify-between items-center mb-6">
        <h1 class="text-3xl font-bold">Шаблоны сценариев</h1>
        <button @onclick="@(() => NavigationManager.NavigateTo("/scenarios/new"))"
                class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded inline-flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd"
                      d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z"
                      clip-rule="evenodd"/>
            </svg>
            <span>Новый шаблон</span>
        </button>
    </div>

    @if (_loading)
    {
        <div class="flex justify-center items-center h-64">
            <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
        </div>
    }
    else if (_scenarios.Count == 0)
    {
        <div class="bg-white shadow-md rounded-lg p-6 text-center">
            <p class="text-lg text-gray-600 mb-4">Шаблонов нет.</p>
            <p class="text-gray-500">Создайте новый шаблон.</p>
        </div>
    }
    else
    {
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            @foreach (var scenario in _scenarios)
            {
                <div
                    class="bg-white shadow-md rounded-lg overflow-hidden hover:shadow-lg transition-shadow duration-300">
                    <div class="p-6">
                        <h2 class="text-xl font-semibold mb-2">@scenario.Name</h2>

                        @if (!string.IsNullOrEmpty(scenario.Era))
                        {
                            <div class="text-sm text-gray-500 mb-1">
                                <span class="font-medium">Era:</span> @scenario.Era
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(scenario.Location))
                        {
                            <div class="text-sm text-gray-500 mb-1">
                                <span class="font-medium">Location:</span> @scenario.Location
                            </div>
                        }

                        <p class="text-gray-600 mt-3 line-clamp-3">
                            @(string.IsNullOrEmpty(scenario.Description)
                                ? "No description provided."
                                : scenario.Description)
                        </p>
                    </div>
                    <div class="bg-gray-50 px-6 py-3 flex justify-between">
                        <button @onclick="@(() => NavigationManager.NavigateTo($"/scenarios/{scenario.Id}"))"
                                class="text-gray-700 hover:text-gray-900 hover:bg-gray-100 py-1 px-3 rounded text-sm inline-flex items-center">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" viewBox="0 0 20 20"
                                 fill="currentColor">
                                <path d="M10 12a2 2 0 100-4 2 2 0 000 4z"/>
                                <path fill-rule="evenodd"
                                      d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z"
                                      clip-rule="evenodd"/>
                            </svg>
                            <span class="ml-1">View</span>
                        </button>
                        <div>
                            <button @onclick="@(() => NavigationManager.NavigateTo($"/scenarios/{scenario.Id}/edit"))"
                                    class="text-blue-600 hover:text-blue-800 hover:bg-blue-50 py-1 px-3 rounded text-sm inline-flex items-center mr-2">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" viewBox="0 0 20 20"
                                     fill="currentColor">
                                    <path
                                        d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z"/>
                                </svg>
                                <span class="ml-1">Edit</span>
                            </button>
                            <button @onclick="@(() => ConfirmDelete(scenario))"
                                    class="text-red-600 hover:text-red-800 hover:bg-red-50 py-1 px-3 rounded text-sm inline-flex items-center">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" viewBox="0 0 20 20"
                                     fill="currentColor">
                                    <path fill-rule="evenodd"
                                          d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z"
                                          clip-rule="evenodd"/>
                                </svg>
                                <span class="ml-1">Delete</span>
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<!-- Delete Confirmation Modal -->
@if (_showDeleteModal)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white rounded-lg shadow-lg max-w-md w-full p-6">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-semibold">Подтверждение удаления</h3>
                <button @onclick="() => _showDeleteModal = false" class="text-gray-500 hover:text-gray-700">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24"
                         stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                    </svg>
                </button>
            </div>
            <div class="mb-6">
                <p>Вы уверены что хотите удалить шаблон сценария "<strong>@(_scenarioToDelete?.Name)</strong>"?</p>
                <p class="text-red-600 mt-2">Это действие не возможно отменить.</p>
            </div>
            <div class="flex justify-end space-x-3">
                <button @onclick="() => _showDeleteModal = false"
                        class="bg-gray-200 hover:bg-gray-300 text-gray-800 py-2 px-4 rounded">
                    Отмена
                </button>
                <button @onclick="DeleteScenario"
                        class="bg-red-600 hover:bg-red-700 text-white py-2 px-4 rounded">
                    Удалить
                </button>
            </div>
        </div>
    </div>
}

@code {
    private List<Scenario> _scenarios = [];
    private bool _loading = true;
    private bool _showDeleteModal;
    private Scenario? _scenarioToDelete;

    protected override async Task OnInitializedAsync()
    {
        await LoadScenarios();
    }

    private async Task LoadScenarios()
    {
        try
        {
            _loading = true;
            _scenarios = await ScenarioService.GetAllScenariosAsync(true);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading scenario templates");
        }
        finally
        {
            _loading = false;
        }
    }

    private void ConfirmDelete(Scenario scenario)
    {
        _scenarioToDelete = scenario;
        _showDeleteModal = true;
    }

    private async Task DeleteScenario()
    {
        if (_scenarioToDelete is null)
        {
            return;
        }

        try
        {
            var success = await ScenarioService.DeleteScenarioAsync(_scenarioToDelete.Id);
            if (success)
            {
                await LoadScenarios();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting scenario {ScenarioId}", _scenarioToDelete.Id);
        }
        finally
        {
            _showDeleteModal = false;
            _scenarioToDelete = null;
        }
    }

}
