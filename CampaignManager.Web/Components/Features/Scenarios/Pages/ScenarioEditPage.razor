@page "/scenarios/new"
@page "/scenarios/{Id:guid}/edit"
@using CampaignManager.Web.Components.Features.Scenarios.Model
@using CampaignManager.Web.Components.Features.Scenarios.Services
@using CampaignManager.Web.Utilities.Services
@attribute [Authorize]
@inject ScenarioService ScenarioService
@inject NavigationManager NavigationManager
@inject ILogger<ScenarioEditPage> Logger
@inject MarkdownService MarkdownService 
@rendermode InteractiveServer
<PageTitle>@(_isNew ? "Create Scenario Template" : "Edit Scenario Template")</PageTitle>

<div class="container mx-auto px-4 py-8">
    <div class="flex justify-between items-center mb-6">
        <div>
            <button @onclick="@(() => NavigationManager.NavigateTo(_isNew ? "/scenarios" : $"/scenarios/{Id}"))"
                    class="bg-gray-200 hover:bg-gray-300 text-gray-800 py-2 px-4 rounded inline-flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd"
                          d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z"
                          clip-rule="evenodd"/>
                </svg>
                <span>Back</span>
            </button>
        </div>
        <h1 class="text-3xl font-bold">@(_isNew ? "Create Scenario Template" : "Edit Scenario Template")</h1>
        <div></div> <!-- Empty div for flex spacing -->
    </div>

    @if (_loading)
    {
        <div class="flex justify-center items-center h-64">
            <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
        </div>
    }
    else
    {
        <div class="bg-white shadow-md rounded-lg overflow-hidden">
            <div class="p-6">
                <EditForm Model="@_model" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator/>
                    <ValidationSummary class="text-red-600 mb-4"/>

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                        <div class="mb-4">
                            <label for="name" class="block text-sm font-medium text-gray-700 mb-1">Name</label>
                            <input id="name" @bind="_model.Name"
                                   class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                   placeholder="Enter scenario name"/>
                            <ValidationMessage For="@(() => _model.Name)" class="text-red-600 text-sm mt-1"/>
                        </div>

                        <div class="mb-4">
                            <label for="location" class="block text-sm font-medium text-gray-700 mb-1">Location</label>
                            <input id="location" @bind="_model.Location"
                                   class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                   placeholder="Enter location"/>
                        </div>

                        <div class="mb-4">
                            <label for="era" class="block text-sm font-medium text-gray-700 mb-1">Era</label>
                            <input id="era" @bind="_model.Era"
                                   class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                   placeholder="e.g., 1920s, Modern, etc."/>
                        </div>

                        <div class="mb-4 flex items-center">
                            <label class="inline-flex items-center">
                                <input type="checkbox" @bind="_model.IsTemplate"
                                       class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"/>
                                <span class="ml-2 text-sm text-gray-700">Is this a reusable scenario template?</span>
                            </label>
                        </div>
                    </div>

                    <div class="mb-6">
                        <label for="description"
                               class="block text-sm font-medium text-gray-700 mb-1">Description</label>
                        <textarea id="description" @bind="_model.Description"
                                  class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                  rows="3"
                                  placeholder="Enter a description of this scenario"></textarea>
                    </div>

                    <div class="mb-6">
                        <label for="journal" class="block text-sm font-medium text-gray-700 mb-1">Journal (Markdown)</label>
                        <Markdown Value="@_model.Journal" ValueChanged="@OnMarkdownValueChanged" />
                       
                    </div>

                    <div class="flex justify-end mt-6">
                        <button type="button"
                                @onclick="@(() => NavigationManager.NavigateTo(_isNew ? "/scenarios" : $"/scenarios/{Id}"))"
                                class="bg-gray-200 hover:bg-gray-300 text-gray-800 py-2 px-4 rounded">
                            Cancel
                        </button>
                        <button type="submit"
                                class="bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded ml-2">
                            @(_isNew ? "Create" : "Save")
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public Guid? Id { get; set; }

    private ScenarioEditModel _model = new();

    private bool _isNew => Id is null || Id.Value == Guid.Empty;
    private bool _loading = true;

    private async Task OnMarkdownValueChanged(string value)
    {
        _model.Journal = value;
        markdownHtml = MarkdownService.ConvertToHtml(value ?? string.Empty);
    }

    protected override async Task OnInitializedAsync()
    {
        if (!_isNew)
        {
            await LoadScenario();
        }
        else
        {
            _model = new ScenarioEditModel
            {
                IsTemplate = true // Default to template for new scenarios
            };
            _loading = false;
        }
    }

    private async Task LoadScenario()
    {
        try
        {
            _loading = true;

            if (Id.HasValue)
            {
                var scenario = await ScenarioService.GetScenarioByIdAsync(Id.Value);

                if (scenario is not null)
                {
                    _model = new ScenarioEditModel

                    {
                        Name = scenario.Name,

                        Description = scenario.Description,

                        Location = scenario.Location,

                        Era = scenario.Era,

                        Journal = scenario.Journal ?? "Add story here...",

                        IsTemplate = scenario.IsTemplate
                    };
                }

                else

                {
                    // Scenario not found, redirect to scenarios page

                    NavigationManager.NavigateTo("/scenarios");
                }
            }
        }

        catch (Exception ex)

        {
            Logger.LogError(ex, "Error loading scenario {ScenarioId}", Id);
        }

        finally

        {
            _loading = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            // Get the current user's email (in a real app, this would come from authentication)
            var userEmail = "user@example.com";

            if (_isNew)
            {
                // Create new scenario
                Scenario newScenario = new()
                {
                    Name = _model.Name,
                    Description = _model.Description,
                    Location = _model.Location,
                    Era = _model.Era,
                    Journal = _model.Journal,
                    IsTemplate = _model.IsTemplate,
                    CreatorEmail = userEmail
                };

                var result = await ScenarioService.CreateScenarioAsync(newScenario);

                if (result is not null)
                {
                    NavigationManager.NavigateTo($"/scenarios/{result.Id}");
                }
            }
            else
            {
                // Update existing scenario
                if (Id.HasValue)
                {
                    var existingScenario = await ScenarioService.GetScenarioByIdAsync(Id.Value);

                    if (existingScenario is not null)
                    {
                        existingScenario.Name = _model.Name;
                        existingScenario.Description = _model.Description;
                        existingScenario.Location = _model.Location;
                        existingScenario.Era = _model.Era;
                        existingScenario.Journal = _model.Journal;
                        existingScenario.IsTemplate = _model.IsTemplate;

                        var success = await ScenarioService.UpdateScenarioAsync(existingScenario);

                        if (success)
                        {
                            NavigationManager.NavigateTo($"/scenarios/{Id}");
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving scenario");
        }
    }

    private string markdownHtml;
    
    // Model for the edit form
    private class ScenarioEditModel
    {
        [Required(ErrorMessage = "Name is required")]
        [StringLength(100, ErrorMessage = "Name cannot be longer than 100 characters")]
        public string Name { get; set; } = string.Empty;

        public string? Description { get; set; }

        public string? Location { get; set; }

        public string? Era { get; set; }

        public string? Journal { get; set; }

        public bool IsTemplate { get; set; }
    }

}
