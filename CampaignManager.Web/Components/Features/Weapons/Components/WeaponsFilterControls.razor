@using CampaignManager.Web.Components.Features.Weapons.Model
@using CampaignManager.Web.Extensions
@namespace CampaignManager.Web.Components.Features.Weapons.Components

<div class="flex flex-col lg:flex-row gap-3">
    <input type="text"
           value="@SearchQuery"
           @oninput="HandleSearchInput"
           placeholder="Поиск оружия..."
           class="flex-1 min-h-[44px] px-4 py-3 border-2 border-gray-300 rounded-lg text-base focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-all" />

    <select @onchange="HandleWeaponTypeChanged"
            class="lg:w-64 min-h-[44px] px-4 py-3 border-2 border-gray-300 rounded-lg text-base focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-all bg-white">
        <option value="">Все типы</option>
        @foreach (var typeValue in EnumExtensions.GetWeaponTypes())
        {
            <option value="@typeValue" selected="@(SelectedTypeFilter == typeValue)">@typeValue.ToRussianString()</option>
        }
    </select>
</div>

<!-- Era Filters - Touch Optimized -->
<div class="flex flex-wrap items-center gap-4 sm:gap-6 p-3 bg-gray-50 rounded-lg mt-3">
    <span class="text-sm font-semibold text-gray-700">Эпоха:</span>
    <label class="flex items-center gap-3 cursor-pointer group min-h-[44px]">
        <input type="checkbox"
               checked="@Is1920Filter"
               @onchange="async e => await UpdateBoolAsync(Is1920FilterChanged, e)"
               class="w-5 h-5 text-primary-600 focus:ring-2 focus:ring-primary-500 border-gray-300 rounded cursor-pointer" />
        <span class="text-base font-medium text-gray-700 group-hover:text-primary-600 transition-colors">1920s</span>
    </label>
    <label class="flex items-center gap-3 cursor-pointer group min-h-[44px]">
        <input type="checkbox"
               checked="@IsModernFilter"
               @onchange="async e => await UpdateBoolAsync(IsModernFilterChanged, e)"
               class="w-5 h-5 text-primary-600 focus:ring-2 focus:ring-primary-500 border-gray-300 rounded cursor-pointer" />
        <span class="text-base font-medium text-gray-700 group-hover:text-primary-600 transition-colors">Modern</span>
    </label>
</div>

@code {
    [Parameter] public string SearchQuery { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> SearchQueryChanged { get; set; }

    [Parameter] public WeaponType? SelectedTypeFilter { get; set; }
    [Parameter] public EventCallback<WeaponType?> SelectedTypeFilterChanged { get; set; }

    [Parameter] public bool Is1920Filter { get; set; }
    [Parameter] public EventCallback<bool> Is1920FilterChanged { get; set; }

    [Parameter] public bool IsModernFilter { get; set; }
    [Parameter] public EventCallback<bool> IsModernFilterChanged { get; set; }

    [Parameter] public EventCallback OnFiltersChanged { get; set; }

    private async Task HandleSearchInput(ChangeEventArgs e)
    {
        var text = e.Value?.ToString() ?? string.Empty;
        await SearchQueryChanged.InvokeAsync(text);
        await OnFiltersChanged.InvokeAsync();
    }

    private async Task HandleWeaponTypeChanged(ChangeEventArgs e)
    {
        var value = e.Value?.ToString();
        WeaponType? parsed = null;
        if (!string.IsNullOrEmpty(value) && Enum.TryParse<WeaponType>(value, out var typeValue))
        {
            parsed = typeValue;
        }
        await SelectedTypeFilterChanged.InvokeAsync(parsed);
        await OnFiltersChanged.InvokeAsync();
    }

    private async Task UpdateBoolAsync(EventCallback<bool> callback, ChangeEventArgs e)
    {
        var str = e.Value?.ToString();
        var val = string.Equals(str, "true", StringComparison.OrdinalIgnoreCase) || string.Equals(str, "on", StringComparison.OrdinalIgnoreCase);
        await callback.InvokeAsync(val);
        await OnFiltersChanged.InvokeAsync();
    }
}
