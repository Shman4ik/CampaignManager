@page "/weapons"
@using CampaignManager.Web.Components.Features.Weapons.Model
@using CampaignManager.Web.Components.Features.Weapons.Services
@using CampaignManager.Web.Extensions
@using Microsoft.AspNetCore.Components.QuickGrid
@attribute [Authorize]

@inject WeaponService WeaponService
@rendermode InteractiveServer

<PageTitle>Oружие - Campaign Manager</PageTitle>

<div class="max-w-7xl mx-auto px-2 py-4 font-sans">
    <!-- Улучшенная панель фильтров - более компактная -->
    <div class="sticky top-0 z-10 bg-white rounded-lg shadow-md p-3 mb-4 border border-gray-200">
        <div class="flex justify-between items-center mb-2">
            <div class="flex items-center">
                <h2 class="text-base font-semibold text-gray-700 mr-2">Фильтры</h2>
                <button @onclick="ToggleSearchPanel" class="text-gray-500 hover:text-gray-700 transition-colors">
                    <i class="fas @(isSearchPanelVisible ? "fa-chevron-up" : "fa-chevron-down")"></i>
                </button>
            </div>
            <div class="flex space-x-2">
                @if (isSearchPanelVisible)
                {
                    <button @onclick="ResetFilters"
                            class="text-blue-600 hover:text-blue-800 py-1 px-2 rounded-md border border-blue-300 hover:border-blue-500 text-xs flex items-center">
                        <i class="fas fa-undo-alt mr-1"></i>
                        <span>Сбросить</span>
                    </button>
                }
                <!-- Кнопка добавления оружия (компактнее) -->
                <button @onclick="ShowAddModal"
                        class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-1 px-3 rounded text-sm flex items-center">
                    <i class="fas fa-plus mr-1"></i>
                    <span>Добавить</span>
                </button>
            </div>
        </div>

        @if (isSearchPanelVisible)
        {
            <!-- Содержимое панели поиска -->
            <div class="mb-3">
                <!-- Более компактный макет фильтров -->
                <div class="flex flex-col sm:flex-row gap-2">
                    <div class="flex-grow">
                        <label for="searchQuery" class="block text-xs font-medium text-gray-700 mb-1">Поиск</label>
                        <div class="relative">
                            <input type="text" id="searchQuery"
                                   class="w-full border rounded-lg pl-8 pr-3 py-1 text-sm text-gray-700 focus:outline-none focus:ring-1 focus:ring-blue-500 shadow-sm"
                                   placeholder="Поиск по названию, навыку..."
                                   @bind="searchQuery"
                                   @bind:event="oninput"/>
                            <div class="absolute inset-y-0 left-0 pl-2 flex items-center pointer-events-none">
                                <i class="fas fa-search text-gray-400 text-xs"></i>
                            </div>
                        </div>
                    </div>

                    <div class="w-full sm:w-48">
                        <label for="typeFilter" class="block text-xs font-medium text-gray-700 mb-1">Тип оружия</label>
                        <select id="typeFilter"
                                class="w-full border rounded-lg px-2 py-1 text-sm text-gray-700 focus:outline-none focus:ring-1 focus:ring-blue-500 shadow-sm"
                                @onchange="OnWeaponTypeFilterChanged">
                            <option value="">Все типы</option>
                            @foreach (var typeValue in EnumExtensions.GetWeaponTypes())
                            {
                                <option value="@typeValue">@typeValue.ToRussianString()</option>
                            }
                        </select>
                    </div>
                </div>
            </div>

            <div class="flex flex-wrap justify-between items-center gap-2 mb-1">
                <!-- Компактные эпоха фильтры -->
                <div class="flex flex-wrap items-center gap-3 sm:gap-4">
                    <div class="flex items-center">
                        <input type="checkbox" id="is1920Filter"
                               checked="@is1920Filter"
                               @onchange="@(e =>
                                          {
                                              is1920Filter = (bool)e.Value;
                                              ApplyFilters();
                                          })"
                               class="h-3 w-3 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"/>
                        <label for="is1920Filter" class="ml-1 text-xs text-gray-700">1920-е</label>
                    </div>
                    <div class="flex items-center">
                        <input type="checkbox" id="isModernFilter"
                               checked="@isModernFilter"
                               @onchange="@(e =>
                                          {
                                              isModernFilter = (bool)e.Value;
                                              ApplyFilters();
                                          })"
                               class="h-3 w-3 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"/>
                        <label for="isModernFilter" class="ml-1 text-xs text-gray-700">Современное</label>
                    </div>
                </div>
            </div>
        }

    </div>

    @if (filteredWeapons.Count() == 0)
    {
        <div class="bg-white rounded-lg shadow-md p-4 text-center border border-gray-200">
            <div class="flex flex-col items-center justify-center py-6">
                <i class="fas fa-search text-gray-400 text-3xl mb-2"></i>
                <h3 class="text-lg font-medium text-gray-700 mb-1">Ничего не найдено</h3>
                <p class="text-gray-500 text-sm max-w-md mx-auto">
                    По вашему запросу не найдено ни одного оружия. Попробуйте изменить параметры поиска.
                </p>
            </div>
        </div>
    }
    else
    {
        <div class="bg-white rounded-lg shadow-md overflow-hidden border border-gray-200">
            <!-- Таблица для средних и больших экранов с компактными ячейками -->
            <div class="hidden md:block overflow-x-auto">
                <QuickGrid Items="filteredWeapons" TItem="Weapon" Class="w-full text-sm">
                    <PropertyColumn Property="@(w => w.Name)" Title="Название" Sortable="true"
                                    Class="px-2 py-2 border-b border-gray-200 ">
                    </PropertyColumn>
                    <TemplateColumn Title="Тип" SortBy="GridSort<Weapon>.ByAscending(w => w.Type)"
                                    Class="px-2 py-2 border-b border-gray-200 ">
                        <ChildContent>
                            <div class="flex items-center">
                                <span>@context.Type.ToRussianString()</span>
                            </div>
                        </ChildContent>
                        <ColumnOptions>
                            <div class="p-2">
                                <select @onchange='e => OnColumnHeaderFilterChanged(e, "Type")'
                                        class="w-full border rounded px-2 py-1 text-xs">
                                    <option value="">Все типы</option>
                                    @foreach (var typeValue in EnumExtensions.GetWeaponTypes())
                                    {
                                        <option value="@typeValue">@typeValue.ToRussianString()</option>
                                    }
                                </select>
                            </div>
                        </ColumnOptions>
                    </TemplateColumn>
                    <PropertyColumn Property="@(w => w.Skill)" Title="Навык" Sortable="true"
                                    Class="px-2 py-2 border-b border-gray-200 "/>
                    <PropertyColumn Property="@(w => w.Damage)" Title="Урон"
                                    Class="px-2 py-2 border-b border-gray-200 "/>
                    <TemplateColumn Title="Эпоха" SortBy="GridSort<Weapon>.ByAscending(w => w.Is1920)"
                                    Class="px-2 py-2 border-b border-gray-200 ">
                        <ChildContent>
                            <div class="flex flex-wrap gap-1">
                                @if (context.Is1920)
                                {
                                    <span
                                        class="inline-block px-1 py-0.5 bg-amber-100 text-amber-800 text-xs rounded-full">1920</span>
                                }
                                @if (context.IsModern)
                                {
                                    <span
                                        class="inline-block px-1 py-0.5 bg-slate-100 text-slate-800 text-xs rounded-full">Совр</span>
                                }
                            </div>
                        </ChildContent>
                    </TemplateColumn>
                    <PropertyColumn Property="@(w => w.Range)" Title="Дист."
                                    Class="px-2 py-2 border-b border-gray-200 "/>
                    <PropertyColumn Property="@(w => w.Attacks)" Title="Атаки"
                                    Class="px-2 py-2 border-b border-gray-200 "/>
                    <PropertyColumn Property="@(w => w.Cost)" Title="Цена" Class="px-2 py-2 border-b border-gray-200 "/>
                    <TemplateColumn Title="" Class="px-2 py-2 border-b border-gray-200 text-center ">
                        <ChildContent Context="weapon">
                            <div class="flex justify-center space-x-1">
                                <button
                                    class="p-1 text-blue-600 hover:text-blue-800 hover:bg-blue-50 rounded-full transition duration-150 ease-in-out"
                                    @onclick="() => ShowEditModal(weapon)"
                                    title="Редактировать">
                                    <i class="fas fa-edit text-xs"></i>
                                </button>
                                <button
                                    class="p-1 text-red-600 hover:text-red-800 hover:bg-red-50 rounded-full transition duration-150 ease-in-out"
                                    @onclick="() => ShowDeleteModal(weapon)"
                                    title="Удалить">
                                    <i class="fas fa-trash text-xs"></i>
                                </button>
                            </div>
                        </ChildContent>
                    </TemplateColumn>
                    <Paginator State="@pagination"/>
                </QuickGrid>
            </div>

            <!-- Таблица для маленьких экранов (промежуточная версия между десктопом и мобильными карточками) -->
            <div class="hidden sm:block md:hidden overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200 text-xs">
                    <thead class="bg-gray-50">
                    <tr>
                        <th class="px-2 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Название
                        </th>
                        <th class="px-2 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Тип
                        </th>
                        <th class="px-2 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Урон
                        </th>
                        <th class="px-2 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Действия
                        </th>
                    </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                    @foreach (var weapon in filteredWeapons)
                    {
                        <tr class="hover:bg-gray-50">
                            <td class="px-2 py-2 ">
                                <div class="font-medium text-gray-800">@weapon.Name</div>
                                <div class="text-gray-500">@weapon.Skill</div>
                            </td>
                            <td class="px-2 py-2 ">
                                <div>@weapon.Type.ToRussianString()</div>
                                <div class="flex gap-1 mt-1">
                                    @if (weapon.Is1920)
                                    {
                                        <span
                                            class="inline-block px-1 py-0.5 bg-amber-100 text-amber-800 text-xs rounded-full">1920</span>
                                    }
                                    @if (weapon.IsModern)
                                    {
                                        <span
                                            class="inline-block px-1 py-0.5 bg-slate-100 text-slate-800 text-xs rounded-full">Совр</span>
                                    }
                                </div>
                            </td>
                            <td class="px-2 py-2 ">
                                <div>@weapon.Damage</div>
                                <div class="text-gray-500">
                                    <span title="Дистанция">@weapon.Range</span> •
                                    <span title="Атаки">@weapon.Attacks</span>
                                </div>
                            </td>
                            <td class="px-2 py-2 ">
                                <div class="flex space-x-1">
                                    <button
                                        class="p-1 text-blue-600 hover:text-blue-800 hover:bg-blue-50 rounded-full transition"
                                        @onclick="() => ShowEditModal(weapon)"
                                        title="Редактировать">
                                        <i class="fas fa-edit text-xs"></i>
                                    </button>
                                    <button
                                        class="p-1 text-red-600 hover:text-red-800 hover:bg-red-50 rounded-full transition"
                                        @onclick="() => ShowDeleteModal(weapon)"
                                        title="Удалить">
                                        <i class="fas fa-trash text-xs"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>

                <!-- Пагинация для промежуточной версии -->
                <div class="p-2 border-t border-gray-200">
                    <Paginator State="@pagination"/>
                </div>
            </div>

            <!-- Ультра-компактные карточки для мобильной версии -->
            <div class="sm:hidden">
                @foreach (var weapon in filteredWeapons)
                {
                    <div class="border-b border-gray-200 p-2">
                        <div class="flex justify-between items-start">
                            <div>
                                <h3 class="font-semibold text-sm text-gray-800">@weapon.Name</h3>
                                <div class="flex items-center text-xs text-gray-500 mt-0.5">
                                    <span>@weapon.Type.ToRussianString()</span>
                                    <span class="mx-1">•</span>
                                    <span>@weapon.Skill</span>
                                </div>
                            </div>
                            <div class="flex space-x-1">
                                <button
                                    class="p-1 text-blue-600 hover:text-blue-800 hover:bg-blue-50 rounded-full transition"
                                    @onclick="() => ShowEditModal(weapon)"
                                    title="Редактировать">
                                    <i class="fas fa-edit text-xs"></i>
                                </button>
                                <button
                                    class="p-1 text-red-600 hover:text-red-800 hover:bg-red-50 rounded-full transition"
                                    @onclick="() => ShowDeleteModal(weapon)"
                                    title="Удалить">
                                    <i class="fas fa-trash text-xs"></i>
                                </button>
                            </div>
                        </div>

                        <div class="grid grid-cols-3 gap-1 mt-1 text-xs">
                            <div>
                                <span class="text-gray-500">Урон:</span>
                                <span class="ml-0.5">@weapon.Damage</span>
                            </div>
                            <div>
                                <span class="text-gray-500">Дист:</span>
                                <span class="ml-0.5">@weapon.Range</span>
                            </div>
                            <div>
                                <span class="text-gray-500">Цена:</span>
                                <span class="ml-0.5">@weapon.Cost</span>
                            </div>
                        </div>

                        <div class="mt-1 flex flex-wrap gap-1">
                            @if (weapon.Is1920)
                            {
                                <span class="inline-block px-1 py-0.5 bg-amber-100 text-amber-800 text-xs rounded-full">1920</span>
                            }
                            @if (weapon.IsModern)
                            {
                                <span class="inline-block px-1 py-0.5 bg-slate-100 text-slate-800 text-xs rounded-full">Совр</span>
                            }
                        </div>
                    </div>
                }

                <!-- Пагинация для мобильной версии -->
                <div class="p-2 border-t border-gray-200">
                    <Paginator State="@pagination"/>
                </div>
            </div>
        </div>
    }
</div>

<!-- Tailwind Modal for adding/editing weapons -->
<div class="@(showModal ? "fixed inset-0 z-50 overflow-auto bg-black bg-opacity-50 flex justify-center items-start pt-20" : "hidden")">
    <div class="bg-white rounded-lg shadow-xl overflow-hidden w-full max-w-4xl">
        <div class="p-5 border-b border-gray-200 bg-gradient-to-r from-blue-500 to-blue-600 text-white flex justify-between items-center">
            <h3 class="font-bold text-xl">@(isEditMode ? "Редактировать оружие" : "Добавить оружие")</h3>
            <button @onclick="HideModal" class="text-white hover:bg-blue-700 rounded-full p-1">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="p-6 bg-white max-h-[70vh] overflow-y-auto">
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="mb-4 p-3 bg-red-100 text-red-700 rounded-lg border border-red-300 flex items-start">
                    <i class="fas fa-exclamation-circle text-red-500 mr-2 mt-0.5"></i>
                    <span>@errorMessage</span>
                </div>
            }
            <EditForm Model="editWeapon" OnValidSubmit="HandleValidSubmit" Id="weapon-edit-form">
                <DataAnnotationsValidator/>
                <Microsoft.AspNetCore.Components.Forms.ValidationSummary
                    class="mb-4 p-3 bg-red-100 text-red-700 rounded-lg border border-red-300"/>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-5">
                    <div class="space-y-1">
                        <label for="weaponName" class="block text-sm font-medium text-gray-700">Название</label>
                        <InputText id="weaponName" @bind-Value="editWeapon.Name"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 shadow-sm"/>
                        <ValidationMessage For="@(() => editWeapon.Name)" class="text-red-600 text-sm"/>
                    </div>

                    <div class="space-y-1">
                        <label for="weaponType" class="block text-sm font-medium text-gray-700">Тип</label>
                        <InputSelect id="weaponType" @bind-Value="editWeapon.Type"
                                     class="w-full px-3 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 shadow-sm">
                            @foreach (var typeValue in EnumExtensions.GetWeaponTypes())
                            {
                                <option value="@typeValue">@typeValue.ToRussianString()</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => editWeapon.Type)" class="text-red-600 text-sm"/>
                    </div>

                    <div class="space-y-1">
                        <label for="weaponSkill" class="block text-sm font-medium text-gray-700">Навык</label>
                        <InputText id="weaponSkill" @bind-Value="editWeapon.Skill"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 shadow-sm"/>
                        <ValidationMessage For="@(() => editWeapon.Skill)" class="text-red-600 text-sm"/>
                    </div>

                    <div class="space-y-1">
                        <label for="weaponDamage" class="block text-sm font-medium text-gray-700">Урон</label>
                        <InputText id="weaponDamage" @bind-Value="editWeapon.Damage"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 shadow-sm"/>
                        <ValidationMessage For="@(() => editWeapon.Damage)" class="text-red-600 text-sm"/>
                    </div>

                    <div class="space-y-1">
                        <label for="weaponRange" class="block text-sm font-medium text-gray-700">Дистанция</label>
                        <InputText id="weaponRange" @bind-Value="editWeapon.Range"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 shadow-sm"/>
                        <ValidationMessage For="@(() => editWeapon.Range)" class="text-red-600 text-sm"/>
                    </div>

                    <div class="space-y-1">
                        <label for="weaponAttacks" class="block text-sm font-medium text-gray-700">Атаки</label>
                        <InputText id="weaponAttacks" @bind-Value="editWeapon.Attacks"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 shadow-sm"/>
                        <ValidationMessage For="@(() => editWeapon.Attacks)" class="text-red-600 text-sm"/>
                    </div>

                    <div class="space-y-1">
                        <label for="weaponCost" class="block text-sm font-medium text-gray-700">Стоимость</label>
                        <InputText id="weaponCost" @bind-Value="editWeapon.Cost"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 shadow-sm"/>
                        <ValidationMessage For="@(() => editWeapon.Cost)" class="text-red-600 text-sm"/>
                    </div>

                    <div class="space-y-1">
                        <label for="weaponAmmo" class="block text-sm font-medium text-gray-700">Боеприпасы</label>
                        <InputText id="weaponAmmo" @bind-Value="editWeapon.Ammo"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 shadow-sm"/>
                        <ValidationMessage For="@(() => editWeapon.Ammo)" class="text-red-600 text-sm"/>
                    </div>

                    <div class="space-y-1">
                        <label for="weaponMalfunction" class="block text-sm font-medium text-gray-700">Осечка</label>
                        <InputText id="weaponMalfunction" @bind-Value="editWeapon.Malfunction"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 shadow-sm"/>
                        <ValidationMessage For="@(() => editWeapon.Malfunction)" class="text-red-600 text-sm"/>
                    </div>

                    <div class="flex items-center space-x-6 mt-2">
                        <div class="flex items-center">
                            <InputCheckbox id="weaponIs1920" @bind-Value="editWeapon.Is1920"
                                           class="h-5 w-5 text-blue-600 focus:ring-blue-500 border-gray-300 rounded mr-2"/>
                            <label for="weaponIs1920" class="text-sm font-medium text-gray-700">Эпоха 1920-х</label>
                        </div>
                        <div class="flex items-center">
                            <InputCheckbox id="weaponIsModern" @bind-Value="editWeapon.IsModern"
                                           class="h-5 w-5 text-blue-600 focus:ring-blue-500 border-gray-300 rounded mr-2"/>
                            <label for="weaponIsModern" class="text-sm font-medium text-gray-700">Современное</label>
                        </div>
                    </div>

                    <div class="md:col-span-2 space-y-1 mt-2">
                        <label for="weaponNotes" class="block text-sm font-medium text-gray-700">Примечания</label>
                        <InputTextArea id="weaponNotes" @bind-Value="editWeapon.Notes" rows="4"
                                      class="w-full px-3 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 shadow-sm"/>
                        <ValidationMessage For="@(() => editWeapon.Notes)" class="text-red-600 text-sm"/>
                    </div>
                </div>
            </EditForm>
        </div>
        <div class="p-5 border-t border-gray-200 flex justify-end space-x-3 bg-gray-50">
            <button type="button"
                    class="px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition duration-150 ease-in-out shadow-sm"
                    @onclick="HideModal">
                Отмена
            </button>
            <button type="submit" form="weapon-edit-form"
                    class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition duration-150 ease-in-out shadow-sm">
                Сохранить
            </button>
        </div>
    </div>
</div>

<!-- Tailwind Modal for delete confirmation -->
<div class="@(showDeleteModal ? "fixed inset-0 z-50 overflow-auto bg-black bg-opacity-50 flex justify-center items-start pt-20" : "hidden")">
    <div class="bg-white rounded-lg shadow-xl overflow-hidden w-full max-w-md">
        <div class="p-5 border-b border-gray-200 bg-gradient-to-r from-red-500 to-red-600 text-white flex justify-between items-center">
            <h3 class="font-bold text-xl">Подтверждение удаления</h3>
            <button @onclick="HideDeleteModal" class="text-white hover:bg-red-700 rounded-full p-1">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="p-6 bg-white max-h-[70vh] overflow-y-auto">
            <div class="flex items-start">
                <div class="mr-3 text-red-500">
                    <i class="fas fa-exclamation-triangle text-2xl"></i>
                </div>
                <div>
                    <p class="text-gray-700 font-medium mb-2">Вы уверены, что хотите удалить это оружие?</p>
                    <p class="text-gray-600 text-sm mb-1"><span class="font-medium">Название:</span> @(deleteWeapon?.Name)</p>
                    <p class="text-gray-600 text-sm mb-1"><span class="font-medium">Тип:</span> @(deleteWeapon?.Type.ToRussianString())</p>
                    <p class="text-gray-500 text-xs mt-2">Это действие нельзя отменить.</p>
                </div>
            </div>
        </div>
        <div class="p-5 border-t border-gray-200 flex justify-end space-x-3 bg-gray-50">
            <button type="button"
                    class="px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition duration-150 ease-in-out shadow-sm"
                    @onclick="HideDeleteModal">
                Отмена
            </button>
            <button type="button"
                    class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition duration-150 ease-in-out shadow-sm"
                    @onclick="ConfirmDelete">
                Удалить
            </button>
        </div>
    </div>
</div>

@code {

    private bool isSearchPanelVisible = true;

    // List to hold all weapons fetched from the service
    private List<Weapon>? weapons; // Nullable to indicate loading state

    // Filtered list based on search query and other filters
    private IQueryable<Weapon> filteredWeapons => FilterWeapons();

    // Search query bound to the input field
    private string searchQuery = string.Empty;

    // Advanced filtering variables
    private WeaponType? selectedTypeFilter;
    private bool is1920Filter = true;
    private bool isModernFilter;
    private readonly Dictionary<string, string> columnFilters = new();

    // Modal visibility flags
    private bool showModal;
    private bool showDeleteModal;

    // State for Add/Edit modal
    private bool isEditMode;
    private Weapon editWeapon = new(); // Model for the edit form

    // Weapon object targeted for deletion
    private Weapon? deleteWeapon;

    // Pagination state for QuickGrid
    private readonly PaginationState pagination = new() { ItemsPerPage = 10 };

    // Error message state
    private string? errorMessage;

    // Lifecycle method: Load data when the component is initialized
    protected override async Task OnInitializedAsync()
    {
        await LoadWeaponsAsync();
    }

    // Method to load weapons data from the service
    private async Task LoadWeaponsAsync()
    {
        errorMessage = null; // Clear previous errors
        try
        {
            weapons = await WeaponService.GetAllWeaponsAsync();
        }
        catch (Exception ex)
        {
            // Log the error (e.g., to console or a logging service)
            Console.WriteLine($"Error loading weapons: {ex.Message}");
            errorMessage = "Не удалось загрузить список оружия. Пожалуйста, попробуйте позже.";
            weapons = new List<Weapon>(); // Ensure weapons is not null
        }
    }

    // Reset all filters to their default state
    private void ResetFilters()
    {
        searchQuery = string.Empty;
        selectedTypeFilter = null;
        is1920Filter = true;
        isModernFilter = false;
        columnFilters.Clear();

        // Apply filters to update the UI
        ApplyFilters();
    }

    // Handle weapon type filter change
    private void OnWeaponTypeFilterChanged(ChangeEventArgs e)
    {
        var value = e.Value?.ToString();
        if (string.IsNullOrEmpty(value))
        {
            selectedTypeFilter = null;
        }
        else if (Enum.TryParse<WeaponType>(value, out var typeValue))
        {
            selectedTypeFilter = typeValue;
        }

        ApplyFilters();
    }

    // Handle column header filter change
    private void OnColumnHeaderFilterChanged(ChangeEventArgs e, string columnName)
    {
        var value = e.Value?.ToString() ?? "";

        if (string.IsNullOrWhiteSpace(value))
        {
            if (columnFilters.ContainsKey(columnName))
            {
                columnFilters.Remove(columnName);
            }
        }
        else
        {
            columnFilters[columnName] = value;
        }

        ApplyFilters();
    }

    // Apply all filters (this just calls StateHasChanged since the filteredWeapons property is computed)
    private void ApplyFilters()
    {
        // This will trigger a re-render which will use our updated filter values
        StateHasChanged();
    }

    // Show the modal for adding a new weapon
    private void ShowAddModal()
    {
        isEditMode = false;
        editWeapon = new Weapon(); // Reset the edit model
        errorMessage = null; // Clear errors
        showModal = true;
    }

    // Show the modal for editing an existing weapon
    private void ShowEditModal(Weapon weapon)
    {
        isEditMode = true;
        // Clone the weapon object to avoid modifying the original list item directly
        editWeapon = new Weapon
        {
            Id = weapon.Id,
            Name = weapon.Name,
            Type = weapon.Type,
            Skill = weapon.Skill,
            Is1920 = weapon.Is1920,
            IsModern = weapon.IsModern,
            Damage = weapon.Damage,
            Range = weapon.Range,
            Attacks = weapon.Attacks,
            Cost = weapon.Cost,
            Notes = weapon.Notes,
            Ammo = weapon.Ammo,
            Malfunction = weapon.Malfunction
        };
        errorMessage = null; // Clear errors
        showModal = true;
    }

    // Hide the Add/Edit modal
    private void HideModal()
    {
        showModal = false;
    }

    // Handle the valid submission of the Add/Edit form
    private async Task HandleValidSubmit()
    {
        errorMessage = null; // Clear previous errors
        try
        {
            if (isEditMode)
            {
                await WeaponService.UpdateWeaponAsync(editWeapon);
            }
            else
            {
                await WeaponService.AddWeaponAsync(editWeapon);
            }

            showModal = false; // Close modal on success
            await LoadWeaponsAsync(); // Refresh the list
            ApplyFilters(); // Reapply filters
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving weapon: {ex.Message}");
            errorMessage = $"Не удалось сохранить оружие: {ex.Message}";
            // Keep the modal open to show the error
        }
    }

    // Show the delete confirmation modal
    private void ShowDeleteModal(Weapon weapon)
    {
        deleteWeapon = weapon;
        errorMessage = null; // Clear errors
        showDeleteModal = true;
    }

    // Hide the delete confirmation modal
    private void HideDeleteModal()
    {
        showDeleteModal = false;
        deleteWeapon = null;
    }

    // Confirm and execute the weapon deletion
    private async Task ConfirmDelete()
    {
        if (deleteWeapon == null) return; // Should not happen, but good practice

        errorMessage = null; // Clear previous errors
        try
        {
            await WeaponService.DeleteWeaponAsync(deleteWeapon.Id); // Use Guid Id
            showDeleteModal = false;
            await LoadWeaponsAsync(); // Refresh the list
            deleteWeapon = null; // Clear the selected weapon
            ApplyFilters(); // Reapply filters
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting weapon: {ex.Message}");
            errorMessage = $"Не удалось удалить оружие: {ex.Message}";
            // Keep the modal open to show the error
        }
    }

    // Filter weapons based on all active filters
    private IQueryable<Weapon> FilterWeapons()
    {
        if (weapons == null)
        {
            return Enumerable.Empty<Weapon>().AsQueryable(); // Return empty IQueryable if source is null
        }

        var query = weapons.AsQueryable(); // Use AsQueryable for QuickGrid

        // Apply search filter
        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            query = query.Where(w =>
                (w.Name != null && w.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)) ||
                (w.Skill != null && w.Skill.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)) ||
                w.Type.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                (w.Damage != null && w.Damage.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)) ||
                (w.Notes != null && w.Notes.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
            );
        }

        // Apply weapon type filter
        if (selectedTypeFilter.HasValue)
        {
            query = query.Where(w => w.Type == selectedTypeFilter.Value);
        }

        // Apply era filters
        if (is1920Filter && !isModernFilter)
        {
            query = query.Where(w => w.Is1920);
        }
        else if (!is1920Filter && isModernFilter)
        {
            query = query.Where(w => w.IsModern);
        }
        else if (is1920Filter && isModernFilter)
        {
            query = query.Where(w => w.Is1920 || w.IsModern);
        }

        // Apply column header filters
        foreach (var filter in columnFilters)
        {
            if (filter.Key == "Name" && !string.IsNullOrWhiteSpace(filter.Value))
            {
                query = query.Where(w => w.Name != null && w.Name.Contains(filter.Value, StringComparison.OrdinalIgnoreCase));
            }
            else if (filter.Key == "Type" && !string.IsNullOrWhiteSpace(filter.Value))
            {
                if (Enum.TryParse<WeaponType>(filter.Value, out var typeValue))
                {
                    query = query.Where(w => w.Type == typeValue);
                }
            }
        }

        return query;
    }

    // Helper methods to determine price range
    private bool IsPriceLow(string? price)
    {
        if (string.IsNullOrWhiteSpace(price)) return false;

        // Extract numeric parts from the price string
        var numericPart = new string(price.Where(c => char.IsDigit(c) || c == '.').ToArray());
        if (string.IsNullOrWhiteSpace(numericPart)) return false;

        if (decimal.TryParse(numericPart, out var value))
        {
            return value < 20;
        }

        return false;
    }

    private bool IsPriceMedium(string? price)
    {
        if (string.IsNullOrWhiteSpace(price)) return false;

        // Extract numeric parts from the price string
        var numericPart = new string(price.Where(c => char.IsDigit(c) || c == '.').ToArray());
        if (string.IsNullOrWhiteSpace(numericPart)) return false;

        if (decimal.TryParse(numericPart, out var value))
        {
            return value >= 20 && value <= 100;
        }

        return false;
    }

    private bool IsPriceHigh(string? price)
    {
        if (string.IsNullOrWhiteSpace(price)) return false;

        // Extract numeric parts from the price string
        var numericPart = new string(price.Where(c => char.IsDigit(c) || c == '.').ToArray());
        if (string.IsNullOrWhiteSpace(numericPart)) return false;

        if (decimal.TryParse(numericPart, out var value))
        {
            return value > 100;
        }

        return false;
    }

    private void ToggleSearchPanel()
    {
        isSearchPanelVisible = !isSearchPanelVisible;
    }

}
