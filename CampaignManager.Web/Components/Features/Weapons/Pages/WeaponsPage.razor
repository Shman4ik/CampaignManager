@page "/weapons"
@using CampaignManager.Web.Components.Features.Weapons.Model
@using CampaignManager.Web.Components.Features.Weapons.Services
@using CampaignManager.Web.Extensions
@attribute [Authorize]

@inject WeaponService WeaponService
@inject NavigationManager NavigationManager
@inject ILogger<WeaponsPage> Logger
@rendermode InteractiveServer

<PageTitle>Oружие - Campaign Manager</PageTitle>

<div class="max-w-7xl mx-auto px-2 py-4 font-sans">
    <!-- Улучшенная панель фильтров - более компактная -->
    <div class="sticky top-0 z-10 bg-white rounded-lg shadow-md p-3 mb-4 border border-gray-200">
        <div class="flex justify-between items-center mb-2">
            <div class="flex items-center">
                <h2 class="text-base font-semibold text-gray-700 mr-2">Фильтры</h2>
                <button @onclick="ToggleSearchPanel" class="text-gray-500 hover:text-gray-700 transition-colors">
                    <i class="fas @(isSearchPanelVisible ? "fa-chevron-up" : "fa-chevron-down")"></i>
                </button>
            </div>
            <div class="flex space-x-2">
                @if (isSearchPanelVisible)
                {
                    <button @onclick="ResetFilters"
                            class="text-primary-600 hover:text-primary-800 py-1 px-2 rounded-md border border-primary-300 hover:border-primary-500 text-xs flex items-center">
                        <i class="fas fa-undo-alt mr-1"></i>
                        <span>Сбросить</span>
                    </button>
                }
                <!-- Кнопка добавления оружия (компактнее) -->
                <button @onclick="ShowAddModal"
                        class="bg-primary-600 hover:bg-primary-700 text-white font-medium py-1 px-3 rounded text-sm flex items-center">
                    <i class="fas fa-plus mr-1"></i>
                    <span>Добавить</span>
                </button>
            </div>
        </div>

        @if (isSearchPanelVisible)
        {
            <!-- Содержимое панели поиска -->
            <div class="mb-3">
                <!-- Более компактный макет фильтров -->
                <div class="flex flex-col sm:flex-row gap-2">
                    <input type="text" @bind="searchQuery" @bind:event="oninput" @onkeyup="@(async () => ApplyFilters())"
                           placeholder="Поиск оружия..."
                           class="flex-1 px-3 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-1 focus:ring-primary-500"/>

                    <select @onchange="OnWeaponTypeFilterChanged"
                            class="px-3 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-1 focus:ring-primary-500">
                        <option value="">Все типы</option>
                        @foreach (var typeValue in EnumExtensions.GetWeaponTypes())
                        {
                            <option value="@typeValue">@typeValue.ToRussianString()</option>
                        }
                    </select>
                </div>
            </div>

            <div class="flex flex-wrap justify-between items-center gap-2 mb-1">
                <!-- Компактные эпоха фильтры -->
                <div class="flex flex-wrap items-center gap-3 sm:gap-4">
                    <div class="flex items-center">
                        <input type="checkbox" id="era1920s" @bind="is1920Filter" @bind:event="onchange"
                               class="mr-1 h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"/>
                        <label for="era1920s" class="text-sm text-gray-700">1920s</label>
                    </div>
                    <div class="flex items-center">
                        <input type="checkbox" id="eraModern" @bind="isModernFilter" @bind:event="onchange"
                               class="mr-1 h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"/>
                        <label for="eraModern" class="text-sm text-gray-700">Modern</label>
                    </div>
                </div>
            </div>
        }

    </div>

    @if (paginatedWeapons.Count() == 0)
    {
        <div class="bg-white rounded-lg shadow-md p-4 text-center border border-gray-200">
            <div class="flex flex-col items-center justify-center py-6">
                <div class="rounded-full bg-gray-100 p-3 mb-4">
                    <i class="fas fa-search text-gray-400 text-2xl"></i>
                </div>
                <p class="text-gray-600 text-base">
                    Оружие не найдено. Попробуйте изменить параметры фильтра.
                </p>
            </div>
        </div>
    }
    else
    {
        <div class="bg-white rounded-lg shadow-md overflow-hidden border border-gray-200">
            <!-- Таблица для средних и больших экранов с компактными ячейками -->
            <div class="block overflow-x-auto">
                <table class="w-full text-sm">
                    <thead class="bg-gray-50 border-b border-gray-200">
                        <tr>
                            <th class="px-4 py-3 text-left font-medium text-gray-700 cursor-pointer hover:bg-gray-100 transition-colors"
                                @onclick="() => ToggleSort(nameof(Weapon.Name))">
                                <div class="flex items-center justify-between">
                                    <span>Название</span>
                                    <i class="fas @GetSortIcon(nameof(Weapon.Name)) text-gray-400 ml-2"></i>
                                </div>
                            </th>
                            <th class="px-4 py-3 text-left font-medium text-gray-700 cursor-pointer hover:bg-gray-100 transition-colors"
                                @onclick="() => ToggleSort(nameof(Weapon.Type))">
                                <div class="flex items-center justify-between">
                                    <span>Тип</span>
                                    <i class="fas @GetSortIcon(nameof(Weapon.Type)) text-gray-400 ml-2"></i>
                                </div>
                            </th>
                            <th class="px-4 py-3 text-left font-medium text-gray-700 cursor-pointer hover:bg-gray-100 transition-colors"
                                @onclick="() => ToggleSort(nameof(Weapon.Skill))">
                                <div class="flex items-center justify-between">
                                    <span>Навык</span>
                                    <i class="fas @GetSortIcon(nameof(Weapon.Skill)) text-gray-400 ml-2"></i>
                                </div>
                            </th>
                            <th class="px-4 py-3 text-left font-medium text-gray-700 cursor-pointer hover:bg-gray-100 transition-colors"
                                @onclick="() => ToggleSort(nameof(Weapon.Damage))">
                                <div class="flex items-center justify-between">
                                    <span>Урон</span>
                                    <i class="fas @GetSortIcon(nameof(Weapon.Damage)) text-gray-400 ml-2"></i>
                                </div>
                            </th>
                            <th class="px-4 py-3 text-left font-medium text-gray-700 cursor-pointer hover:bg-gray-100 transition-colors"
                                @onclick="() => ToggleSort(nameof(Weapon.Is1920))">
                                <div class="flex items-center justify-between">
                                    <span>Эпоха</span>
                                    <i class="fas @GetSortIcon(nameof(Weapon.Is1920)) text-gray-400 ml-2"></i>
                                </div>
                            </th>
                            <th class="px-4 py-3 text-left font-medium text-gray-700">Характеристики</th>
                            <th class="px-4 py-3 text-center font-medium text-gray-700">Действия</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                        @foreach (var weapon in paginatedWeapons)
                        {
                            <tr class="hover:bg-gray-50 transition-colors cursor-pointer" @onclick="() => ToggleWeaponDetails(weapon)">
                                <td class="px-4 py-3 font-medium text-gray-900">@weapon.Name</td>
                                <td class="px-4 py-3 text-gray-700">
                                    <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-primary-100 text-primary-800">
                                        @weapon.Type.ToRussianString()
                                    </span>
                                </td>
                                <td class="px-4 py-3 text-gray-700">@weapon.Skill</td>
                                <td class="px-4 py-3 text-gray-700">@weapon.Damage</td>
                                <td class="px-4 py-3 text-gray-700">
                                    <div class="flex flex-wrap gap-1">
                                        @if (weapon.Is1920)
                                        {
                                            <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-secondary-100 text-secondary-800">1920s</span>
                                        }
                                        @if (weapon.IsModern)
                                        {
                                            <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-secondary-100 text-secondary-800">Modern</span>
                                        }
                                    </div>
                                </td>
                                <td class="px-4 py-3 text-gray-600">
                                    <div class="text-xs space-y-1">
                                        <div><span class="font-medium">Дист:</span> @weapon.Range</div>
                                        <div><span class="font-medium">Атаки:</span> @weapon.Attacks</div>
                                        @if (!string.IsNullOrEmpty(weapon.Cost))
                                        {
                                            <div><span class="font-medium">Цена:</span> @weapon.Cost</div>
                                        }
                                    </div>
                                </td>
                                <td class="px-4 py-3 text-center">
                                    <div class="flex gap-1 justify-center">
                                        <button @onclick="() => ShowEditModal(weapon)"
                                                @onclick:stopPropagation="true"
                                                class="text-primary-600 hover:text-primary-800 px-2 py-1 rounded text-xs transition-colors">
                                            <i class="fas fa-edit mr-1"></i>Изменить
                                        </button>
                                        <button @onclick="() => ShowDeleteModal(weapon)"
                                                @onclick:stopPropagation="true"
                                                class="text-error-600 hover:text-error-800 px-2 py-1 rounded text-xs transition-colors">
                                            <i class="fas fa-trash-alt mr-1"></i>Удалить
                                        </button>
                                    </div>
                                </td>
                            </tr>
                            @if (expandedWeaponId == weapon.Id)
                            {
                                <tr class="bg-gray-50">
                                    <td colspan="7" class="px-4 py-4">
                                        <div class="bg-white rounded-lg p-4 border border-gray-200">
                                            <h4 class="font-semibold text-gray-900 mb-2">Подробная информация</h4>
                                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                                <div>
                                                    <h5 class="font-medium text-gray-700 mb-1">Название:</h5>
                                                    <p class="text-gray-600">@weapon.Name</p>
                                                </div>
                                                <div>
                                                    <h5 class="font-medium text-gray-700 mb-1">Тип:</h5>
                                                    <p class="text-gray-600">@weapon.Type.ToRussianString()</p>
                                                </div>
                                                <div>
                                                    <h5 class="font-medium text-gray-700 mb-1">Навык:</h5>
                                                    <p class="text-gray-600">@weapon.Skill</p>
                                                </div>
                                                <div>
                                                    <h5 class="font-medium text-gray-700 mb-1">Урон:</h5>
                                                    <p class="text-gray-600">@weapon.Damage</p>
                                                </div>
                                                <div>
                                                    <h5 class="font-medium text-gray-700 mb-1">Дальность:</h5>
                                                    <p class="text-gray-600">@weapon.Range</p>
                                                </div>
                                                <div>
                                                    <h5 class="font-medium text-gray-700 mb-1">Атаки:</h5>
                                                    <p class="text-gray-600">@weapon.Attacks</p>
                                                </div>
                                                @if (!string.IsNullOrEmpty(weapon.Cost))
                                                {
                                                    <div>
                                                        <h5 class="font-medium text-gray-700 mb-1">Стоимость:</h5>
                                                        <p class="text-gray-600">@weapon.Cost</p>
                                                    </div>
                                                }
                                                @if (!string.IsNullOrEmpty(weapon.Ammo))
                                                {
                                                    <div>
                                                        <h5 class="font-medium text-gray-700 mb-1">Боеприпасы:</h5>
                                                        <p class="text-gray-600">@weapon.Ammo</p>
                                                    </div>
                                                }
                                                @if (!string.IsNullOrEmpty(weapon.Malfunction))
                                                {
                                                    <div>
                                                        <h5 class="font-medium text-gray-700 mb-1">Осечка:</h5>
                                                        <p class="text-gray-600">@weapon.Malfunction</p>
                                                    </div>
                                                }
                                                <div>
                                                    <h5 class="font-medium text-gray-700 mb-1">Эпоха:</h5>
                                                    <div class="flex gap-2">
                                                        @if (weapon.Is1920)
                                                        {
                                                            <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-secondary-100 text-secondary-800">1920s</span>
                                                        }
                                                        @if (weapon.IsModern)
                                                        {
                                                            <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-secondary-100 text-secondary-800">Modern</span>
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                            @if (!string.IsNullOrEmpty(weapon.Notes))
                                            {
                                                <div class="mt-4">
                                                    <h5 class="font-medium text-gray-700 mb-1">Примечания:</h5>
                                                    <p class="text-gray-600 whitespace-pre-wrap">@weapon.Notes</p>
                                                </div>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            @if (totalPages > 1)
            {
                <div class="bg-gray-50 px-4 py-3 flex items-center justify-between border-t border-gray-200">
                    <div class="flex items-center text-sm text-gray-700">
                        <span>Показано @Math.Min((currentPage - 1) * weaponsPerPage + 1, filteredWeapons.Count()) - @Math.Min(currentPage * weaponsPerPage, filteredWeapons.Count()) из @filteredWeapons.Count() оружий</span>
                    </div>
                    <div class="flex items-center space-x-2">
                        <button @onclick="() => GoToPage(1)" 
                                disabled="@(currentPage == 1)"
                                class="px-3 py-1 text-sm rounded border @(currentPage == 1 ? "bg-gray-100 text-gray-400 cursor-not-allowed" : "bg-white text-gray-700 hover:bg-gray-50")">
                            <i class="fas fa-angle-double-left"></i>
                        </button>
                        <button @onclick="() => GoToPage(currentPage - 1)" 
                                disabled="@(currentPage == 1)"
                                class="px-3 py-1 text-sm rounded border @(currentPage == 1 ? "bg-gray-100 text-gray-400 cursor-not-allowed" : "bg-white text-gray-700 hover:bg-gray-50")">
                            <i class="fas fa-angle-left"></i>
                        </button>
                        @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                        {
                            var pageNumber = i;
                            <button @onclick="() => GoToPage(pageNumber)"
                                    class="px-3 py-1 text-sm rounded border @(currentPage == pageNumber ? "bg-primary-600 text-white border-primary-600" : "bg-white text-gray-700 hover:bg-gray-50 border-gray-300")">
                                @pageNumber
                            </button>
                        }
                        
                        <button @onclick="() => GoToPage(currentPage + 1)" 
                                disabled="@(currentPage == totalPages)"
                                class="px-3 py-1 text-sm rounded border @(currentPage == totalPages ? "bg-gray-100 text-gray-400 cursor-not-allowed" : "bg-white text-gray-700 hover:bg-gray-50")">
                            <i class="fas fa-angle-right"></i>
                        </button>
                        <button @onclick="() => GoToPage(totalPages)" 
                                disabled="@(currentPage == totalPages)"
                                class="px-3 py-1 text-sm rounded border @(currentPage == totalPages ? "bg-gray-100 text-gray-400 cursor-not-allowed" : "bg-white text-gray-700 hover:bg-gray-50")">
                            <i class="fas fa-angle-double-right"></i>
                        </button>
                    </div>
                </div>            }
        </div>
    }

<!-- Tailwind Modal for adding/editing weapons -->
<div class="@(showModal ? "fixed inset-0 z-50 overflow-auto bg-black bg-opacity-50 flex justify-center items-start pt-20" : "hidden")">
    <div class="bg-white rounded-lg shadow-xl overflow-hidden w-full max-w-4xl">
        <div class="p-5 border-b border-gray-200 bg-gradient-to-r from-primary-500 to-primary-600 text-white flex justify-between items-center">
            <h3 class="font-bold text-xl">@(isEditMode ? "Редактировать оружие" : "Добавить оружие")</h3>
            <button @onclick="HideModal" class="text-white hover:bg-primary-700 rounded-full p-1">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="p-6 bg-white max-h-[70vh] overflow-y-auto">
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="mb-4 p-3 bg-red-100 text-red-700 rounded-lg border border-red-300 flex items-start">
                    <i class="fas fa-exclamation-circle text-red-500 mr-2 mt-0.5"></i>
                    <span>@errorMessage</span>
                </div>
            }
            <EditForm Model="editWeapon" OnValidSubmit="HandleValidSubmit" Id="weapon-edit-form">
                <DataAnnotationsValidator/>
                <Microsoft.AspNetCore.Components.Forms.ValidationSummary
                    class="mb-4 p-3 bg-red-100 text-red-700 rounded-lg border border-red-300"/>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-5">
                    <div class="space-y-1">
                        <label for="weaponName" class="block text-sm font-medium text-gray-700">Название</label>
                        <InputText id="weaponName" @bind-Value="editWeapon.Name"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-primary-500 shadow-sm"/>
                        <ValidationMessage For="@(() => editWeapon.Name)" class="text-red-600 text-sm"/>
                    </div>

                    <div class="space-y-1">
                        <label for="weaponType" class="block text-sm font-medium text-gray-700">Тип</label>
                        <InputSelect id="weaponType" @bind-Value="editWeapon.Type"
                                     class="w-full px-3 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-primary-500 shadow-sm">
                            @foreach (var typeValue in EnumExtensions.GetWeaponTypes())
                            {
                                <option value="@typeValue">@typeValue.ToRussianString()</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => editWeapon.Type)" class="text-red-600 text-sm"/>
                    </div>

                    <div class="space-y-1">
                        <label for="weaponSkill" class="block text-sm font-medium text-gray-700">Навык</label>
                        <InputText id="weaponSkill" @bind-Value="editWeapon.Skill"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-primary-500 shadow-sm"/>
                        <ValidationMessage For="@(() => editWeapon.Skill)" class="text-red-600 text-sm"/>
                    </div>

                    <div class="space-y-1">
                        <label for="weaponDamage" class="block text-sm font-medium text-gray-700">Урон</label>
                        <InputText id="weaponDamage" @bind-Value="editWeapon.Damage"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-primary-500 shadow-sm"/>
                        <ValidationMessage For="@(() => editWeapon.Damage)" class="text-red-600 text-sm"/>
                    </div>

                    <div class="space-y-1">
                        <label for="weaponRange" class="block text-sm font-medium text-gray-700">Дистанция</label>
                        <InputText id="weaponRange" @bind-Value="editWeapon.Range"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-primary-500 shadow-sm"/>
                        <ValidationMessage For="@(() => editWeapon.Range)" class="text-red-600 text-sm"/>
                    </div>

                    <div class="space-y-1">
                        <label for="weaponAttacks" class="block text-sm font-medium text-gray-700">Атаки</label>
                        <InputText id="weaponAttacks" @bind-Value="editWeapon.Attacks"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-primary-500 shadow-sm"/>
                        <ValidationMessage For="@(() => editWeapon.Attacks)" class="text-red-600 text-sm"/>
                    </div>

                    <div class="space-y-1">
                        <label for="weaponCost" class="block text-sm font-medium text-gray-700">Стоимость</label>
                        <InputText id="weaponCost" @bind-Value="editWeapon.Cost"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-primary-500 shadow-sm"/>
                        <ValidationMessage For="@(() => editWeapon.Cost)" class="text-red-600 text-sm"/>
                    </div>

                    <div class="space-y-1">
                        <label for="weaponAmmo" class="block text-sm font-medium text-gray-700">Боеприпасы</label>
                        <InputText id="weaponAmmo" @bind-Value="editWeapon.Ammo"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-primary-500 shadow-sm"/>
                        <ValidationMessage For="@(() => editWeapon.Ammo)" class="text-red-600 text-sm"/>
                    </div>

                    <div class="space-y-1">
                        <label for="weaponMalfunction" class="block text-sm font-medium text-gray-700">Осечка</label>
                        <InputText id="weaponMalfunction" @bind-Value="editWeapon.Malfunction"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-primary-500 shadow-sm"/>
                        <ValidationMessage For="@(() => editWeapon.Malfunction)" class="text-red-600 text-sm"/>
                    </div>

                    <div class="flex items-center space-x-6 mt-2">
                        <div class="flex items-center">
                            <InputCheckbox id="weaponIs1920" @bind-Value="editWeapon.Is1920"
                                           class="h-5 w-5 text-primary-600 focus:ring-primary-500 border-gray-300 rounded mr-2"/>
                            <label for="weaponIs1920" class="text-sm font-medium text-gray-700">Эпоха 1920-х</label>
                        </div>
                        <div class="flex items-center">
                            <InputCheckbox id="weaponIsModern" @bind-Value="editWeapon.IsModern"
                                           class="h-5 w-5 text-primary-600 focus:ring-primary-500 border-gray-300 rounded mr-2"/>
                            <label for="weaponIsModern" class="text-sm font-medium text-gray-700">Современное</label>
                        </div>
                    </div>

                    <div class="md:col-span-2 space-y-1 mt-2">
                        <label for="weaponNotes" class="block text-sm font-medium text-gray-700">Примечания</label>
                        <InputTextArea id="weaponNotes" @bind-Value="editWeapon.Notes" rows="4"
                                      class="w-full px-3 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-primary-500 shadow-sm"/>
                        <ValidationMessage For="@(() => editWeapon.Notes)" class="text-red-600 text-sm"/>
                    </div>
                </div>
            </EditForm>
        </div>
        <div class="p-5 border-t border-gray-200 flex justify-end space-x-3 bg-gray-50">
            <button type="button"
                    class="px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition duration-150 ease-in-out shadow-sm"
                    @onclick="HideModal">
                Отмена
            </button>
            <button type="submit" form="weapon-edit-form"
                    class="px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition duration-150 ease-in-out shadow-sm">
                Сохранить
            </button>
        </div>
    </div>
</div>

<!-- Tailwind Modal for delete confirmation -->
<div class="@(showDeleteModal ? "fixed inset-0 z-50 overflow-auto bg-black bg-opacity-50 flex justify-center items-start pt-20" : "hidden")">
    <div class="bg-white rounded-lg shadow-xl overflow-hidden w-full max-w-md">
        <div class="p-5 border-b border-gray-200 bg-gradient-to-r from-red-500 to-red-600 text-white flex justify-between items-center">
            <h3 class="font-bold text-xl">Подтверждение удаления</h3>
            <button @onclick="HideDeleteModal" class="text-white hover:bg-red-700 rounded-full p-1">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="p-6 bg-white max-h-[70vh] overflow-y-auto">
            <div class="flex items-start">
                <div class="mr-3 text-red-500">
                    <i class="fas fa-exclamation-triangle text-2xl"></i>
                </div>
                <div>
                    <p class="text-gray-700 font-medium mb-2">Вы уверены, что хотите удалить это оружие?</p>
                    <p class="text-gray-600 text-sm mb-1"><span class="font-medium">Название:</span> @(deleteWeapon?.Name)</p>
                    <p class="text-gray-600 text-sm mb-1"><span class="font-medium">Тип:</span> @(deleteWeapon?.Type.ToRussianString())</p>
                    <p class="text-gray-500 text-xs mt-2">Это действие нельзя отменить.</p>
                </div>
            </div>
        </div>
        <div class="p-5 border-t border-gray-200 flex justify-end space-x-3 bg-gray-50">
            <button type="button"
                    class="px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition duration-150 ease-in-out shadow-sm"
                    @onclick="HideDeleteModal">
                Отмена
            </button>
            <button type="button"
                    class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition duration-150 ease-in-out shadow-sm"
                    @onclick="ConfirmDelete">
                Удалить
            </button>        </div>
    </div>
</div>

</div>

@code {

    private bool isSearchPanelVisible = true;

    // List to hold all weapons fetched from the service
    private List<Weapon>? weapons; // Nullable to indicate loading state

    // Filtered list based on search query and other filters
    private IQueryable<Weapon> filteredWeapons => FilterWeapons();

    // Search query bound to the input field
    private string searchQuery = string.Empty;    // Advanced filtering variables
    private WeaponType? selectedTypeFilter;
    private bool is1920Filter = true;
    private bool isModernFilter;

    // Modal visibility flags
    private bool showModal;
    private bool showDeleteModal;

    // State for Add/Edit modal
    private bool isEditMode;
    private Weapon editWeapon = new(); // Model for the edit form

    // Weapon object targeted for deletion
    private Weapon? deleteWeapon;

    // Pagination properties
    private int currentPage = 1;
    private int weaponsPerPage = 20;
    private int totalPages => (int)Math.Ceiling((double)filteredWeapons.Count() / weaponsPerPage);
    private IEnumerable<Weapon> paginatedWeapons => filteredWeapons.Skip((currentPage - 1) * weaponsPerPage).Take(weaponsPerPage);

    // Sorting properties
    private string? sortField;
    private bool sortAscending = true;

    // Expanded weapon details
    private Guid? expandedWeaponId;

    // Error message state
    private string? errorMessage;

    // Lifecycle method: Load data when the component is initialized
    protected override async Task OnInitializedAsync()
    {
        await LoadWeaponsAsync();
    }

    // Method to load weapons data from the service
    private async Task LoadWeaponsAsync()
    {
        errorMessage = null; // Clear previous errors
        try
        {
            weapons = await WeaponService.GetAllWeaponsAsync();
        }
        catch (Exception ex)
        {
            // Log the error (e.g., to console or a logging service)
            Console.WriteLine($"Error loading weapons: {ex.Message}");
            errorMessage = "Не удалось загрузить список оружия. Пожалуйста, попробуйте позже.";
            weapons = new List<Weapon>(); // Ensure weapons is not null
        }
    }    // Reset all filters to their default state
    private void ResetFilters()
    {
        searchQuery = string.Empty;
        selectedTypeFilter = null;
        is1920Filter = true;
        isModernFilter = false;
        currentPage = 1;

        // Apply filters to update the UI
        ApplyFilters();
    }

    // Handle weapon type filter change
    private void OnWeaponTypeFilterChanged(ChangeEventArgs e)
    {
        var value = e.Value?.ToString();
        if (string.IsNullOrEmpty(value))
        {
            selectedTypeFilter = null;
        }
        else if (Enum.TryParse<WeaponType>(value, out var typeValue))
        {
            selectedTypeFilter = typeValue;
        }        ApplyFilters();
    }

    // Apply all filters (this just calls StateHasChanged since the filteredWeapons property is computed)
    private void ApplyFilters()
    {
        currentPage = 1; // Reset to first page when filtering
        // This will trigger a re-render which will use our updated filter values
        StateHasChanged();
    }

    // Show the modal for adding a new weapon
    private void ShowAddModal()
    {
        isEditMode = false;
        editWeapon = new Weapon(); // Reset the edit model
        errorMessage = null; // Clear errors
        showModal = true;
    }

    // Show the modal for editing an existing weapon
    private void ShowEditModal(Weapon weapon)
    {
        isEditMode = true;
        // Clone the weapon object to avoid modifying the original list item directly
        editWeapon = new Weapon
        {
            Id = weapon.Id,
            Name = weapon.Name,
            Type = weapon.Type,
            Skill = weapon.Skill,
            Is1920 = weapon.Is1920,
            IsModern = weapon.IsModern,
            Damage = weapon.Damage,
            Range = weapon.Range,
            Attacks = weapon.Attacks,
            Cost = weapon.Cost,
            Notes = weapon.Notes,
            Ammo = weapon.Ammo,
            Malfunction = weapon.Malfunction
        };
        errorMessage = null; // Clear errors
        showModal = true;
    }

    // Hide the Add/Edit modal
    private void HideModal()
    {
        showModal = false;
    }

    // Handle the valid submission of the Add/Edit form
    private async Task HandleValidSubmit()
    {
        errorMessage = null; // Clear previous errors
        try
        {
            if (isEditMode)
            {
                await WeaponService.UpdateWeaponAsync(editWeapon);
            }
            else
            {
                await WeaponService.AddWeaponAsync(editWeapon);
            }

            showModal = false; // Close modal on success
            await LoadWeaponsAsync(); // Refresh the list
            ApplyFilters(); // Reapply filters
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving weapon: {ex.Message}");
            errorMessage = $"Не удалось сохранить оружие: {ex.Message}";
            // Keep the modal open to show the error
        }
    }

    // Show the delete confirmation modal
    private void ShowDeleteModal(Weapon weapon)
    {
        deleteWeapon = weapon;
        errorMessage = null; // Clear errors
        showDeleteModal = true;
    }

    // Hide the delete confirmation modal
    private void HideDeleteModal()
    {
        showDeleteModal = false;
        deleteWeapon = null;
    }

    // Confirm and execute the weapon deletion
    private async Task ConfirmDelete()
    {
        if (deleteWeapon == null) return; // Should not happen, but good practice

        errorMessage = null; // Clear previous errors
        try
        {
            await WeaponService.DeleteWeaponAsync(deleteWeapon.Id); // Use Guid Id
            showDeleteModal = false;
            await LoadWeaponsAsync(); // Refresh the list
            deleteWeapon = null; // Clear the selected weapon
            ApplyFilters(); // Reapply filters
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting weapon: {ex.Message}");
            errorMessage = $"Не удалось удалить оружие: {ex.Message}";
            // Keep the modal open to show the error
        }
    }

    // Filter weapons based on all active filters
    private IQueryable<Weapon> FilterWeapons()
    {
        if (weapons == null)
        {
            return Enumerable.Empty<Weapon>().AsQueryable(); // Return empty IQueryable if source is null
        }

        var query = weapons.AsQueryable(); // Use AsQueryable for sorting

        // Apply search filter
        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            query = query.Where(w =>
                (w.Name != null && w.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)) ||
                (w.Skill != null && w.Skill.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)) ||
                w.Type.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                (w.Damage != null && w.Damage.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)) ||
                (w.Notes != null && w.Notes.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
            );
        }

        // Apply weapon type filter
        if (selectedTypeFilter.HasValue)
        {
            query = query.Where(w => w.Type == selectedTypeFilter.Value);
        }        // Apply era filters        if (is1920Filter || isModernFilter)
        {
            query = query.Where(w => (is1920Filter && w.Is1920) || (isModernFilter && w.IsModern));
        }

        // Apply sorting
        if (!string.IsNullOrEmpty(sortField))
        {
            switch (sortField)
            {
                case nameof(Weapon.Name):
                    query = sortAscending ? query.OrderBy(w => w.Name) : query.OrderByDescending(w => w.Name);
                    break;
                case nameof(Weapon.Type):
                    query = sortAscending ? query.OrderBy(w => w.Type) : query.OrderByDescending(w => w.Type);
                    break;
                case nameof(Weapon.Skill):
                    query = sortAscending ? query.OrderBy(w => w.Skill) : query.OrderByDescending(w => w.Skill);
                    break;
                case nameof(Weapon.Damage):
                    query = sortAscending ? query.OrderBy(w => w.Damage) : query.OrderByDescending(w => w.Damage);
                    break;
                case nameof(Weapon.Is1920):
                    query = sortAscending ? query.OrderBy(w => w.Is1920) : query.OrderByDescending(w => w.Is1920);
                    break;
                default:
                    query = query.OrderBy(w => w.Name);
                    break;
            }
        }
        else
        {
            query = query.OrderBy(w => w.Name);
        }

        return query;
    }

    // Pagination methods
    private void GoToPage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
        }
    }

    // Sorting methods
    private void ToggleSort(string field)
    {
        if (sortField == field)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            sortField = field;
            sortAscending = true;
        }
        currentPage = 1; // Reset to first page when sorting
    }

    private string GetSortIcon(string field)
    {
        if (sortField != field)
            return "fa-sort";
        
        return sortAscending ? "fa-sort-up" : "fa-sort-down";
    }    // Toggle weapon details
    private void ToggleWeaponDetails(Weapon weapon)
    {
        if (expandedWeaponId == weapon.Id)
        {
            expandedWeaponId = null;
        }
        else
        {
            expandedWeaponId = weapon.Id;
        }
    }

    private void ToggleSearchPanel()
    {
        isSearchPanelVisible = !isSearchPanelVisible;
    }

}
