@page "/weapons"
@using CampaignManager.Web.Components.Features.Weapons.Model
@using CampaignManager.Web.Components.Features.Weapons.Services
@using CampaignManager.Web.Components.Features.Weapons.Components
@using CampaignManager.Web.Components.Shared
@using CampaignManager.Web.Extensions
@attribute [Authorize]

@inject WeaponService WeaponService
@inject NavigationManager NavigationManager
@inject ILogger<WeaponsPage> Logger
@rendermode InteractiveServer

<PageTitle>Оружие - Campaign Manager</PageTitle>

<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6 font-sans">
    <!-- Filter Panel -->
    <FilterPanel Title="Фильтры" @bind-IsExpanded="isSearchPanelVisible">
        <ActionButtons>
            @if (isSearchPanelVisible)
            {
                <button @onclick="ResetFilters"
                        class="min-h-[44px] px-4 py-2 text-primary-600 hover:text-primary-800 bg-primary-50 hover:bg-primary-100 rounded-lg border border-primary-200 hover:border-primary-300 text-sm sm:text-base font-medium flex items-center gap-2 transition-all duration-200">
                    <i class="fas fa-undo-alt"></i>
                    <span class="hidden sm:inline">Сбросить</span>
                </button>
            }
            <button @onclick="ShowAddModal"
                    class="min-h-[44px] px-4 sm:px-5 py-2 bg-gradient-to-r from-primary-600 to-primary-700 hover:from-primary-700 hover:to-primary-800 text-white font-semibold rounded-lg text-sm sm:text-base flex items-center gap-2 shadow-md hover:shadow-lg transition-all duration-200">
                <i class="fas fa-plus"></i>
                <span>Добавить</span>
            </button>
        </ActionButtons>
        <ChildContent>
            <!-- Search and Type Filter -->
            <div class="flex flex-col lg:flex-row gap-3">
                <input type="text" @bind="searchQuery" @bind:event="oninput"
                       @onkeyup="@(() => ApplyFilters())"
                       placeholder="Поиск оружия..."
                       class="flex-1 min-h-[44px] px-4 py-3 border-2 border-gray-300 rounded-lg text-base focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-all"/>

                <select @onchange="OnWeaponTypeFilterChanged"
                        class="lg:w-64 min-h-[44px] px-4 py-3 border-2 border-gray-300 rounded-lg text-base focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-all bg-white">
                    <option value="">Все типы</option>
                    @foreach (var typeValue in EnumExtensions.GetWeaponTypes())
                    {
                        <option value="@typeValue">@typeValue.ToRussianString()</option>
                    }
                </select>
            </div>

            <!-- Era Filters - Touch Optimized -->
            <div class="flex flex-wrap items-center gap-4 sm:gap-6 p-3 bg-gray-50 rounded-lg">
                <span class="text-sm font-semibold text-gray-700">Эпоха:</span>
                <label class="flex items-center gap-3 cursor-pointer group min-h-[44px]">
                    <input type="checkbox" id="era1920s" @bind="is1920Filter" @bind:event="onchange"
                           class="w-5 h-5 text-primary-600 focus:ring-2 focus:ring-primary-500 border-gray-300 rounded cursor-pointer"/>
                    <span class="text-base font-medium text-gray-700 group-hover:text-primary-600 transition-colors">1920s</span>
                </label>
                <label class="flex items-center gap-3 cursor-pointer group min-h-[44px]">
                    <input type="checkbox" id="eraModern" @bind="isModernFilter" @bind:event="onchange"
                           class="w-5 h-5 text-primary-600 focus:ring-2 focus:ring-primary-500 border-gray-300 rounded cursor-pointer"/>
                    <span class="text-base font-medium text-gray-700 group-hover:text-primary-600 transition-colors">Modern</span>
                </label>
            </div>
        </ChildContent>
    </FilterPanel>

    <!-- Error Message -->
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <Alert Type="error" Title="Ошибка">
            @errorMessage
        </Alert>
    }

    <!-- Empty State -->
    @if (paginatedWeapons.Count() == 0)
    {
        <EmptyState 
            Title="Оружие не найдено"
            Message="Попробуйте изменить параметры фильтра или добавить новое оружие."
            IconClass="fa-search" />
    }
    else
    {
        <div class="bg-white rounded-xl shadow-lg overflow-hidden border border-gray-200">
            <!-- Enhanced Table -->
            <div class="overflow-x-auto">
                <table class="w-full text-sm sm:text-base">
                    <thead class="bg-gradient-to-r from-gray-50 to-gray-100 border-b-2 border-gray-200">
                    <tr>
                        <SortableTableHeader 
                            Title="Название" 
                            FieldName="@nameof(Weapon.Name)"
                            CurrentSortField="@sortField"
                            SortAscending="@sortAscending"
                            OnSortChanged="ToggleSort" />
                        
                        <SortableTableHeader 
                            Title="Тип" 
                            FieldName="@nameof(Weapon.Type)"
                            CurrentSortField="@sortField"
                            SortAscending="@sortAscending"
                            OnSortChanged="ToggleSort" />
                        
                        <SortableTableHeader 
                            Title="Навык" 
                            FieldName="@nameof(Weapon.Skill)"
                            CurrentSortField="@sortField"
                            SortAscending="@sortAscending"
                            OnSortChanged="ToggleSort" />
                        
                        <SortableTableHeader 
                            Title="Урон" 
                            FieldName="@nameof(Weapon.Damage)"
                            CurrentSortField="@sortField"
                            SortAscending="@sortAscending"
                            OnSortChanged="ToggleSort" />
                        
                        <SortableTableHeader 
                            Title="Эпоха" 
                            FieldName="@nameof(Weapon.Is1920)"
                            CurrentSortField="@sortField"
                            SortAscending="@sortAscending"
                            OnSortChanged="ToggleSort" />
                        
                        <th class="px-4 sm:px-6 py-4 text-left font-semibold text-gray-700">Характеристики</th>
                        <th class="px-4 sm:px-6 py-4 text-center font-semibold text-gray-700">Действия</th>
                    </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-100">
                    @foreach (var weapon in paginatedWeapons)
                    {
                        <WeaponTableRow 
                            Weapon="@weapon"
                            IsExpanded="@(expandedWeaponId == weapon.Id)"
                            OnEdit="ShowEditModal"
                            OnDelete="ShowDeleteModal"
                            OnToggleExpand="() => ToggleWeaponDetails(weapon)" />
                    }
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            <Pagination 
                CurrentPage="@currentPage"
                TotalPages="@totalPages"
                TotalItems="@filteredWeapons.Count()"
                ItemsPerPage="@weaponsPerPage"
                ItemsLabel="оружий"
                OnPageChanged="GoToPage" />
        </div>
    }

    <!-- Add/Edit Weapon Modal -->
    <Modal IsVisible="@showModal"
           OnClose="HideModal"
           Title="@(isEditMode ? "Редактировать оружие" : "Добавить оружие")"
           MaxWidth="4xl"
           HeaderColorScheme="primary">
        <ChildContent>
            @if (!string.IsNullOrEmpty(modalErrorMessage))
            {
                <Alert Type="error" class="mb-6">
                    @modalErrorMessage
                </Alert>
            }
            <WeaponFormFields 
                Weapon="@editWeapon"
                OnValidSubmit="HandleValidSubmit"
                FormId="weapon-edit-form" />
        </ChildContent>
        <FooterContent>
            <button type="button"
                    class="min-h-[44px] px-6 py-3 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 active:bg-gray-400 transition-all duration-200 shadow-sm font-semibold text-base"
                    @onclick="HideModal">
                Отмена
            </button>
            <button type="submit" form="weapon-edit-form"
                    class="min-h-[44px] px-6 py-3 bg-gradient-to-r from-primary-600 to-primary-700 text-white rounded-lg hover:from-primary-700 hover:to-primary-800 active:from-primary-800 active:to-primary-900 transition-all duration-200 shadow-md hover:shadow-lg font-semibold text-base">
                Сохранить
            </button>
        </FooterContent>
    </Modal>

    <!-- Delete Confirmation Modal -->
    <ConfirmationModal 
        IsVisible="@showDeleteModal"
        OnConfirm="ConfirmDelete"
        OnCancel="HideDeleteModal"
        Title="Подтверждение удаления"
        Message="Вы уверены, что хотите удалить это оружие?"
        ConfirmText="Удалить"
        CancelText="Отмена">
        <DetailsContent>
            <p class="text-gray-700 text-base">
                <span class="font-semibold text-gray-900">Название:</span> @(deleteWeapon?.Name)
            </p>
            <p class="text-gray-700 text-base">
                <span class="font-semibold text-gray-900">Тип:</span> @(deleteWeapon?.Type.ToRussianString())
            </p>
        </DetailsContent>
    </ConfirmationModal>

</div>

@code {
    private bool isSearchPanelVisible = true;

    // List to hold all weapons fetched from the service
    private List<Weapon>? weapons; // Nullable to indicate loading state

    // Filtered list based on search query and other filters
    private IQueryable<Weapon> filteredWeapons => FilterWeapons();

    // Search query bound to the input field
    private string searchQuery = string.Empty;
    
    // Advanced filtering variables
    private WeaponType? selectedTypeFilter;
    private bool is1920Filter = true;
    private bool isModernFilter;

    // Modal visibility flags
    private bool showModal;
    private bool showDeleteModal;

    // State for Add/Edit modal
    private bool isEditMode;
    private Weapon editWeapon = new();

    // Weapon object targeted for deletion
    private Weapon? deleteWeapon;

    // Pagination properties
    private int currentPage = 1;
    private int weaponsPerPage = 20;
    private int totalPages => (int)Math.Ceiling((double)filteredWeapons.Count() / weaponsPerPage);
    private IEnumerable<Weapon> paginatedWeapons => filteredWeapons.Skip((currentPage - 1) * weaponsPerPage).Take(weaponsPerPage);

    // Sorting properties
    private string? sortField;
    private bool sortAscending = true;

    // Expanded weapon details
    private Guid? expandedWeaponId;

    // Error message state
    private string? errorMessage;
    private string? modalErrorMessage;

    // Lifecycle method: Load data when the component is initialized
    protected override async Task OnInitializedAsync()
    {
        await LoadWeaponsAsync();
    }

    // Method to load weapons data from the service
    private async Task LoadWeaponsAsync()
    {
        errorMessage = null; // Clear previous errors
        try
        {
            weapons = await WeaponService.GetAllWeaponsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading weapons: {ex.Message}");
            errorMessage = "Не удалось загрузить список оружия. Пожалуйста, попробуйте позже.";
            weapons = new List<Weapon>();
        }
    }

    // Reset all filters to their default state
    private void ResetFilters()
    {
        searchQuery = string.Empty;
        selectedTypeFilter = null;
        is1920Filter = true;
        isModernFilter = false;
        currentPage = 1;
        ApplyFilters();
    }

    // Handle weapon type filter change
    private void OnWeaponTypeFilterChanged(ChangeEventArgs e)
    {
        var value = e.Value?.ToString();
        if (string.IsNullOrEmpty(value))
        {
            selectedTypeFilter = null;
        }
        else if (Enum.TryParse<WeaponType>(value, out var typeValue))
        {
            selectedTypeFilter = typeValue;
        }

        ApplyFilters();
    }

    private void ApplyFilters()
    {
        currentPage = 1; 
        StateHasChanged();
    }

    // Show the modal for adding a new weapon
    private void ShowAddModal()
    {
        isEditMode = false;
        editWeapon = new Weapon();
        modalErrorMessage = null;
        showModal = true;
    }

    // Show the modal for editing an existing weapon
    private void ShowEditModal(Weapon weapon)
    {
        isEditMode = true;
        // Clone the weapon object to avoid modifying the original list item directly
        editWeapon = new Weapon
        {
            Id = weapon.Id,
            Name = weapon.Name,
            Type = weapon.Type,
            Skill = weapon.Skill,
            Is1920 = weapon.Is1920,
            IsModern = weapon.IsModern,
            Damage = weapon.Damage,
            Range = weapon.Range,
            Attacks = weapon.Attacks,
            Cost = weapon.Cost,
            Notes = weapon.Notes,
            Ammo = weapon.Ammo,
            Malfunction = weapon.Malfunction
        };
        modalErrorMessage = null;
        showModal = true;
    }

    // Hide the Add/Edit modal
    private void HideModal()
    {
        showModal = false;
    }

    // Handle the valid submission of the Add/Edit form
    private async Task HandleValidSubmit()
    {
        modalErrorMessage = null;
        try
        {
            if (isEditMode)
            {
                await WeaponService.UpdateWeaponAsync(editWeapon);
            }
            else
            {
                await WeaponService.AddWeaponAsync(editWeapon);
            }

            showModal = false;
            await LoadWeaponsAsync();
            ApplyFilters();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving weapon: {ex.Message}");
            modalErrorMessage = $"Не удалось сохранить оружие: {ex.Message}";
        }
    }

    // Show the delete confirmation modal
    private void ShowDeleteModal(Weapon weapon)
    {
        deleteWeapon = weapon;
        errorMessage = null;
        showDeleteModal = true;
    }

    // Hide the delete confirmation modal
    private void HideDeleteModal()
    {
        showDeleteModal = false;
        deleteWeapon = null;
    }

    // Confirm and execute the weapon deletion
    private async Task ConfirmDelete()
    {
        if (deleteWeapon == null) return;

        errorMessage = null;
        try
        {
            await WeaponService.DeleteWeaponAsync(deleteWeapon.Id);
            showDeleteModal = false;
            await LoadWeaponsAsync();
            deleteWeapon = null;
            ApplyFilters();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting weapon: {ex.Message}");
            errorMessage = $"Не удалось удалить оружие: {ex.Message}";
        }
    }

    // Filter weapons based on all active filters
    private IQueryable<Weapon> FilterWeapons()
    {
        if (weapons == null)
        {
            return Enumerable.Empty<Weapon>().AsQueryable();
        }

        var query = weapons.AsQueryable();

        // Apply search filter
        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            query = query.Where(w =>
                (w.Name != null && w.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)) ||
                (w.Skill != null && w.Skill.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)) ||
                w.Type.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                (w.Damage != null && w.Damage.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)) ||
                (w.Notes != null && w.Notes.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
            );
        }

        // Apply weapon type filter
        if (selectedTypeFilter.HasValue)
        {
            query = query.Where(w => w.Type == selectedTypeFilter.Value);
        }

        // Apply era filters
        if (is1920Filter || isModernFilter)
        {
            query = query.Where(w => (is1920Filter && w.Is1920) || (isModernFilter && w.IsModern));
        }

        // Apply sorting
        if (!string.IsNullOrEmpty(sortField))
        {
            switch (sortField)
            {
                case nameof(Weapon.Name):
                    query = sortAscending ? query.OrderBy(w => w.Name) : query.OrderByDescending(w => w.Name);
                    break;
                case nameof(Weapon.Type):
                    query = sortAscending ? query.OrderBy(w => w.Type) : query.OrderByDescending(w => w.Type);
                    break;
                case nameof(Weapon.Skill):
                    query = sortAscending ? query.OrderBy(w => w.Skill) : query.OrderByDescending(w => w.Skill);
                    break;
                case nameof(Weapon.Damage):
                    query = sortAscending ? query.OrderBy(w => w.Damage) : query.OrderByDescending(w => w.Damage);
                    break;
                case nameof(Weapon.Is1920):
                    query = sortAscending ? query.OrderBy(w => w.Is1920) : query.OrderByDescending(w => w.Is1920);
                    break;
                default:
                    query = query.OrderBy(w => w.Name);
                    break;
            }
        }
        else
        {
            query = query.OrderBy(w => w.Name);
        }

        return query;
    }

    // Pagination method
    private void GoToPage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
        }
    }

    // Sorting method
    private void ToggleSort(string field)
    {
        if (sortField == field)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            sortField = field;
            sortAscending = true;
        }

        currentPage = 1;
    }

    // Toggle weapon details
    private void ToggleWeaponDetails(Weapon weapon)
    {
        if (expandedWeaponId == weapon.Id)
        {
            expandedWeaponId = null;
        }
        else
        {
            expandedWeaponId = weapon.Id;
        }
    }
}
