@using CampaignManager.Web.Components.Features.Characters.Model
@using CampaignManager.Web.Components.Features.Items.Model
@using CampaignManager.Web.Components.Features.Items.Services
@using CampaignManager.Web.Components.Shared.Model
@using CampaignManager.Web.Extensions
@inject ItemService ItemService
<div class="bg-white shadow rounded-md p-4 mb-4">
    <h3 class="text-xl font-bold mb-4">Снаряжение и имущество</h3>

    <!-- Список предметов (responsive) -->
    <div class="mb-4">
        @if (Character.Equipment.Items.Any())
        {
            <!-- Заголовки для десктопа -->
            <div class="hidden md:grid md:grid-cols-3 gap-4 text-xs font-medium text-gray-500 uppercase tracking-wider border-b border-gray-200 pb-2 mb-2">
                <div>Предмет</div>
                <div>Описание</div>
                <div class="text-center">Действия</div>
            </div>
            
            <div class="space-y-3 md:space-y-0">
                @foreach (var item in Character.Equipment.Items)
                {
                    <!-- Карточка предмета (responsive) -->
                    <div class="bg-gray-50 rounded-md p-3 md:bg-white md:border-b md:border-gray-200 md:rounded-none md:p-2">
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-2 md:gap-4 items-center">
                            <div>
                                <label class="block text-xs text-gray-500 mb-1 md:hidden">Предмет</label>
                                <input type="text" @bind="item.Name" 
                                       class="w-full px-2 py-1 text-sm border border-gray-300 rounded"
                                       placeholder="Предмет"/>
                            </div>
                            <div>
                                <label class="block text-xs text-gray-500 mb-1 md:hidden">Описание</label>
                                <input type="text" @bind="item.Description"
                                       class="w-full px-2 py-1 text-sm border border-gray-300 rounded"
                                       placeholder="Описание"/>
                            </div>
                            <div class="flex justify-end md:justify-center">
                                <button @onclick="() => RemoveItem(item)"
                                        class="text-red-600 hover:text-red-900 p-2 rounded-md">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none"
                                         viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                              d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                                    </svg>
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="text-gray-500 italic text-sm">Нет предметов</div>
        }
    </div>

    <!-- Форма добавления предмета (адаптивная) -->
    <div class="bg-gray-50 p-3 rounded-md mb-3">
        <details class="group">
            <summary class="flex justify-between items-center cursor-pointer">
                <span class="text-sm font-medium text-gray-700">Добавить предмет</span>
                <span class="transition group-open:rotate-180">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500" fill="none"
                         viewBox="0 0 24 24"
                         stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
                    </svg>
                </span>
            </summary>

            <div class="mt-3 p-3 border border-gray-200 rounded-lg">
                <div class="relative mb-3">
                    <input type="text" @bind="newItem.Name" @oninput="OnItemNameInput" placeholder="Название предмета"
                           class="w-full p-2 border border-gray-300 rounded text-sm"/>

                    @if (suggestedItems.Any())
                    {
                        <div
                            class="absolute z-10 mt-1 w-full bg-white border border-gray-300 rounded-md shadow-lg max-h-60 overflow-auto">
                            @foreach (var item in suggestedItems)
                            {
                                <div @onclick="() => SelectItem(item)"
                                     class="px-3 py-2 cursor-pointer hover:bg-gray-100 border-b border-gray-100 last:border-0">
                                    <div class="font-medium text-sm">@item.Name</div>
                                    @if (!string.IsNullOrEmpty(item.Type))
                                    {
                                        <div class="text-xs text-gray-500">Тип: @item.Type</div>
                                    }
                                    @if (!string.IsNullOrEmpty(item.Description))
                                    {
                                        <div class="text-xs text-gray-600">@(item.Description.Length > 100 ? item.Description.Substring(0, 100) + "..." : item.Description)</div>
                                    }
                                </div>
                            }
                        </div>
                    }
                </div>

                <!-- Фильтры предметов -->
                <div class="grid grid-cols-1 md:grid-cols-2 gap-3 mb-3">
                    <select @bind="selectedItemType" class="w-full p-2 border border-gray-300 rounded text-sm">
                        <option value="">Все типы предметов</option>
                        @foreach (var type in availableItemTypes)
                        {
                            <option value="@type">@type</option>
                        }
                    </select>
                    
                    <div class="flex items-center space-x-4">
                        <label class="flex items-center">
                            <input type="checkbox" @bind="is1920Filter" class="h-4 w-4 text-blue-600 border-gray-300 rounded"/>
                            <span class="ml-2 text-sm text-gray-700">1920-е</span>
                        </label>
                        <label class="flex items-center">
                            <input type="checkbox" @bind="isModernFilter" class="h-4 w-4 text-blue-600 border-gray-300 rounded"/>
                            <span class="ml-2 text-sm text-gray-700">Современность</span>
                        </label>
                    </div>
                </div>

                <!-- Описание предмета -->
                <div class="mb-3">
                    <input type="text" @bind="newItem.Description" placeholder="Описание предмета"
                           class="w-full p-2 border border-gray-300 rounded text-sm"/>
                </div>

                <button @onclick="AddItem"
                        class="w-full bg-blue-500 hover:bg-blue-600 text-white font-bold py-1 px-4 rounded text-sm mt-3">
                    Добавить
                </button>
            </div>
        </details>
    </div>
</div>

@code {
    [Parameter] public Character Character { get; set; } = null!;

    private EquipmentItem newItem = new();
    private string? selectedItemType = "";
    private bool is1920Filter = true;
    private bool isModernFilter;

    private List<Item> suggestedItems = new();
    private List<Item> allItems = new();
    private List<string> availableItemTypes = new();

    protected override async Task OnInitializedAsync()
    {
        allItems = await ItemService.GetAllItemsAsync();
        availableItemTypes = await ItemService.GetAllItemTypesAsync();
    }

    private void OnItemNameInput(ChangeEventArgs e)
    {
        newItem.Name = e.Value?.ToString() ?? "";
        
        if (string.IsNullOrWhiteSpace(newItem.Name))
        {
            suggestedItems.Clear();
            return;
        }

        FilterSuggestedItems();
    }

    private void FilterSuggestedItems()
    {
        if (string.IsNullOrWhiteSpace(newItem.Name))
        {
            suggestedItems.Clear();
            return;
        }

        var query = allItems.Where(i => i.Name.Contains(newItem.Name, StringComparison.OrdinalIgnoreCase));

        // Применяем фильтры только если они активны
        if (!string.IsNullOrEmpty(selectedItemType))
            query = query.Where(i => i.Type == selectedItemType);

        if (is1920Filter && !isModernFilter)
            query = query.Where(i => (i.Era & Eras.Classic) != 0);
        else if (!is1920Filter && isModernFilter)
            query = query.Where(i => (i.Era & Eras.Modern) != 0);
        else if (is1920Filter && isModernFilter)
            query = query.Where(i => (i.Era & (Eras.Classic | Eras.Modern)) != 0);

        suggestedItems = query.Take(5).ToList();
    }

    private void SelectItem(Item item)
    {
        newItem.Name = item.Name;
        newItem.Description = item.Description ?? "";
        suggestedItems.Clear();
    }

    private void AddItem()
    {
        if (string.IsNullOrWhiteSpace(newItem.Name)) return;

        Character.Equipment.Items.Add(new EquipmentItem
        {
            Name = newItem.Name,
            Description = newItem.Description
        });

        newItem = new EquipmentItem();
    }

    private void RemoveItem(EquipmentItem item) => Character.Equipment.Items.Remove(item);
}
