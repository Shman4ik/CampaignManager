@using CampaignManager.Web.Components.Features.Campaigns.Models
@using CampaignManager.Web.Components.Features.Campaigns.Services
@inject CampaignService CampaignService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<style>
    .join-campaign-container {
        width: 100%;
    }

    /* Notifications */
    .notification {
        padding: 1rem;
        margin-bottom: 1rem;
        border-radius: 8px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-weight: 500;
    }

    .notification.success {
        background: linear-gradient(135deg, #059669, #10b981);
        color: white;
        border: 1px solid #047857;
    }

    .notification.warning {
        background: linear-gradient(135deg, #d97706, #f59e0b);
        color: white;
        border: 1px solid #b45309;
    }

    .notification.error {
        background: linear-gradient(135deg, #dc2626, #ef4444);
        color: white;
        border: 1px solid #b91c1c;
    }

    .notification-close {
        background: none;
        border: none;
        color: inherit;
        font-size: 1.5rem;
        cursor: pointer;
        opacity: 0.8;
        transition: opacity 0.3s ease;
    }

    .notification-close:hover {
        opacity: 1;
    }

    /* Loading State */
    .loading-container {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.75rem;
        padding: 2rem;
        color: #9ca3af;
    }

    .loading-spinner {
        width: 2rem;
        height: 2rem;
        border: 2px solid #374151;
        border-top: 2px solid #3b82f6;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    /* Empty State */
    .empty-campaigns {
        text-align: center;
        padding: 2rem;
        color: #9ca3af;
    }

    .empty-campaigns i {
        font-size: 2rem;
        margin-bottom: 0.75rem;
        color: #6b7280;
    }

    .empty-campaigns p {
        font-size: 0.875rem;
    }

    /* Campaigns Grid */
    .campaigns-grid {
        display: grid;
        grid-template-columns: 1fr;
        gap: 1rem;
    }

    /* Campaign Card */
    .campaign-card {
        background: linear-gradient(135deg, #1f2937 0%, #374151 100%);
        border: 1px solid #4b5563;
        border-radius: 12px;
        overflow: hidden;
        transition: all 0.3s ease;
    }

    .campaign-card:hover {
        border-color: #6b7280;
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.4);
        transform: translateY(-2px);
    }

    /* Campaign Header */
    .campaign-header {
        background: linear-gradient(135deg, #111827 0%, #1f2937 100%);
        padding: 1.5rem;
        border-bottom: 1px solid #4b5563;
    }

    .campaign-title {
        font-size: 1.125rem;
        font-weight: 600;
        color: #f3f4f6;
        margin-bottom: 1rem;
    }

    .campaign-meta {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .meta-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 0.875rem;
        color: #9ca3af;
    }

    .meta-item i {
        color: #6b7280;
        width: 1rem;
    }

    /* Campaign Actions */
    .campaign-actions {
        padding: 1.5rem;
    }

    /* Already Joined State */
    .already-joined {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
        padding: 1rem;
        background: linear-gradient(135deg, #059669, #10b981);
        color: white;
        border-radius: 8px;
        font-weight: 500;
        font-size: 0.875rem;
    }

    .already-joined i {
        color: rgba(255, 255, 255, 0.9);
    }

    /* Join Form */
    .join-form {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .form-group {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .form-label {
        font-size: 0.875rem;
        font-weight: 500;
        color: #e5e7eb;
    }

    .form-input {
        width: 100%;
        padding: 0.75rem;
        background: #1f2937;
        border: 1px solid #4b5563;
        border-radius: 6px;
        color: #f3f4f6;
        font-size: 0.875rem;
        transition: all 0.3s ease;
    }

    .form-input:focus {
        border-color: #3b82f6;
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        outline: none;
    }

    .form-input::placeholder {
        color: #9ca3af;
    }

    .join-button {
        width: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
        padding: 0.75rem 1rem;
        background: linear-gradient(135deg, #2563eb, #3b82f6);
        color: white;
        border: none;
        border-radius: 6px;
        font-weight: 500;
        font-size: 0.875rem;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .join-button:hover:not(:disabled) {
        background: linear-gradient(135deg, #1d4ed8, #2563eb);
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(37, 99, 235, 0.4);
    }

    .join-button:disabled {
        opacity: 0.5;
        cursor: not-allowed;
        transform: none;
        box-shadow: none;
    }

    /* Auth Required */
    .auth-required {
        text-align: center;
        padding: 1rem;
        background: linear-gradient(135deg, #1e3a8a, #3b82f6);
        border: 1px solid #2563eb;
        border-radius: 8px;
        color: #dbeafe;
    }

    .auth-required i {
        display: block;
        font-size: 1.5rem;
        margin-bottom: 0.5rem;
        color: #93c5fd;
    }

    .auth-required span {
        display: block;
        font-size: 0.875rem;
        margin-bottom: 0.75rem;
    }

    .auth-link {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.5rem 1rem;
        background: rgba(255, 255, 255, 0.1);
        color: white;
        text-decoration: none;
        border-radius: 6px;
        font-size: 0.875rem;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .auth-link:hover {
        background: rgba(255, 255, 255, 0.2);
        color: white;
        text-decoration: none;
        transform: translateY(-1px);
    }
</style>

<div class="join-campaign-container">
    @if (!string.IsNullOrEmpty(NotificationMessage))
    {
        <div class="notification @NotificationCssClass">
            <span>@NotificationMessage</span>
            <button @onclick="ClearNotification" class="notification-close">&times;</button>
        </div>
    }

    @if (AvailableCampaigns == null)
    {
        <div class="loading-container">
            <div class="loading-spinner"></div>
            <span>Загрузка доступных кампаний...</span>
        </div>
    }
    else if (AvailableCampaigns.Count == 0)
    {
        <div class="empty-campaigns">
            <i class="fas fa-search"></i>
            <p>Пока нет доступных кампаний для присоединения</p>
        </div>
    }
    else
    {
        <div class="campaigns-grid">
            @foreach (var campaign in AvailableCampaigns)
            {
                <div class="campaign-card">
                    <div class="campaign-header">
                        <h4 class="campaign-title">@campaign.Name</h4>
                        <div class="campaign-meta">
                            <div class="meta-item">
                                <i class="fas fa-calendar"></i>
                                <span>Создано: @campaign.CreatedAt.ToString("dd.MM.yyyy")</span>
                            </div>
                            <div class="meta-item">
                                <i class="fas fa-crown"></i>
                                <span>Хранитель: @campaign.KeeperEmail</span>
                            </div>
                        </div>
                    </div>

                    <div class="campaign-actions">
                        @if (IsUserAuthorized)
                        {
                            @if (IsUserInCampaign(campaign))
                            {
                                <div class="already-joined">
                                    <i class="fas fa-check-circle"></i>
                                    <span>Вы уже участвуете</span>
                                </div>
                            }
                            else
                            {
                                <div class="join-form">
                                    <div class="form-group">
                                        <label for="userName-@campaign.Id" class="form-label">Ваше имя:</label>
                                        <input type="text" id="userName-@campaign.Id"
                                               class="form-input"
                                               placeholder="Введите ваше имя"
                                               value="@UserName"
                                               @oninput="@(e => UserName = e.Value?.ToString())"/>
                                    </div>
                                    <button @onclick="async () => await JoinCampaignAsync(campaign.Id, UserName ?? string.Empty)"
                                            class="join-button"
                                            disabled="@(string.IsNullOrWhiteSpace(UserName))">
                                        <i class="fas fa-user-plus"></i>
                                        Присоединиться
                                    </button>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="auth-required">
                                <i class="fas fa-lock"></i>
                                <span>Войдите в систему для присоединения</span>
                                <a href="/api/account/login" class="auth-link">
                                    Войти через Google
                                </a>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private List<Campaign> AvailableCampaigns { get; set; } = new();
    private List<Campaign> UserCampaigns { get; set; } = new();
    private bool IsUserAuthorized;
    private string UserEmail = string.Empty;
    private string? UserName;

    // Notification properties
    private string NotificationMessage { get; set; } = string.Empty;
    private string NotificationCssClass { get; set; } = "hidden";

    protected override async Task OnInitializedAsync()
    {
        // Get authentication state
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        IsUserAuthorized = authState.User.Identity?.IsAuthenticated ?? false;
        UserEmail = authState.User?.FindFirst(ClaimTypes.Email)?.Value ?? string.Empty;
        UserName = authState.User?.FindFirstValue(ClaimTypes.Name) ?? string.Empty;

        // Load available and user campaigns in parallel
        if (IsUserAuthorized)
        {
            var availableTask = CampaignService.GetAvailableCompaniesAsync();
            var userTask = CampaignService.GetUserCampaignsAsync();

            await Task.WhenAll(availableTask, userTask);

            AvailableCampaigns = await availableTask;
            UserCampaigns = await userTask;
        }
        else
        {
            AvailableCampaigns = await CampaignService.GetAvailableCompaniesAsync();
            UserCampaigns = new List<Campaign>();
        }
    }

    private bool IsUserInCampaign(Campaign campaign)
    {
        return UserCampaigns?.Any(c => c.Id == campaign.Id) ?? false;
    }

    private async Task JoinCampaignAsync(Guid campaignId, string userName)
    {
        if (IsUserAuthorized && !string.IsNullOrWhiteSpace(userName))
        {
            try
            {
                var joinResult = await CampaignService.JoinCampaignAsync(campaignId, userName);

                if (joinResult)
                {
                    ShowNotification("Вы успешно присоединились к кампании!", "success");
                    // Refresh page after short delay to show notification
                    await Task.Delay(1500);
                    NavigationManager.NavigateTo("/", true);
                }
                else
                {
                    ShowNotification("Не удалось присоединиться к кампании. Возможно, вы уже являетесь участником.", "warning");
                }
            }
            catch (Exception ex)
            {
                ShowNotification($"Ошибка при присоединении: {ex.Message}", "error");
            }
        }
        else if (string.IsNullOrWhiteSpace(userName))
        {
            ShowNotification("Пожалуйста, введите ваше имя", "warning");
        }
    }

    private void ShowNotification(string message, string type)
    {
        NotificationMessage = message;

        NotificationCssClass = type switch
        {
            "success" => "bg-green-100 text-green-800 border border-green-200",
            "warning" => "bg-yellow-100 text-yellow-800 border border-yellow-200",
            "error" => "bg-red-100 text-red-800 border border-red-200",
            _ => "bg-blue-100 text-blue-800 border border-blue-200"
        };

        StateHasChanged();
    }

    private void ClearNotification()
    {
        NotificationMessage = string.Empty;
        StateHasChanged();
    }

}
