@using CampaignManager.Web.Components.Features.Spells.Model
@namespace CampaignManager.Web.Components.Features.Spells.Components

<tr class="@(IsExpanded ? "bg-primary-50" : "hover:bg-gray-50") transition-all duration-200 cursor-pointer active:bg-gray-100"
    @onclick="ToggleExpand">
    <td class="px-4 sm:px-6 py-4 font-semibold text-gray-900">
        <div class="flex items-center gap-3">
            <button type="button"
                    class="w-8 h-8 flex items-center justify-center text-primary-600 hover:text-primary-800 hover:bg-primary-50 rounded-lg transition-colors"
                    @onclick:stopPropagation="true"
                    @onclick="ToggleExpand">
                <i class="fas @(IsExpanded ? "fa-chevron-up" : "fa-chevron-down")"></i>
            </button>
            <span>@Spell.Name</span>
        </div>
    </td>
    <td class="px-4 sm:px-6 py-4">
        @if (!string.IsNullOrWhiteSpace(Spell.SpellType))
        {
            <span class="inline-flex items-center px-3 py-1.5 rounded-lg text-sm font-semibold bg-primary-100 text-primary-800 border border-primary-200">
                @Spell.SpellType
            </span>
        }
        else
        {
            <span class="text-gray-400 text-sm">—</span>
        }
    </td>
    <td class="px-4 sm:px-6 py-4 text-gray-700 font-medium">@(!string.IsNullOrWhiteSpace(Spell.Cost) ? Spell.Cost : "—")</td>
    <td class="px-4 sm:px-6 py-4 text-gray-700 font-medium">@(!string.IsNullOrWhiteSpace(Spell.CastingTime) ? Spell.CastingTime : "—")</td>
    <td class="px-4 sm:px-6 py-4 text-center" @onclick:stopPropagation="true">
        <div class="flex flex-col sm:flex-row gap-2 justify-center">
            <button @onclick="() => OnEdit.InvokeAsync(Spell)"
                    class="min-h-[44px] px-4 py-2 text-primary-600 hover:text-primary-800 bg-primary-50 hover:bg-primary-100 rounded-lg text-sm font-semibold flex items-center justify-center gap-2 transition-all duration-200 border border-primary-200">
                <i class="fas fa-edit"></i>
                <span>Изменить</span>
            </button>
            <button @onclick="() => OnDelete.InvokeAsync(Spell)"
                    class="min-h-[44px] px-4 py-2 text-error-600 hover:text-error-800 bg-error-50 hover:bg-error-100 rounded-lg text-sm font-semibold flex items-center justify-center gap-2 transition-all duration-200 border border-error-200">
                <i class="fas fa-trash-alt"></i>
                <span>Удалить</span>
            </button>
        </div>
    </td>
</tr>

@if (IsExpanded)
{
    <tr class="bg-gradient-to-r from-gray-50 to-white border-t-2 border-primary-200">
        <td colspan="5" class="px-4 sm:px-6 py-6">
            <div class="bg-white rounded-xl p-6 shadow-inner border-2 border-gray-100 space-y-6">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div class="space-y-1">
                        <h5 class="text-sm font-semibold text-gray-500 uppercase tracking-wide">Название</h5>
                        <p class="text-base font-medium text-gray-900">@Spell.Name</p>
                    </div>
                    <div class="space-y-1">
                        <h5 class="text-sm font-semibold text-gray-500 uppercase tracking-wide">Тип</h5>
                        <p class="text-base font-medium text-gray-900">@Spell.SpellType</p>
                    </div>
                    <div class="space-y-1">
                        <h5 class="text-sm font-semibold text-gray-500 uppercase tracking-wide">Стоимость</h5>
                        <p class="text-base font-medium text-gray-900">@(!string.IsNullOrWhiteSpace(Spell.Cost) ? Spell.Cost : "—")</p>
                    </div>
                    <div class="space-y-1">
                        <h5 class="text-sm font-semibold text-gray-500 uppercase tracking-wide">Время сотворения</h5>
                        <p class="text-base font-medium text-gray-900">@(!string.IsNullOrWhiteSpace(Spell.CastingTime) ? Spell.CastingTime : "—")</p>
                    </div>
                </div>

                @if (Spell.AlternativeNames.Count > 0)
                {
                    <div>
                        <h5 class="text-sm font-semibold text-gray-500 uppercase tracking-wide mb-3">Альтернативные названия</h5>
                        <div class="flex flex-wrap gap-2">
                            @foreach (var altName in Spell.AlternativeNames)
                            {
                                <span class="inline-flex items-center px-3 py-1.5 rounded-lg text-sm font-semibold bg-secondary-100 text-secondary-800 border border-secondary-200">
                                    @altName
                                </span>
                            }
                        </div>
                    </div>
                }

                <div>
                    <h5 class="text-sm font-semibold text-gray-500 uppercase tracking-wide mb-3">Описание</h5>
                    <p class="text-base text-gray-700 whitespace-pre-wrap leading-relaxed">@Spell.Description</p>
                </div>
            </div>
        </td>
    </tr>
}

@code {
    [Parameter] public Spell Spell { get; set; } = new() { Name = string.Empty, SpellType = string.Empty };
    [Parameter] public bool IsExpanded { get; set; }
    [Parameter] public EventCallback<Spell> OnEdit { get; set; }
    [Parameter] public EventCallback<Spell> OnDelete { get; set; }
    [Parameter] public EventCallback OnToggleExpand { get; set; }

    private Task ToggleExpand()
    {
        return OnToggleExpand.InvokeAsync();
    }
}
