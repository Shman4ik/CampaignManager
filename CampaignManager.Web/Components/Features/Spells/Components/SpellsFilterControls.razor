@namespace CampaignManager.Web.Components.Features.Spells.Components

<div class="flex flex-col lg:flex-row gap-3">
    <input type="text"
           value="@SearchQuery"
           @oninput="HandleSearchInput"
           placeholder="Поиск заклинаний..."
           class="flex-1 min-h-[44px] px-4 py-3 border-2 border-gray-300 rounded-lg text-base focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-all" />

    <select value="@SelectedTypeFilter"
            @onchange="HandleSpellTypeChanged"
            class="lg:w-64 min-h-[44px] px-4 py-3 border-2 border-gray-300 rounded-lg text-base focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-all bg-white">
        <option value="">Все типы</option>
        @foreach (var typeValue in SpellTypeOptions)
        {
            <option value="@typeValue" selected="@(IsSelected(typeValue))">@typeValue</option>
        }
    </select>
</div>

@code {
    [Parameter] public string SearchQuery { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> SearchQueryChanged { get; set; }

    [Parameter] public string? SelectedTypeFilter { get; set; }
    [Parameter] public EventCallback<string?> SelectedTypeFilterChanged { get; set; }

    [Parameter] public IEnumerable<string> SpellTypes { get; set; } = Enumerable.Empty<string>();
    [Parameter] public EventCallback OnFiltersChanged { get; set; }

    private IEnumerable<string> SpellTypeOptions
        => SpellTypes
            .Where(type => !string.IsNullOrWhiteSpace(type))
            .Select(type => type.Trim())
            .Concat(!string.IsNullOrWhiteSpace(SelectedTypeFilter) ? new[] { SelectedTypeFilter!.Trim() } : Array.Empty<string>())
            .Distinct(StringComparer.OrdinalIgnoreCase)
            .OrderBy(type => type, StringComparer.OrdinalIgnoreCase);

    private bool IsSelected(string typeValue)
        => !string.IsNullOrWhiteSpace(SelectedTypeFilter) &&
           typeValue.Equals(SelectedTypeFilter, StringComparison.OrdinalIgnoreCase);

    private async Task HandleSearchInput(ChangeEventArgs e)
    {
        var text = (e.Value?.ToString() ?? string.Empty).Trim();
        await SearchQueryChanged.InvokeAsync(text);
        await OnFiltersChanged.InvokeAsync();
    }

    private async Task HandleSpellTypeChanged(ChangeEventArgs e)
    {
        var value = e.Value?.ToString();
        var normalized = string.IsNullOrWhiteSpace(value) ? null : value.Trim();
        await SelectedTypeFilterChanged.InvokeAsync(normalized);
        await OnFiltersChanged.InvokeAsync();
    }
}
