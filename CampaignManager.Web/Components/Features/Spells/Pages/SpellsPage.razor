@page "/spells"
@using CampaignManager.Web.Components.Features.Spells.Model
@using CampaignManager.Web.Components.Features.Spells.Services
@attribute [Authorize]
@inject SpellService SpellService
@rendermode InteractiveServer

<div class="max-w-7xl mx-auto px-2 py-4 font-sans">
    <!-- Улучшенная панель фильтров - более компактная -->
    <div class="sticky top-0 z-10 bg-white rounded-lg shadow-md p-3 mb-4 border border-gray-200">
        <div class="flex justify-between items-center mb-2">
            <div class="flex items-center">
                <h2 class="text-base font-semibold text-gray-700 mr-2">Фильтры</h2>
                <button @onclick="ToggleSearchPanel" class="text-gray-500 hover:text-gray-700 transition-colors">
                    <i class="fas @(isSearchPanelVisible ? "fa-chevron-up" : "fa-chevron-down")"></i>
                </button>
            </div>
            <div class="flex space-x-2">
                @if (isSearchPanelVisible)
                {
                    <button @onclick="ResetFilters"
                            class="text-blue-600 hover:text-blue-800 py-1 px-2 rounded-md border border-blue-300 hover:border-blue-500 text-xs flex items-center">
                        <i class="fas fa-undo-alt mr-1"></i>
                        <span>Сбросить</span>
                    </button>
                }
                <!-- Кнопка добавления заклинания (компактнее) -->
                <button @onclick="ShowAddModal"
                        class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-1 px-3 rounded text-sm flex items-center">
                    <i class="fas fa-plus mr-1"></i>
                    <span>Добавить</span>
                </button>
            </div>
        </div>

        @if (isSearchPanelVisible)
        {
            <!-- Содержимое панели поиска -->
            <div class="mb-3">
                <!-- Более компактный макет фильтров -->
                <div class="flex flex-col sm:flex-row gap-2">
                    <div class="flex-grow">
                        <label for="searchQuery" class="block text-xs font-medium text-gray-700 mb-1">Поиск</label>
                        <div class="relative">
                            <input type="text" id="searchQuery"
                                   class="w-full border rounded-lg pl-8 pr-3 py-1 text-sm text-gray-700 focus:outline-none focus:ring-1 focus:ring-blue-500 shadow-sm"
                                   placeholder="Поиск по названию, типу..."
                                   @bind="searchQuery"
                                   @bind:event="oninput"/>
                            <div class="absolute inset-y-0 left-0 pl-2 flex items-center pointer-events-none">
                                <i class="fas fa-search text-gray-400 text-xs"></i>
                            </div>
                        </div>
                    </div>

                    <div class="w-full sm:w-48">
                        <label for="typeFilter" class="block text-xs font-medium text-gray-700 mb-1">Тип
                            заклинания</label>
                        <select id="typeFilter"
                                class="w-full border rounded-lg px-2 py-1 text-sm text-gray-700 focus:outline-none focus:ring-1 focus:ring-blue-500 shadow-sm"
                                @onchange="OnSpellTypeFilterChanged">
                            <option value="">Все типы</option>
                            @foreach (var typeValue in GetSpellTypes())
                            {
                                <option value="@typeValue">@typeValue</option>
                            }
                        </select>
                    </div>
                </div>
            </div>
        }
    </div>

    @if (filteredSpells.Count() == 0)
    {
        <div class="bg-white rounded-lg shadow-md p-4 text-center border border-gray-200">
            <div class="flex flex-col items-center justify-center py-6">
                <div class="rounded-full bg-gray-100 p-3 mb-4">
                    <i class="fas fa-spell-check text-gray-400 text-3xl"></i>
                </div>
                <p class="text-gray-600 text-base">
                    По вашему запросу не найдено ни одного заклинания. Попробуйте изменить параметры поиска.
                </p>
            </div>
        </div>
    }
    else
    {
        <div class="bg-white rounded-lg shadow-md overflow-hidden border border-gray-200">
            <!-- Таблица для средних и больших экранов с компактными ячейками -->
            <div class="block overflow-x-auto">
                <table class="w-full text-sm">
                    <thead>
                    <tr class="bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        <th class="px-3 py-2">Название</th>
                        <th class="px-3 py-2">Тип</th>
                        <th class="px-3 py-2 text-center">Действия</th>
                    </tr>
                    </thead>
                    <tbody class="divide-y divide-gray-200">
                    @foreach (var spell in filteredSpells)
                    {
                        <tr class="hover:bg-gray-50 cursor-pointer" @onclick="() => ToggleSpellDetails(spell)">
                            <td class="px-3 py-2 whitespace-nowrap">
                                <div class="flex items-center">
                                    <button @onclick:stopPropagation="true" @onclick="() => ToggleSpellDetails(spell)"
                                            class="text-blue-600 hover:text-blue-800 text-xs flex items-center mr-2">
                                        <i class="fas @(expandedSpellId == spell.Id ? "fa-chevron-up" : "fa-chevron-down")"></i>
                                    </button>
                                    <div class="text-sm font-medium text-gray-900">@spell.Name</div>
                                </div>
                            </td>
                            <td class="px-3 py-2 whitespace-nowrap">
                                <div class="text-sm text-gray-700">@spell.SpellType</div>
                            </td>
                            <td class="px-3 py-2 whitespace-nowrap text-center">
                                <div class="flex justify-center space-x-2">
                                    <button @onclick:stopPropagation="true" @onclick="() => ShowEditModal(spell)"
                                            class="text-yellow-600 hover:text-yellow-800 text-xs flex items-center p-1 rounded hover:bg-gray-100">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button @onclick:stopPropagation="true"
                                            @onclick="() => ShowDeleteConfirmation(spell)"
                                            class="text-red-600 hover:text-red-800 text-xs flex items-center p-1 rounded hover:bg-gray-100">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                        @if (expandedSpellId == spell.Id)
                        {
                            <tr>
                                <td colspan="3" class="px-0 py-0 bg-gray-50">
                                    <div class="p-4 space-y-5">
                                        @if (spell.AlternativeNames.Any())
                                        {
                                            <div>
                                                <h3 class="text-sm font-medium text-gray-500">Альтернативные
                                                    названия</h3>
                                                <div class="mt-2 grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-2">
                                                    @foreach (var altName in spell.AlternativeNames)
                                                    {
                                                        <div class="text-sm">@altName</div>
                                                    }
                                                </div>
                                            </div>
                                        }
                                        <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                                            <div>
                                                <h3 class="text-sm font-medium text-gray-500">Стоимость</h3>
                                                <p class="mt-1">@spell.Cost</p>
                                            </div>
                                            <div>
                                                <h3 class="text-sm font-medium text-gray-500">Время сотворения</h3>
                                                <p class="mt-1">@spell.CastingTime</p>
                                            </div>
                                        </div>
                                        <div>
                                            <h3 class="text-sm font-medium text-gray-500">Описание</h3>
                                            <p class="mt-1">@spell.Description</p>
                                        </div>
                                        <div class="pt-2">
                                            <button @onclick="() => ToggleSpellDetails(spell)"
                                                    class="text-blue-600 hover:text-blue-800 text-xs flex items-center">
                                                <i class="fas fa-chevron-up"></i>
                                            </button>
                                        </div>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                    </tbody>
                </table>
            </div>
        </div>
    }

    <!-- Tailwind Modal for adding/editing spell -->
    <div
        class="@(isEditModalVisible ? "fixed inset-0 z-50 overflow-auto bg-black bg-opacity-50 flex justify-center items-start pt-20" : "hidden")">
        <div class="bg-white rounded-lg shadow-xl overflow-hidden w-full max-w-4xl">
            <div
                class="p-5 border-b border-gray-200 bg-gradient-to-r from-blue-500 to-blue-600 text-white flex justify-between items-center">
                <h3 class="font-bold text-xl">@(isAdding ? "Добавить заклинание" : "Редактировать заклинание")</h3>
                <button @onclick="CloseEditModal" class="text-white hover:bg-blue-700 rounded-full p-1">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="p-6 bg-white max-h-[70vh] overflow-y-auto">
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="mb-4 p-3 bg-red-100 text-red-700 rounded-lg border border-red-300 flex items-start">
                        <i class="fas fa-exclamation-circle text-red-500 mr-2 mt-0.5"></i>
                        <span>@errorMessage</span>
                    </div>
                }
                <EditForm Model="@editingSpell" OnValidSubmit="HandleValidSubmit" Id="spell-edit-form">
                    <DataAnnotationsValidator/>
                    <Microsoft.AspNetCore.Components.Forms.ValidationSummary
                        class="mb-4 p-3 bg-red-100 text-red-700 rounded-lg border border-red-300"/>

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-5">
                        <div class="space-y-1">
                            <label for="name" class="block text-sm font-medium text-gray-700">Название</label>
                            <InputText id="name" @bind-Value="editingSpell.Name"
                                       class="w-full px-3 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 shadow-sm"/>
                            <ValidationMessage For="@(() => editingSpell.Name)" class="text-red-600 text-sm"/>
                        </div>

                        <div class="space-y-1">
                            <label for="spellType" class="block text-sm font-medium text-gray-700">Тип
                                заклинания</label>
                            <InputSelect id="spellType" @bind-Value="editingSpell.SpellType"
                                         class="w-full px-3 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 shadow-sm">
                                @foreach (var spellType in GetSpellTypes())
                                {
                                    <option value="@spellType">@spellType</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => editingSpell.SpellType)" class="text-red-600 text-sm"/>
                        </div>

                        <div class="space-y-1">
                            <label for="cost" class="block text-sm font-medium text-gray-700">Стоимость</label>
                            <InputText id="cost" @bind-Value="editingSpell.Cost"
                                       class="w-full px-3 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 shadow-sm"/>
                            <ValidationMessage For="@(() => editingSpell.Cost)" class="text-red-600 text-sm"/>
                        </div>

                        <div class="space-y-1">
                            <label for="castingTime" class="block text-sm font-medium text-gray-700">Время
                                сотворения</label>
                            <InputText id="castingTime" @bind-Value="editingSpell.CastingTime"
                                       class="w-full px-3 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 shadow-sm"/>
                            <ValidationMessage For="@(() => editingSpell.CastingTime)" class="text-red-600 text-sm"/>
                        </div>

                        <div class="md:col-span-2 space-y-1">
                            <label for="description" class="block text-sm font-medium text-gray-700">Описание</label>
                            <InputTextArea id="description" @bind-Value="editingSpell.Description" rows="4"
                                           class="w-full px-3 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 shadow-sm"/>
                            <ValidationMessage For="@(() => editingSpell.Description)" class="text-red-600 text-sm"/>
                        </div>

                        <div class="md:col-span-2 space-y-1 mt-2">
                            <label class="block text-sm font-medium text-gray-700">Альтернативные названия</label>
                            <div class="space-y-2">
                                @{
                                    // Use an indexed loop with local variables
                                    for (int i = 0; i < alternativeNames.Count; i++)
                                    {
                                        var index = i; // Capture the index
                                        var value = alternativeNames[i];

                                        <div class="flex space-x-2">
                                            <input type="text"
                                                   class="flex-grow px-3 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 shadow-sm"
                                                   placeholder="Альтернативное название"
                                                   value="@value"
                                                   @oninput="@(e => UpdateAlternativeName(index, e.Value?.ToString() ?? ""))"/>

                                            <button type="button"
                                                    class="bg-red-100 text-red-500 p-2 rounded-lg hover:bg-red-200 transition duration-150 ease-in-out"
                                                    @onclick="() => RemoveAlternativeName(index)">
                                                <i class="fas fa-times"></i>
                                            </button>
                                        </div>
                                    }
                                }
                                <button type="button"
                                        class="mt-2 flex items-center text-blue-600 hover:text-blue-800 text-sm"
                                        @onclick="AddAlternativeName">
                                    <i class="fas fa-plus mr-1"></i>
                                    <span>Добавить альтернативное название</span>
                                </button>
                            </div>
                        </div>
                    </div>
                </EditForm>
            </div>
            <div class="p-5 border-t border-gray-200 flex justify-end space-x-3 bg-gray-50">
                <button type="button"
                        class="px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition duration-150 ease-in-out shadow-sm"
                        @onclick="CloseEditModal">
                    Отмена
                </button>
                <button type="submit" form="spell-edit-form"
                        class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition duration-150 ease-in-out shadow-sm">
                    Сохранить
                </button>
            </div>
        </div>
    </div>

    <!-- Tailwind Modal for delete confirmation -->
    <div
        class="@(isDeleteModalVisible ? "fixed inset-0 z-50 overflow-auto bg-black bg-opacity-50 flex justify-center items-start pt-20" : "hidden")">
        <div class="bg-white rounded-lg shadow-xl overflow-hidden w-full max-w-md">
            <div
                class="p-5 border-b border-gray-200 bg-gradient-to-r from-red-500 to-red-600 text-white flex justify-between items-center">
                <h3 class="font-bold text-xl">Подтверждение удаления</h3>
                <button @onclick="CloseDeleteModal" class="text-white hover:bg-red-700 rounded-full p-1">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="p-6 bg-white max-h-[70vh] overflow-y-auto">
                <div class="flex items-start">
                    <div class="mr-3 text-red-500">
                        <i class="fas fa-exclamation-triangle text-2xl"></i>
                    </div>
                    <div>
                        <p class="text-gray-700 font-medium mb-2">Вы уверены, что хотите удалить это заклинание?</p>
                        @if (currentSpell != null)
                        {
                            <p class="text-gray-600 text-sm mb-1"><span
                                    class="font-medium">Название:</span> @currentSpell.Name</p>
                            <p class="text-gray-600 text-sm mb-1"><span
                                    class="font-medium">Тип:</span> @currentSpell.SpellType</p>
                        }
                        <p class="text-gray-500 text-xs mt-2">Это действие нельзя отменить.</p>
                    </div>
                </div>
            </div>
            <div class="p-5 border-t border-gray-200 flex justify-end space-x-3 bg-gray-50">
                <button type="button"
                        class="px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition duration-150 ease-in-out shadow-sm"
                        @onclick="CloseDeleteModal">
                    Отмена
                </button>
                <button type="button"
                        class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition duration-150 ease-in-out shadow-sm"
                        @onclick="DeleteSpell">
                    Удалить
                </button>
            </div>
        </div>
    </div>

    <!-- Tailwind Modal for error message -->
    <div
        class="@(isErrorModalVisible ? "fixed inset-0 z-50 overflow-auto bg-black bg-opacity-50 flex justify-center items-start pt-20" : "hidden")">
        <div class="bg-white rounded-lg shadow-xl overflow-hidden w-full max-w-md">
            <div
                class="p-5 border-b border-gray-200 bg-gradient-to-r from-yellow-500 to-yellow-600 text-white flex justify-between items-center">
                <h3 class="font-bold text-xl">Ошибка</h3>
                <button @onclick="CloseErrorModal" class="text-white hover:bg-yellow-700 rounded-full p-1">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="p-6 bg-white max-h-[70vh] overflow-y-auto">
                <div class="flex items-start">
                    <div class="mr-3 text-yellow-500">
                        <i class="fas fa-exclamation-circle text-2xl"></i>
                    </div>
                    <div>
                        <p class="text-gray-700">@errorMessage</p>
                    </div>
                </div>
            </div>
            <div class="p-5 border-t border-gray-200 flex justify-end space-x-3 bg-gray-50">
                <button type="button"
                        class="px-4 py-2 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700 transition duration-150 ease-in-out shadow-sm"
                        @onclick="CloseErrorModal">
                    Закрыть
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Spell>? spells;
    private IQueryable<Spell> filteredSpells => FilterSpells();
    private Spell? currentSpell;
    private Spell editingSpell = new() { Name = string.Empty, SpellType = string.Empty };
    private List<string> alternativeNames = [];
    private bool isSearchPanelVisible = true;
    private bool isEditModalVisible;
    private bool isDeleteModalVisible;
    private bool isErrorModalVisible;
    private bool isAdding;
    private string searchQuery = "";
    private string? selectedTypeFilter;
    private string errorMessage = "";
    private Guid? expandedSpellId;

    protected override async Task OnInitializedAsync()
    {
        await LoadSpells();
    }

    private async Task LoadSpells()
    {
        spells = await SpellService.GetAllSpellsAsync();
    }

    private List<string> GetSpellTypes()
    {
        return spells?
            .Select(s => s.SpellType)
            .Distinct()
            .OrderBy(t => t)
            .ToList() ?? [];
    }

    private void OnSpellTypeFilterChanged(ChangeEventArgs e)
    {
        selectedTypeFilter = e.Value?.ToString();
    }

    private IQueryable<Spell> FilterSpells()
    {
        if (spells == null)
        {
            return Enumerable.Empty<Spell>().AsQueryable();
        }

        var query = spells.AsQueryable();

        // Apply search filter
        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            query = query.Where(s =>
                (s.Name != null && s.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)) ||
                (s.SpellType != null && s.SpellType.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)) ||
                (s.Description != null && s.Description.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)) ||
                (s.AlternativeNames != null && s.AlternativeNames.Any(name =>
                    name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)))
            );
        }

        // Apply spell type filter
        if (!string.IsNullOrWhiteSpace(selectedTypeFilter))
        {
            query = query.Where(s => s.SpellType == selectedTypeFilter);
        }

        return query;
    }

    private void ToggleSearchPanel()
    {
        isSearchPanelVisible = !isSearchPanelVisible;
    }

    private void ResetFilters()
    {
        searchQuery = "";
        selectedTypeFilter = null;
    }

    private void ShowAddModal()
    {
        isAdding = true;
        editingSpell = new() { Name = string.Empty, SpellType = string.Empty };
        alternativeNames = [];
        isEditModalVisible = true;
    }

    private void ShowEditModal(Spell spell)
    {
        isAdding = false;
        editingSpell = new Spell
        {
            Id = spell.Id,
            Name = spell.Name,
            SpellType = spell.SpellType,
            Cost = spell.Cost,
            CastingTime = spell.CastingTime,
            Description = spell.Description,
            AlternativeNames = spell.AlternativeNames.ToList() ?? []
        };
        alternativeNames = editingSpell.AlternativeNames.ToList();
        isEditModalVisible = true;
    }

    private void CloseEditModal()
    {
        isEditModalVisible = false;
        editingSpell = new() { Name = string.Empty, SpellType = string.Empty };
        alternativeNames.Clear();
    }

    private void ShowDeleteConfirmation(Spell spell)
    {
        currentSpell = spell;
        isDeleteModalVisible = true;
    }

    private void CloseDeleteModal()
    {
        isDeleteModalVisible = false;
        currentSpell = null;
    }

    private void CloseErrorModal()
    {
        isErrorModalVisible = false;
    }

    private void AddAlternativeName()
    {
        alternativeNames.Add("");
    }

    private void RemoveAlternativeName(int index)
    {
        if (index >= 0 && index < alternativeNames.Count)
        {
            alternativeNames.RemoveAt(index);
        }
    }

    private void UpdateAlternativeName(int index, string? value)
    {
        if (index >= 0 && index < alternativeNames.Count && value != null)
        {
            alternativeNames[index] = value;
        }
    }

    private async Task HandleValidSubmit()
    {
        editingSpell.AlternativeNames = alternativeNames.Where(n => !string.IsNullOrWhiteSpace(n)).ToList();

        bool success;
        if (isAdding)
        {
            success = await SpellService.AddSpellAsync(editingSpell);
            if (!success)
            {
                errorMessage = "Не удалось добавить заклинание. Возможно, заклинание с таким названием уже существует.";
                isErrorModalVisible = true;
                return;
            }
        }
        else
        {
            success = await SpellService.UpdateSpellAsync(editingSpell);
            if (!success)
            {
                errorMessage = "Не удалось обновить заклинание.";
                isErrorModalVisible = true;
                return;
            }
        }

        CloseEditModal();
        await LoadSpells();
    }

    private async Task DeleteSpell()
    {
        if (currentSpell == null) return;

        var success = await SpellService.DeleteSpellAsync(currentSpell.Id);
        if (!success)
        {
            errorMessage = "Не удалось удалить заклинание.";
            isErrorModalVisible = true;
            CloseDeleteModal();
            return;
        }

        CloseDeleteModal();
        await LoadSpells();
    }

    private void ToggleSpellDetails(Spell spell)
    {
        if (expandedSpellId == spell.Id)
        {
            expandedSpellId = null;
        }
        else
        {
            expandedSpellId = spell.Id;
        }
    }

}
