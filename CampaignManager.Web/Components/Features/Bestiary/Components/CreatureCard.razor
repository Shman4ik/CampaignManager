@using CampaignManager.Web.Components.Features.Bestiary.Model
@using CampaignManager.Web.Extensions
@inject NavigationManager NavigationManager

<div class="bg-white shadow-md rounded-lg overflow-hidden hover:shadow-lg transition-shadow duration-300">
    <div class="p-6">
        <div class="flex justify-between items-start mb-2">
            <h2 class="text-xl font-semibold">@Creature.Name</h2>
            <div class="flex space-x-1">
                <button @onclick="() => EditCreature(Creature)" title="Изменить"
                        class="text-gray-600 hover:text-gray-800 p-1 rounded hover:bg-gray-100">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24"
                         stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                              d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
                    </svg>
                </button>
                <button @onclick="() => OnDelete.InvokeAsync(Creature)" title="Удалить"
                        class="text-red-600 hover:text-red-800 p-1 rounded hover:bg-red-50">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24"
                         stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                              d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                    </svg>
                </button>
            </div>
        </div>
        <div class="text-sm text-gray-600 mb-3">
            <span class="inline-block bg-blue-100 text-blue-800 rounded-full px-3 py-1 text-xs">
                @Creature.Type.ToRussianString()
            </span>
        </div>

        <!-- Characteristics and Image row -->
        <div class="flex flex-col md:flex-row gap-6 mb-4">
            <!-- Characteristics section with fixed width -->
            <div class="md:w-2/3">
                <h3 class="font-medium mb-1">Характеристики:</h3>
                <div class="grid grid-cols-2 text-sm gap-x-4">
                    @foreach (var charItem in Characteristics.Where(c => c.Value != null &&
                                                                         !string.IsNullOrWhiteSpace(c.Value.ToString())))
                    {
                        <div>
                            <CharacteristicItem Label="@charItem.Label" Value="@charItem.Value"
                                                DiceRoll="@charItem.DiceRoll"/>
                        </div>
                    }
                </div>
            </div>

            <!-- Image with fixed width -->
            @if (!string.IsNullOrEmpty(Creature.ImageUrl))
            {
                <div class="md:w-1/3 flex items-center justify-center">
                    <img src="@GetImageUrl(Creature.ImageUrl)" alt="@Creature.Name"
                         class="max-w-full h-auto max-h-48 object-contain rounded" loading="lazy"/>
                </div>
            }
            else
            {
                <div class="md:w-1/3"></div>
                <!-- Empty placeholder to maintain layout when no image -->
            }
        </div>

        <!-- Full width description section -->
        <div
            class="w-full mt-4 text-gray-700 text-sm @(string.IsNullOrEmpty(Creature.Description) ? "" : "overflow-y-auto pr-2 custom-scrollbar")">
            <h3 class="font-medium mb-1 text-sm font-semibold">Описание:</h3>
            @(string.IsNullOrEmpty(Creature.Description)
                ? "Описание отсутствует."
                : Creature.Description)
        </div>

        <!-- Full width special abilities section -->
        @if (Creature.SpecialAbilities.Count > 0)
        {
            <div class="w-full mt-4">
                <h3 class="font-medium mb-1 text-sm font-semibold">Особые умения:</h3>
                <div
                    class="text-sm text-gray-700 @(Creature.SpecialAbilities.Count > 3 ? "overflow-y-auto pr-2 custom-scrollbar" : "")">
                    @foreach (var ability in Creature.SpecialAbilities)
                    {
                        <div class="mb-1"><span class="font-semibold">@ability.Key:</span> @ability.Value</div>
                    }
                </div>
            </div>
        }

        <!-- Full width combat descriptions section -->
        @if (Creature.CombatDescriptions.Count > 0)
        {
            <div class="w-full mt-4">
                <h3 class="font-medium mb-1 text-sm font-semibold">Тактика в бою:</h3>
                <div
                    class="text-sm text-gray-700 @(Creature.CombatDescriptions.Count > 3 ? "overflow-y-auto pr-2 custom-scrollbar" : "")">
                    @foreach (var desc in Creature.CombatDescriptions)
                    {
                        <div class="mb-1"><span class="font-semibold">@desc.Key:</span> @desc.Value</div>
                    }
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public required Creature Creature { get; set; }

    [Parameter] public EventCallback<Creature> OnDelete { get; set; }

    private List<(string Label, object? Value, string? DiceRoll)> Characteristics { get; set; } = new();

    protected override void OnParametersSet()
    {
        var c = Creature.CreatureCharacteristics;
        Characteristics =
        [
            ("СИЛ", c.Strength?.Value, c.Strength?.DiceRoll),
            ("ВЫН", c.Constitution?.Value, c.Constitution?.DiceRoll),
            ("ТЕЛ", c.Size?.Value, c.Size?.DiceRoll),
            ("ЛВК", c.Dexterity?.Value, c.Dexterity?.DiceRoll),
            ("ИНТ", c.Intelligence?.Value, c.Intelligence?.DiceRoll),
            ("МОЩ", c.Power?.Value, c.Power?.DiceRoll),
            ("НАР", c.Appearance?.Value, c.Appearance?.DiceRoll),
            ("ОБР", c.Education?.Value, c.Education?.DiceRoll),
            ("Инициатива", c.Initiative, null),
            ("БкУ", c.AverageBonusToHit, null),
            ("Комплекция", c.AverageComplexity, null),
            ("Скорость", c.Speed, null),
            ("ПЗ", c.HealPoint, null),
            ("ПМ", c.ManaPoint, null)
        ];
        base.OnParametersSet(); // Ensure base method is called
    }

    private string GetImageUrl(string? imageUrl)
    {
        if (string.IsNullOrEmpty(imageUrl))
            return string.Empty;
        return imageUrl.StartsWith("https://") ? imageUrl : $"/api/minio/image/{imageUrl}";
    }

    // Редактирование существа
    private void EditCreature(Creature creature)
    {
        NavigationManager.NavigateTo($"/bestiary/creatures/edit/{creature.Id}");
    }

}
