@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@implements IDisposable

<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
            <header class="bg-white shadow-sm">
                <div class="max-w-7xl mx-auto py-4 px-4 sm:px-6 lg:px-8">
                    <div class="flex justify-between items-center">
                        <div class="flex items-center">
                            <h1 class="text-2xl font-semibold text-gray-900 mr-8">Менеджер кампаний</h1>

                            <nav class="flex space-x-4">
                                <a href="/" class="text-gray-600 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium">
                                    Главная
                                </a>
                                <a href="/campaign"
                                   class="text-gray-600 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium">
                                    Мои кампании
                                </a>
                                <a href="/character"
                                   class="text-gray-600 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium">
                                    Создать персонажа
                                </a>
                            </nav>
                        </div>

                        <div class="flex items-center">
                            <span class="text-gray-700 mr-4">@context.User.Identity?.Name</span>
                            <button @onclick="LogoutAsync"
                                    class="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded">
                                Выйти
                            </button>
                        </div>
                    </div>
                </div>
            </header>
        </Authorized>
        <NotAuthorized>
            <header class="bg-white shadow-sm">
                <div class="max-w-7xl mx-auto py-4 px-4 sm:px-6 lg:px-8">
                    <div class="flex justify-between items-center">
                        <div class="flex items-center">
                            <h1 class="text-2xl font-semibold text-gray-900 mr-8">Менеджер кампаний</h1>
                        </div>

                        <div class="flex items-center">
                            <a href="/api/account/login" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded">
                                Войти через Google
                            </a>
                        </div>
                    </div>
                </div>
            </header>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    private AuthenticationStateChangedHandler? authStateChangedHandler;

    protected override void OnInitialized()
    {
        // Подписываемся на изменения состояния аутентификации
        authStateChangedHandler = async (Task<AuthenticationState> task) => 
        {
            var authState = await task;
            var isAuthenticated = authState?.User?.Identity?.IsAuthenticated ?? false;
            Console.WriteLine($"Auth state changed: IsAuthenticated={isAuthenticated}, Name={authState?.User?.Identity?.Name ?? "null"}");
            
            // Выводим доступные claims для отладки
            if (isAuthenticated)
            {
                foreach (var claim in authState.User.Claims)
                {
                    Console.WriteLine($"Claim: {claim.Type} = {claim.Value}");
                }
            }
            
            await InvokeAsync(StateHasChanged);
        };
        
        AuthenticationStateProvider.AuthenticationStateChanged += authStateChangedHandler;
    }

    public void Dispose()
    {
        if (authStateChangedHandler != null)
        {
            AuthenticationStateProvider.AuthenticationStateChanged -= authStateChangedHandler;
        }
    }

    private void LogoutAsync()
    {
        NavigationManager.NavigateTo("api/account/logout", true);
    }
}