@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<header class="bg-white shadow-sm">
    <div class="max-w-7xl mx-auto py-4 px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between items-center">
            <div class="flex items-center">
                <h1 class="text-2xl font-semibold text-gray-900 mr-8">Менеджер кампаний</h1>

                @if (authState?.User?.Identity?.IsAuthenticated == true)
                {
                    <nav class="flex space-x-4">
                        <a href="/" class="text-gray-600 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium">
                            Главная
                        </a>
                        <a href="/campaign" class="text-gray-600 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium">
                            Мои кампании
                        </a>
                        <a href="/character" class="text-gray-600 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium">
                            Создать персонажа
                        </a>
                    </nav>
                }
            </div>

            <div class="flex items-center">
                @if (authState?.User?.Identity?.IsAuthenticated == true)
                {
                    <span class="text-gray-700 mr-4">@authState.User.Identity.Name</span>
                    <button @onclick="LogoutAsync" class="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded">
                        Выйти
                    </button>
                }
                else
                {
                    <button @onclick="LoginAsync" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded">
                        Войти через Google
                    </button>
                }
            </div>
        </div>
    </div>
</header>

@code {
    private AuthenticationState authState;

    protected override async Task OnInitializedAsync()
    {
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    }

    private async Task LoginAsync()
    {
        NavigationManager.NavigateTo("api/account/login", forceLoad: true);
    }

    private async Task LogoutAsync()
    {
        NavigationManager.NavigateTo("api/account/logout", forceLoad: true);
    }
}