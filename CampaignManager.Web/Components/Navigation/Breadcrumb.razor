@using CampaignManager.Web.Models.Navigation
@using CampaignManager.Web.Services
@inject NavigationManager NavigationManager
@inject NavigationService NavigationService
@implements IDisposable

@if (breadcrumbs.Any())
{
    <nav class="bg-gray-50 border-b border-gray-200 py-3" aria-label="Breadcrumb">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <ol class="flex items-center space-x-2 text-sm">
                <li>
                    <NavLink href="/" class="text-gray-500 hover:text-gray-700 transition-colors">
                        <i class="fas fa-home"></i>
                    </NavLink>
                </li>
                @foreach (var breadcrumb in breadcrumbs)
                {
                    <li class="flex items-center">
                        <i class="fas fa-chevron-right text-gray-400 mx-2 text-xs"></i>
                        @if (breadcrumb == breadcrumbs.Last())
                        {
                            <span class="text-gray-900 font-medium">@breadcrumb.Title</span>
                        }
                        else
                        {
                            <NavLink href="@breadcrumb.Href" class="text-gray-500 hover:text-gray-700 transition-colors">
                                @breadcrumb.Title
                            </NavLink>
                        }
                    </li>
                }
            </ol>
        </div>
    </nav>
}

@code {
    private List<NavigationItem> breadcrumbs = new();

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
        UpdateBreadcrumbs();
    }

    private void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        UpdateBreadcrumbs();
        StateHasChanged();
    }

    private void UpdateBreadcrumbs()
    {
        var currentPath = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        if (string.IsNullOrEmpty(currentPath)) currentPath = "/";
        
        breadcrumbs.Clear();
        
        var navigationItems = NavigationService.GetNavigationItems();
        var foundItem = FindNavigationItem(navigationItems, "/" + currentPath);
        
        if (foundItem != null)
        {
            BuildBreadcrumbPath(navigationItems, foundItem, breadcrumbs);
        }
    }

    private NavigationItem? FindNavigationItem(List<NavigationItem> items, string path)
    {
        foreach (var item in items)
        {
            if (item.Href == path)
                return item;
                
            if (item.Children != null)
            {
                var found = FindNavigationItem(item.Children, path);
                if (found != null)
                    return found;
            }
        }
        return null;
    }

    private bool BuildBreadcrumbPath(List<NavigationItem> items, NavigationItem target, List<NavigationItem> path)
    {
        foreach (var item in items)
        {
            if (item == target)
            {
                path.Add(item);
                return true;
            }
            
            if (item.Children != null)
            {
                path.Add(item);
                if (BuildBreadcrumbPath(item.Children, target, path))
                    return true;
                path.RemoveAt(path.Count - 1);
            }
        }
        return false;
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
