This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-13T15:55:28.958Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.dockerignore
.gitattributes
.gitignore
CampaignManager.AppHost/appsettings.json
CampaignManager.AppHost/CampaignManager.AppHost.csproj
CampaignManager.AppHost/Program.cs
CampaignManager.AppHost/Properties/launchSettings.json
CampaignManager.ServiceDefaults/CampaignManager.ServiceDefaults.csproj
CampaignManager.ServiceDefaults/Extensions.cs
CampaignManager.slnx
CampaignManager.Web/appsettings.json
CampaignManager.Web/Authorization/ApplicationDbContext.cs
CampaignManager.Web/Authorization/RoleService.cs
CampaignManager.Web/CampaignManager.Web.csproj
CampaignManager.Web/Components/_Imports.razor
CampaignManager.Web/Components/App.razor
CampaignManager.Web/Components/CharacterComponents/CharacteristicsComponent.razor
CampaignManager.Web/Components/CharacterComponents/GamesComponent.razor
CampaignManager.Web/Components/CharacterComponents/PersonalInfoComponent.razor
CampaignManager.Web/Components/CharacterComponents/SkillComponent.razor
CampaignManager.Web/Components/CharacterComponents/WeaponsComponent.razor
CampaignManager.Web/Components/Layout/MainLayout.razor
CampaignManager.Web/Components/Navigation/TopBar.razor
CampaignManager.Web/Components/Pages/CharacterPage.razor
CampaignManager.Web/Components/Pages/Error.razor
CampaignManager.Web/Components/Pages/Home.razor
CampaignManager.Web/Components/Routes.razor
CampaignManager.Web/Components/UserComponents/RegisterUserComponent.razor
CampaignManager.Web/Model/Authorozation.cs
CampaignManager.Web/Model/CampaignModels.cs
CampaignManager.Web/Model/CharacterModels.cs
CampaignManager.Web/Program.cs
CampaignManager.Web/Properties/launchSettings.json
CampaignManager.Web/Services/CampaignService.cs
CampaignManager.Web/Services/CharacterGenerationService.cs
CampaignManager.Web/Services/CharacterService.cs
CampaignManager.Web/Services/UserRegistrationService.cs
Dockerfile
LICENSE.txt

================================================================
Repository Files
================================================================

================
File: .dockerignore
================
**/.classpath
**/.dockerignore
**/.env
**/.git
**/.gitignore
**/.project
**/.settings
**/.toolstarget
**/.vs
**/.vscode
**/*.*proj.user
**/*.dbmdl
**/*.jfm
**/azds.yaml
**/bin
**/charts
**/docker-compose*
**/Dockerfile*
**/node_modules
**/npm-debug.log
**/obj
**/secrets.dev.yaml
**/values.dev.yaml
LICENSE
README.md
!**/.gitignore
!.git/HEAD
!.git/config
!.git/packed-refs
!.git/refs/heads/**

================
File: .gitattributes
================
###############################################################################
# Set default behavior to automatically normalize line endings.
###############################################################################
* text=auto

###############################################################################
# Set default behavior for command prompt diff.
#
# This is need for earlier builds of msysgit that does not have it on by
# default for csharp files.
# Note: This is only used by command line
###############################################################################
#*.cs     diff=csharp

###############################################################################
# Set the merge driver for project and solution files
#
# Merging from the command prompt will add diff markers to the files if there
# are conflicts (Merging from VS is not affected by the settings below, in VS
# the diff markers are never inserted). Diff markers may cause the following 
# file extensions to fail to load in VS. An alternative would be to treat
# these files as binary and thus will always conflict and require user
# intervention with every merge. To do so, just uncomment the entries below
###############################################################################
#*.sln       merge=binary
#*.csproj    merge=binary
#*.vbproj    merge=binary
#*.vcxproj   merge=binary
#*.vcproj    merge=binary
#*.dbproj    merge=binary
#*.fsproj    merge=binary
#*.lsproj    merge=binary
#*.wixproj   merge=binary
#*.modelproj merge=binary
#*.sqlproj   merge=binary
#*.wwaproj   merge=binary

###############################################################################
# behavior for image files
#
# image files are treated as binary by default.
###############################################################################
#*.jpg   binary
#*.png   binary
#*.gif   binary

###############################################################################
# diff behavior for common document formats
# 
# Convert binary document formats to text before diffing them. This feature
# is only available from the command line. Turn it on by uncommenting the 
# entries below.
###############################################################################
#*.doc   diff=astextplain
#*.DOC   diff=astextplain
#*.docx  diff=astextplain
#*.DOCX  diff=astextplain
#*.dot   diff=astextplain
#*.DOT   diff=astextplain
#*.pdf   diff=astextplain
#*.PDF   diff=astextplain
#*.rtf   diff=astextplain
#*.RTF   diff=astextplain

================
File: .gitignore
================
## Ignore Visual Studio temporary files, build results, and
## files generated by popular Visual Studio add-ons.
##
## Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore

# User-specific files
*.rsuser
*.suo
*.user
*.userosscache
*.sln.docstates

# User-specific files (MonoDevelop/Xamarin Studio)
*.userprefs

# Mono auto generated files
mono_crash.*

# Build results
[Dd]ebug/
[Dd]ebugPublic/
[Rr]elease/
[Rr]eleases/
x64/
x86/
[Ww][Ii][Nn]32/
[Aa][Rr][Mm]/
[Aa][Rr][Mm]64/
bld/
[Bb]in/
[Oo]bj/
[Oo]ut/
[Ll]og/
[Ll]ogs/

# Visual Studio 2015/2017 cache/options directory
.vs/
# Uncomment if you have tasks that create the project's static files in wwwroot
#wwwroot/

# Visual Studio 2017 auto generated files
Generated\ Files/

# MSTest test Results
[Tt]est[Rr]esult*/
[Bb]uild[Ll]og.*

# NUnit
*.VisualState.xml
TestResult.xml
nunit-*.xml

# Build Results of an ATL Project
[Dd]ebugPS/
[Rr]eleasePS/
dlldata.c

# Benchmark Results
BenchmarkDotNet.Artifacts/

# .NET Core
project.lock.json
project.fragment.lock.json
artifacts/

# ASP.NET Scaffolding
ScaffoldingReadMe.txt

# StyleCop
StyleCopReport.xml

# Files built by Visual Studio
*_i.c
*_p.c
*_h.h
*.ilk
*.meta
*.obj
*.iobj
*.pch
*.pdb
*.ipdb
*.pgc
*.pgd
*.rsp
*.sbr
*.tlb
*.tli
*.tlh
*.tmp
*.tmp_proj
*_wpftmp.csproj
*.log
*.vspscc
*.vssscc
.builds
*.pidb
*.svclog
*.scc

# Chutzpah Test files
_Chutzpah*

# Visual C++ cache files
ipch/
*.aps
*.ncb
*.opendb
*.opensdf
*.sdf
*.cachefile
*.VC.db
*.VC.VC.opendb

# Visual Studio profiler
*.psess
*.vsp
*.vspx
*.sap

# Visual Studio Trace Files
*.e2e

# TFS 2012 Local Workspace
$tf/

# Guidance Automation Toolkit
*.gpState

# ReSharper is a .NET coding add-in
_ReSharper*/
*.[Rr]e[Ss]harper
*.DotSettings.user

# TeamCity is a build add-in
_TeamCity*

# DotCover is a Code Coverage Tool
*.dotCover

# AxoCover is a Code Coverage Tool
.axoCover/*
!.axoCover/settings.json

# Coverlet is a free, cross platform Code Coverage Tool
coverage*.json
coverage*.xml
coverage*.info

# Visual Studio code coverage results
*.coverage
*.coveragexml

# NCrunch
_NCrunch_*
.*crunch*.local.xml
nCrunchTemp_*

# MightyMoose
*.mm.*
AutoTest.Net/

# Web workbench (sass)
.sass-cache/

# Installshield output folder
[Ee]xpress/

# DocProject is a documentation generator add-in
DocProject/buildhelp/
DocProject/Help/*.HxT
DocProject/Help/*.HxC
DocProject/Help/*.hhc
DocProject/Help/*.hhk
DocProject/Help/*.hhp
DocProject/Help/Html2
DocProject/Help/html

# Click-Once directory
publish/

# Publish Web Output
*.[Pp]ublish.xml
*.azurePubxml
# Note: Comment the next line if you want to checkin your web deploy settings,
# but database connection strings (with potential passwords) will be unencrypted
*.pubxml
*.publishproj

# Microsoft Azure Web App publish settings. Comment the next line if you want to
# checkin your Azure Web App publish settings, but sensitive information contained
# in these scripts will be unencrypted
PublishScripts/

# NuGet Packages
*.nupkg
# NuGet Symbol Packages
*.snupkg
# The packages folder can be ignored because of Package Restore
**/[Pp]ackages/*
# except build/, which is used as an MSBuild target.
!**/[Pp]ackages/build/
# Uncomment if necessary however generally it will be regenerated when needed
#!**/[Pp]ackages/repositories.config
# NuGet v3's project.json files produces more ignorable files
*.nuget.props
*.nuget.targets

# Microsoft Azure Build Output
csx/
*.build.csdef

# Microsoft Azure Emulator
ecf/
rcf/

# Windows Store app package directories and files
AppPackages/
BundleArtifacts/
Package.StoreAssociation.xml
_pkginfo.txt
*.appx
*.appxbundle
*.appxupload

# Visual Studio cache files
# files ending in .cache can be ignored
*.[Cc]ache
# but keep track of directories ending in .cache
!?*.[Cc]ache/

# Others
ClientBin/
~$*
*~
*.dbmdl
*.dbproj.schemaview
*.jfm
*.pfx
*.publishsettings
orleans.codegen.cs

# Including strong name files can present a security risk
# (https://github.com/github/gitignore/pull/2483#issue-259490424)
#*.snk

# Since there are multiple workflows, uncomment next line to ignore bower_components
# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)
#bower_components/

# RIA/Silverlight projects
Generated_Code/

# Backup & report files from converting an old project file
# to a newer Visual Studio version. Backup files are not needed,
# because we have git ;-)
_UpgradeReport_Files/
Backup*/
UpgradeLog*.XML
UpgradeLog*.htm
ServiceFabricBackup/
*.rptproj.bak

# SQL Server files
*.mdf
*.ldf
*.ndf

# Business Intelligence projects
*.rdl.data
*.bim.layout
*.bim_*.settings
*.rptproj.rsuser
*- [Bb]ackup.rdl
*- [Bb]ackup ([0-9]).rdl
*- [Bb]ackup ([0-9][0-9]).rdl

# Microsoft Fakes
FakesAssemblies/

# GhostDoc plugin setting file
*.GhostDoc.xml

# Node.js Tools for Visual Studio
.ntvs_analysis.dat
node_modules/

# Visual Studio 6 build log
*.plg

# Visual Studio 6 workspace options file
*.opt

# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)
*.vbw

# Visual Studio LightSwitch build output
**/*.HTMLClient/GeneratedArtifacts
**/*.DesktopClient/GeneratedArtifacts
**/*.DesktopClient/ModelManifest.xml
**/*.Server/GeneratedArtifacts
**/*.Server/ModelManifest.xml
_Pvt_Extensions

# Paket dependency manager
.paket/paket.exe
paket-files/

# FAKE - F# Make
.fake/

# CodeRush personal settings
.cr/personal

# Python Tools for Visual Studio (PTVS)
__pycache__/
*.pyc

# Cake - Uncomment if you are using it
# tools/**
# !tools/packages.config

# Tabs Studio
*.tss

# Telerik's JustMock configuration file
*.jmconfig

# BizTalk build output
*.btp.cs
*.btm.cs
*.odx.cs
*.xsd.cs

# OpenCover UI analysis results
OpenCover/

# Azure Stream Analytics local run output
ASALocalRun/

# MSBuild Binary and Structured Log
*.binlog

# NVidia Nsight GPU debugger configuration file
*.nvuser

# MFractors (Xamarin productivity tool) working folder
.mfractor/

# Local History for Visual Studio
.localhistory/

# BeatPulse healthcheck temp database
healthchecksdb

# Backup folder for Package Reference Convert tool in Visual Studio 2017
MigrationBackup/

# Ionide (cross platform F# VS Code tools) working folder
.ionide/

# Fody - auto-generated XML schema
FodyWeavers.xsd

**/*appsettings.*.json
**/appsettings.Development.json
/.idea/.idea.CoC.7e/.idea
/CoC.7e.Web/appsettings.Development.json
/.idea

================
File: CampaignManager.AppHost/appsettings.json
================
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning",
      "Aspire.Hosting.Dcp": "Warning"
    }
  }
}

================
File: CampaignManager.AppHost/CampaignManager.AppHost.csproj
================
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <IsAspireHost>true</IsAspireHost>
    <UserSecretsId>0a8959ac-9064-4ddb-b0b3-58037f080382</UserSecretsId>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Aspire.Hosting.AppHost" Version="8.2.1" />
    <PackageReference Include="Aspire.Hosting.PostgreSQL" Version="8.2.1" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\CampaignManager.Web\CampaignManager.Web.csproj" />
  </ItemGroup>

</Project>

================
File: CampaignManager.AppHost/Program.cs
================
var builder = DistributedApplication.CreateBuilder(args);

builder.AddProject<Projects.CampaignManager_Web>("webfrontend")
    .WithExternalHttpEndpoints();

builder.Build().Run();

================
File: CampaignManager.AppHost/Properties/launchSettings.json
================
{
  "$schema": "https://json.schemastore.org/launchsettings.json",
  "profiles": {
    "https": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": true,
      "applicationUrl": "https://localhost:17013;http://localhost:15030",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development",
        "DOTNET_ENVIRONMENT": "Development",
        "DOTNET_DASHBOARD_OTLP_ENDPOINT_URL": "https://localhost:21117",
        "DOTNET_RESOURCE_SERVICE_ENDPOINT_URL": "https://localhost:22072"
      }
    },
    "http": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": true,
      "applicationUrl": "http://localhost:15030",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development",
        "DOTNET_ENVIRONMENT": "Development",
        "DOTNET_DASHBOARD_OTLP_ENDPOINT_URL": "http://localhost:19069",
        "DOTNET_RESOURCE_SERVICE_ENDPOINT_URL": "http://localhost:20166"
      }
    }
  }
}

================
File: CampaignManager.ServiceDefaults/CampaignManager.ServiceDefaults.csproj
================
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <IsAspireSharedProject>true</IsAspireSharedProject>
  </PropertyGroup>

  <ItemGroup>
    <FrameworkReference Include="Microsoft.AspNetCore.App" />

    <PackageReference Include="Microsoft.Extensions.Http.Resilience" Version="8.10.0" />
    <PackageReference Include="Microsoft.Extensions.ServiceDiscovery" Version="8.2.1" />
    <PackageReference Include="OpenTelemetry.Exporter.OpenTelemetryProtocol" Version="1.9.0" />
    <PackageReference Include="OpenTelemetry.Extensions.Hosting" Version="1.9.0" />
    <PackageReference Include="OpenTelemetry.Instrumentation.AspNetCore" Version="1.9.0" />
    <PackageReference Include="OpenTelemetry.Instrumentation.Http" Version="1.9.0" />
    <PackageReference Include="OpenTelemetry.Instrumentation.Runtime" Version="1.9.0" />
  </ItemGroup>

</Project>

================
File: CampaignManager.ServiceDefaults/Extensions.cs
================
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Diagnostics.HealthChecks;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Diagnostics.HealthChecks;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using OpenTelemetry;
using OpenTelemetry.Metrics;
using OpenTelemetry.Trace;

namespace CampaignManager.ServiceDefaults;

// Adds common .NET Aspire services: service discovery, resilience, health checks, and OpenTelemetry.
// This project should be referenced by each service project in your solution.
// To learn more about using this project, see https://aka.ms/dotnet/aspire/service-defaults
public static class Extensions
{
    public static IHostApplicationBuilder AddServiceDefaults(this IHostApplicationBuilder builder)
    {
        builder.ConfigureOpenTelemetry();

        builder.AddDefaultHealthChecks();

        builder.Services.AddServiceDiscovery();

        builder.Services.ConfigureHttpClientDefaults(http =>
        {
            // Turn on resilience by default
            http.AddStandardResilienceHandler();

            // Turn on service discovery by default
            http.AddServiceDiscovery();
        });

        return builder;
    }

    public static IHostApplicationBuilder ConfigureOpenTelemetry(this IHostApplicationBuilder builder)
    {
        builder.Logging.AddOpenTelemetry(logging =>
        {
            logging.IncludeFormattedMessage = true;
            logging.IncludeScopes = true;
        });

        builder.Services.AddOpenTelemetry()
            .WithMetrics(metrics =>
            {
                metrics.AddAspNetCoreInstrumentation()
                    .AddHttpClientInstrumentation()
                    .AddRuntimeInstrumentation();
            })
            .WithTracing(tracing =>
            {
                tracing.AddAspNetCoreInstrumentation()
                    // Uncomment the following line to enable gRPC instrumentation (requires the OpenTelemetry.Instrumentation.GrpcNetClient package)
                    //.AddGrpcClientInstrumentation()
                    .AddHttpClientInstrumentation();
            });

        builder.AddOpenTelemetryExporters();

        return builder;
    }

    private static IHostApplicationBuilder AddOpenTelemetryExporters(this IHostApplicationBuilder builder)
    {
        var useOtlpExporter = !string.IsNullOrWhiteSpace(builder.Configuration["OTEL_EXPORTER_OTLP_ENDPOINT"]);

        if (useOtlpExporter)
        {
            builder.Services.AddOpenTelemetry().UseOtlpExporter();
        }

        // Uncomment the following lines to enable the Azure Monitor exporter (requires the Azure.Monitor.OpenTelemetry.AspNetCore package)
        //if (!string.IsNullOrEmpty(builder.Configuration["APPLICATIONINSIGHTS_CONNECTION_STRING"]))
        //{
        //    builder.Services.AddOpenTelemetry()
        //       .UseAzureMonitor();
        //}

        return builder;
    }

    public static IHostApplicationBuilder AddDefaultHealthChecks(this IHostApplicationBuilder builder)
    {
        builder.Services.AddHealthChecks()
            // Add a default liveness check to ensure app is responsive
            .AddCheck("self", () => HealthCheckResult.Healthy(), ["live"]);

        return builder;
    }

    public static WebApplication MapDefaultEndpoints(this WebApplication app)
    {
        // Adding health checks endpoints to applications in non-development environments has security implications.
        // See https://aka.ms/dotnet/aspire/healthchecks for details before enabling these endpoints in non-development environments.
        if (app.Environment.IsDevelopment())
        {
            // All health checks must pass for app to be considered ready to accept traffic after starting
            app.MapHealthChecks("/health");

            // Only health checks tagged with the "live" tag must pass for app to be considered alive
            app.MapHealthChecks("/alive", new HealthCheckOptions
            {
                Predicate = r => r.Tags.Contains("live")
            });
        }

        return app;
    }
}

================
File: CampaignManager.slnx
================
<Solution>
  <Properties Name="Visual Studio">
    <Property Name="OpenWith" Value="Visual Studio Version 17" />
  </Properties>
  <Project Path="CampaignManager.Web\CampaignManager.Web.csproj" Type="C#" />
  <Project Path="CampaignManager.AppHost\CampaignManager.AppHost.csproj" Type="C#" />
  <Project Path="CampaignManager.ServiceDefaults\CampaignManager.ServiceDefaults.csproj" Type="C#" />
</Solution>

================
File: CampaignManager.Web/appsettings.json
================
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*"  
}

================
File: CampaignManager.Web/Authorization/ApplicationDbContext.cs
================
using CampaignManager.Web.Model;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;

namespace CampaignManager.Web.Authorization;

public class ApplicationDbContext : IdentityDbContext<ApplicationUser>
{
    public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
        : base(options)
    {
        Database.EnsureCreated();
        Database.Migrate();
    }

    public DbSet<ApplicationUser> ApplicationUsers { get; set; }
    
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        base.OnModelCreating(modelBuilder);
        modelBuilder.HasDefaultSchema("Dev");
    }
}

================
File: CampaignManager.Web/Authorization/RoleService.cs
================
using CampaignManager.Web.Model;
using Microsoft.AspNetCore.Identity;

namespace CampaignManager.Web.Authorization;

public interface IRoleService
{
    Task AssignRoleToUser(string userId, PlayerRole role);
    Task<PlayerRole?> GetUserRole(string userId);
}

public class RoleService : IRoleService
{
    private readonly UserManager<ApplicationUser> _userManager;

    public RoleService(UserManager<ApplicationUser> userManager)
    {
        _userManager = userManager;
    }

    public async Task AssignRoleToUser(string userId, PlayerRole role)
    {
        var user = await _userManager.FindByIdAsync(userId);
        if (user != null)
        {
            user.Role = role;
            await _userManager.UpdateAsync(user);
        }
    }

    public async Task<PlayerRole?> GetUserRole(string userId)
    {
        var user = await _userManager.FindByIdAsync(userId);
        return user?.Role;
    }
}

================
File: CampaignManager.Web/CampaignManager.Web.csproj
================
<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <UserSecretsId>58d5bb78-9b31-4d79-9695-3827330eab4b</UserSecretsId>
    <DockerDefaultTargetOS>Linux</DockerDefaultTargetOS>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Blazorise.Icons.FontAwesome" Version="1.6.1" />
    <PackageReference Include="Blazorise.Tailwind" Version="1.6.1" />
    <PackageReference Include="Microsoft.AspNetCore.Authentication.Google" Version="8.0.10" />
    <PackageReference Include="Microsoft.AspNetCore.Identity.EntityFrameworkCore" Version="8.0.10" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="8.0.10">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.VisualStudio.Azure.Containers.Tools.Targets" Version="1.21.0" />
    <PackageReference Include="Npgsql.EntityFrameworkCore.PostgreSQL" Version="8.0.8" />
    <PackageReference Include="Swashbuckle.AspNetCore" Version="6.8.1" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\CampaignManager.ServiceDefaults\CampaignManager.ServiceDefaults.csproj" />
  </ItemGroup>

  <ItemGroup>
    <_ContentIncludedByDefault Remove="wwwroot\bootstrap\bootstrap.min.css" />
    <_ContentIncludedByDefault Remove="wwwroot\bootstrap\bootstrap.min.css.map" />
  </ItemGroup>

</Project>

================
File: CampaignManager.Web/Components/_Imports.razor
================
@using System.Net.Http
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using static Microsoft.AspNetCore.Components.Web.RenderMode
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.AspNetCore.OutputCaching
@using Microsoft.JSInterop
@using CampaignManager.Web
@using CampaignManager.Web.Components
@using CampaignManager.Web.Model
@using Blazorise

================
File: CampaignManager.Web/Components/App.razor
================
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link rel="icon" type="image/png" href="favicon.png" />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&amp;display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://unpkg.com/flowbite@1.5.4/dist/flowbite.min.css" />
    <link href="_content/Blazorise.Icons.FontAwesome/v6/css/all.min.css" rel="stylesheet">

    <script src="https://cdn.tailwindcss.com"></script>
    <script src="_content/Blazorise.Tailwind/blazorise.tailwind.config.js?v=1.6.1.0"></script>

    <link href="_content/Blazorise/blazorise.css" rel="stylesheet" />
    <link href="_content/Blazorise.Tailwind/blazorise.tailwind.css" rel="stylesheet" />
    <HeadOutlet />
</head>

<body>
    <Routes />
    <script src="_framework/blazor.web.js"></script>
    <script src="https://unpkg.com/flowbite@1.5.4/dist/flowbite.js"></script>
</body>

</html>

================
File: CampaignManager.Web/Components/CharacterComponents/CharacteristicsComponent.razor
================
<div class="mb-1">
    <h3 class="text-xl font-bold mb-1">ХАРАКТЕРИСТИКИ</h3>
    <div class="flex flex-col md:flex-row md:gap-4">
        @for (int column = 0; column < 2; column++)
        {
        <div class="flex-1">
            <table class="w-full text-xs mb-2">
                <thead>
                <tr>
                    <th class="text-left font-semibold"></th>
                    <th class="w-10 text-center font-semibold">О</th>
                    <th class="w-10 text-center font-semibold">Т</th>
                    <th class="w-10 text-center font-semibold">Ч</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var prop in typeof(Characteristics).GetProperties().Skip(column * 4).Take(4))
                {
                var value = (AttributeValue)prop.GetValue(Character.Characteristics);
                <tr>
                    <td class="py-0.5">
                        <span class="font-semibold">@GetShortName(prop.Name)</span>
                    </td>
                    <td class="py-0.5">
                        <input type="number" @bind="value.Regular" @bind:event="oninput"
                               @onchange="() => UpdateCharacteristic(value)"
                               class="w-full min-w-10 p-0.5 text-center border border-gray-300 rounded" />
                    </td>
                    <td class="py-0.5">
                        <input type="number" value="@value.Half" disabled
                               class="w-full min-w-10 p-0.5 text-center bg-gray-100 border border-gray-300 rounded" />
                    </td>
                    <td class="py-0.5">
                        <input type="number" value="@value.Fifth" disabled
                               class="w-full min-w-10 p-0.5 text-center bg-gray-100 border border-gray-300 rounded" />
                    </td>
                </tr>
                }
                </tbody>
            </table>
        </div>
        }
    </div>

    <div class="mt-4 flex flex-col md:flex-row md:gap-4">
        <div class="flex-1">
            <table class="w-full text-xs mb-2">
                <thead>
                <tr>
                    <th class="text-left font-semibold"></th>
                    <th class="w-20 text-center font-semibold">Текущее</th>
                    <th class="w-20 text-center font-semibold">Максимум</th>
                </tr>
                </thead>
                <tbody>
                <tr>
                    <td class="py-0.5">
                        <span class="font-medium">Пункты Здоровья</span>
                    </td>
                    <td class="py-0.5">
                        <input type="number" @bind="Character.DerivedAttributes.HitPoints.Value"
                               class="w-full min-w-10 p-0.5 text-center border border-gray-300 rounded" />
                    </td>
                    <td class="py-0.5">
                        <input type="number" value="@Character.DerivedAttributes.HitPoints.MaxValue" disabled
                               class="w-full min-w-10 p-0.5 text-center bg-gray-100 border border-gray-300 rounded" />
                    </td>
                </tr>
                <tr>
                    <td class="py-0.5">
                        <span class="font-medium">Пункты Маны</span>
                    </td>
                    <td class="py-0.5">
                        <input type="number" @bind="Character.DerivedAttributes.MagicPoints.Value"
                               class="w-full min-w-10 p-0.5 text-center border border-gray-300 rounded" />
                    </td>
                    <td class="py-0.5">
                        <input type="number" value="@Character.DerivedAttributes.MagicPoints.MaxValue" disabled
                               class="w-full min-w-10 p-0.5 text-center bg-gray-100 border border-gray-300 rounded" />
                    </td>
                </tr>
                <tr>
                    <td class="py-0.5">
                        <span class="font-medium">Рассудок</span>
                    </td>
                    <td class="py-0.5">
                        <input type="number" @bind="Character.DerivedAttributes.Sanity.Value"
                               class="w-full min-w-10 p-0.5 text-center border border-gray-300 rounded" />
                    </td>
                    <td class="py-0.5">
                        <input type="number" value="@Character.DerivedAttributes.Sanity.MaxValue" disabled
                               class="w-full min-w-10 p-0.5 text-center bg-gray-100 border border-gray-300 rounded" />
                    </td>
                </tr>
                <tr>
                    <td class="py-0.5">
                        <span class="font-medium">Удача</span>
                    </td>
                    <td class="py-0.5">
                        <input type="number" @bind="Character.DerivedAttributes.Luck.Value"
                               class="w-full min-w-10 p-0.5 text-center border border-gray-300 rounded" />
                    </td>
                    <td class="py-0.5">
                        <input type="number" value="@Character.DerivedAttributes.Luck.MaxValue" disabled
                               class="w-full min-w-10 p-0.5 text-center bg-gray-100 border border-gray-300 rounded" />
                    </td>
                </tr>
                </tbody>
            </table>
        </div>
        <div class="flex-1">
            <table class="w-full text-xs mb-2">
                <thead>
                <tr>
                    <th class="text-left font-semibold">Состояние сыщика</th>
                    <th class="w-10 text-center font-semibold"></th>
                </tr>
                </thead>
                <tbody>
                <tr>
                    <td class="py-0.5">
                        <span class="font-medium">Без сознания</span>
                    </td>
                    <td class="py-0.5 text-center">
                        <input type="checkbox" @bind="Character.State.IsUnconscious" />
                    </td>
                </tr>
                <tr>
                    <td class="py-0.5">
                        <span class="font-medium">Серьезная рана</span>
                    </td>
                    <td class="py-0.5 text-center">
                        <input type="checkbox" @bind="Character.State.HasSeriousInjury" />
                    </td>
                </tr>
                <tr>
                    <td class="py-0.5">
                        <span class="font-medium">При смерти</span>
                    </td>
                    <td class="py-0.5 text-center">
                        <input type="checkbox" @bind="Character.State.IsDying" />
                    </td>
                </tr>
                <tr>
                    <td class="py-0.5">
                        <span class="font-medium">Временное безумие</span>
                    </td>
                    <td class="py-0.5 text-center">
                        <input type="checkbox" @bind="Character.State.HasTemporaryInsanity" />
                    </td>
                </tr>
                <tr>
                    <td class="py-0.5">
                        <span class="font-medium">Бессрочное безумие</span>
                    </td>
                    <td class="py-0.5 text-center">
                        <input type="checkbox" @bind="Character.State.HasIndefiniteInsanity" />
                    </td>
                </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
[Parameter]
public Character Character { get; set; }

[Parameter]
public EventCallback OnUpdate { get; set; }

private string GetShortName(string fullName)
{
var shortNames = new Dictionary<string, string>
{
{"Strength", "СИЛ"},
{"Constitution", "ВЫН"},
{"Size", "ТЕЛ"},
{"Dexterity", "ЛВК"},
{"Appearance", "НАР"},
{"Intelligence", "ИНТ"},
{"Power", "МОЩ"},
{"Education", "ОБР"}
};

return shortNames.TryGetValue(fullName, out string shortName) ? shortName : fullName;
}

private async Task UpdateCharacteristic(AttributeValue value)
{
value.UpdateDerived();
await OnUpdate.InvokeAsync();
}
}

================
File: CampaignManager.Web/Components/CharacterComponents/GamesComponent.razor
================
@inject CampaignService campaignService;
@rendermode InteractiveServer

<h3>Доступные компании</h3>


@code {

    private List<Campaign> Campaigns;

    protected override void OnInitialized()
    {
        Campaigns = campaignService.GetUserCampaigns();
    }
}

================
File: CampaignManager.Web/Components/CharacterComponents/PersonalInfoComponent.razor
================
<div class="mb-6">
    <h3 class="text-xl font-bold mb-1">ПЕРСОНАЛЬНАЯ ИНФОРМАЦИЯ</h3>
    <div class="flex flex-col gap-2">
        <div class="flex items-center">
            <label class="text-xs font-semibold w-24">Игрок</label>
            <input type="text" @bind="Character.PersonalInfo.PlayerName" class="p-0.5 text-sm border rounded w-full min-w-10" />
        </div>
        <div class="flex items-center">
            <label class="text-xs font-semibold w-24">ИМЯ</label>
            <input type="text" @bind="Character.PersonalInfo.Name" class="p-0.5 text-sm border rounded w-full min-w-10" />
        </div>
        <div class="flex items-center">
            <label class="text-xs font-semibold w-24">РОД ЗАНЯТИЙ</label>
            <input type="text" @bind="Character.PersonalInfo.Occupation" class="p-0.5 text-sm border rounded w-full min-w-10" />
        </div>
        <div class="flex items-center">
            <label class="text-xs font-semibold w-24">ВОЗРАСТ</label>
            <input type="number" @bind="Character.PersonalInfo.Age" class="p-0.5 text-sm border rounded w-full min-w-10" />
        </div>
        <div class="flex items-center">
            <label class="text-xs font-semibold w-24">ПОЛ</label>
            <input type="text" @bind="Character.PersonalInfo.Gender" class="p-0.5 text-sm border rounded w-full min-w-10" />
        </div>
        <div class="flex items-center">
            <label class="text-xs font-semibold w-24">МЕСТО ЖИТ.</label>
            <input type="text" @bind="Character.PersonalInfo.Residence" class="p-0.5 text-sm border rounded w-full min-w-10" />
        </div>
        <div class="flex items-center">
            <label class="text-xs font-semibold w-24">МЕСТО РОЖД.</label>
            <input type="text" @bind="Character.PersonalInfo.Birthplace" class="p-0.5 text-sm border rounded w-full min-w-10" />
        </div>
    </div>

    <div class="mt-4">
        <div class="grid grid-cols-2 gap-2">
            <div class="flex items-center">
                <label class="text-xs font-semibold w-24">БОНУС К УРОНУ</label>
                <input type="text" @bind="Character.PersonalInfo.DamageBonus" class="p-0.5 text-sm border rounded w-20 min-w-10" />
            </div>
            <div class="flex items-center">
                <label class="text-xs font-semibold w-24">КОМПЛЕКЦИЯ</label>
                <input type="text" @bind="Character.PersonalInfo.Build" class="p-0.5 text-sm border rounded w-20 min-w-10" />
            </div>
            <div class="flex items-center">
                <label class="text-xs font-semibold w-24">СКОРОСТЬ</label>
                <input type="number" @bind="Character.PersonalInfo.MoveSpeed" class="p-0.5 text-sm border rounded w-20 min-w-10" />
            </div>
            <div class="flex items-center">
                <label class="text-xs font-semibold w-24">УКЛОНЕНИЕ</label>
                <input type="number" @bind="Character.PersonalInfo.Dodge" class="p-0.5 text-sm border rounded w-20 min-w-10" />
            </div>
        </div>
    </div>
</div>

@code {
[Parameter]
public Character Character { get; set; }
}

================
File: CampaignManager.Web/Components/CharacterComponents/SkillComponent.razor
================
@using System.Linq
@using static CampaignManager.Web.Model.SkillsModel

@rendermode InteractiveServer

<div class="overflow-x-auto">
    <h3 class="text-xl font-bold mb-1">НАВЫКИ</h3>
    <table class="w-full text-sm border-collapse">
        <tbody>
        @{
            var firstColumn = Model.SkillGroups.Take(2).ToList();
            var secondColumn = Model.SkillGroups.Skip(2).Take(3).ToList();
            var thirdColumn = Model.SkillGroups.Skip(5).ToList();
            var columns = new List<List<SkillGroup>> { firstColumn, secondColumn, thirdColumn };
        }
        <tr>
            @foreach (var column in columns)
            {
                <td class="align-top border p-2">
                    @foreach (var group in column)
                    {
                        <div class="mb-4 last:mb-0">
                            <table class="w-full text-xs mb-2">
                                <thead>
                                <tr>
                                    <th class="text-left font-semibold" colspan="2">@group.Name</th>
                                    <th class="w-10 text-center font-semibold">Исп.</th>
                                    <th class="w-10 text-center font-semibold">О</th>
                                    <th class="w-10 text-center font-semibold">Т</th>
                                    <th class="w-10 text-center font-semibold">Ч</th>
                                </tr>
                                </thead>
                                <tbody>
                                @foreach (var skill in group.Skills)
                                {
                                    <tr>
                                        <td class="py-0.5 pr-1 w-6">
                                            <button @onclick="() => RemoveSkillFromGroup(group, skill)"
                                                    class="text-red-500 hover:text-red-700 text-xs">
                                                <i class="fas fa-times"></i>
                                            </button>
                                        </td>
                                        <td class="py-0.5">
                                            <span class="font-medium">@skill.Name</span>
                                            <span class="text-xs text-gray-500">(@skill.BaseValue)</span>
                                        </td>
                                        <td class="py-0.5 text-center">
                                            <input type="checkbox" @bind="skill.IsUsed"/>
                                        </td>
                                        <td class="py-0.5">
                                            <input type="number" @bind="skill.Value.Regular" @bind:event="oninput"
                                                   @onchange="() => UpdateSkillValue(skill)"
                                                   class="w-full min-w-14 p-0.5 text-center border border-gray-300 rounded"/>
                                        </td>
                                        <td class="py-0.5">
                                            <input type="number" value="@skill.Value.Half" disabled
                                                   class="w-full min-w-14 p-0.5 text-center bg-gray-100 border border-gray-300 rounded"/>
                                        </td>
                                        <td class="py-0.5">
                                            <input type="number" value="@skill.Value.Fifth" disabled
                                                   class="w-full min-w-14 p-0.5 text-center bg-gray-100 border border-gray-300 rounded"/>
                                        </td>
                                    </tr>
                                }
                                </tbody>
                            </table>
                            <div class="flex gap-1 items-center">
                                <input type="text" @bind="@group.NewSkillName" placeholder="Навык"
                                       class="flex-grow min-w-14 p-0.5 text-xs border border-gray-300 rounded"/>
                                <input type="text" @bind="@group.NewSkillBaseValue" placeholder="БЗ"
                                       class="w-10 min-w-14 p-0.5 text-xs border border-gray-300 rounded"/>
                                <button @onclick="() => AddSkillToGroup(group)"
                                        class="bg-green-500 text-white px-2 py-0.5 rounded hover:bg-green-600 text-xs">
                                    <i class="fas fa-plus"></i>
                                </button>
                            </div>
                        </div>
                    }
                </td>
            }
        </tr>
        </tbody>
    </table>
</div>

@code {
    [Parameter]
    public SkillsModel Model { get; set; }

    private void AddSkillToGroup(SkillGroup group)
    {
        if (!string.IsNullOrWhiteSpace(group.NewSkillName) && !string.IsNullOrWhiteSpace(group.NewSkillBaseValue))
        {
            var newSkill = new Skill
                {
                    Name = group.NewSkillName,
                    BaseValue = group.NewSkillBaseValue,
                    Value = new AttributeValue(0)
                };

            group.Skills.Add(newSkill);
            group.NewSkillName = "";
            group.NewSkillBaseValue = "";
            StateHasChanged();
        }
    }

    private void RemoveSkillFromGroup(SkillGroup group, Skill skill)
    {
        group.RemoveSkill(skill);
        StateHasChanged();
    }

    private void UpdateSkillValue(Skill skill)
    {
        skill.Value.UpdateDerived();
        StateHasChanged();
    }
}

================
File: CampaignManager.Web/Components/CharacterComponents/WeaponsComponent.razor
================
<div class="mt-6">
    <h3 class="text-xl font-bold mb-4">ОРУЖИЕ</h3>
    <table class="w-full border-collapse">
        <thead>
            <tr>
                <th class="border p-2 bg-gray-200">ОРУЖИЕ</th>
                <th class="border p-2 bg-gray-200">ШАНС</th>
                <th class="border p-2 bg-gray-200">УРОН</th>
                <th class="border p-2 bg-gray-200">ДАЛЬН.</th>
                <th class="border p-2 bg-gray-200">АТАКИ</th>
                <th class="border p-2 bg-gray-200">ПАТРОНЫ</th>
                <th class="border p-2 bg-gray-200">ПРОЧ.</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var weapon in Weapons)
            {
                <tr>
                    <td class="border p-2"><input type="text" @bind="weapon.Name" class="w-full p-1 border rounded" /></td>
                    <td class="border p-2"><input type="text" @bind="weapon.Damage" class="w-full p-1 border rounded" /></td>
                    <td class="border p-2"><input type="number" @bind="weapon.Range" class="w-full p-1 border rounded" /></td>
                    <td class="border p-2"><input type="number" @bind="weapon.Attacks" class="w-full p-1 border rounded" /></td>
                    <td class="border p-2"><input type="number" @bind="weapon.Ammo" class="w-full p-1 border rounded" /></td>
                    <td class="border p-2"><input type="number" @bind="weapon.Malfunction" class="w-full p-1 border rounded" /></td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    [Parameter]
    public List<Weapon> Weapons { get; set; }
}

================
File: CampaignManager.Web/Components/Layout/MainLayout.razor
================
@using CampaignManager.Web.Components.Navigation
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager

<div class="flex h-screen bg-gray-100">
    <div class="flex-1 flex flex-col overflow-hidden">
        <TopBar />

        <main class="flex-1 overflow-x-hidden overflow-y-auto bg-gray-200">
            <div class="container mx-auto px-6 py-8">
                @Body
            </div>
        </main>
    </div>
</div>

<div id="blazor-error-ui" class="fixed inset-0 flex items-center justify-center" style="display:none;">
    <div class="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4" role="alert">
        <p class="font-bold">Error</p>
        <p>An unhandled error has occurred.</p>
        <button @onclick="ReloadPage" class="bg-yellow-500 hover:bg-yellow-600 text-white font-bold py-2 px-4 rounded mt-2">
            Reload
        </button>
    </div>
</div>

@code {
    private void ReloadPage()
    {
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }
}

================
File: CampaignManager.Web/Components/Navigation/TopBar.razor
================
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<header class="bg-white shadow-sm">
    <div class="max-w-7xl mx-auto py-4 px-4 sm:px-6 lg:px-8 flex justify-between items-center">
        <h1 class="text-2xl font-semibold text-gray-900">Менеджер управления компаниями</h1>
        <div class="flex items-center">
            @if (authState?.User?.Identity?.IsAuthenticated == true)
            {
                <span class="text-gray-700 mr-4">@authState.User.Identity.Name</span>
                <button @onclick="LogoutAsync" class="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded">
                    Logout
                </button>
            }
            else
            {
                <button @onclick="LoginAsync" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded">
                    Login with Google
                </button>
            }
        </div>
    </div>
</header>

@code {
    private AuthenticationState authState;

    protected override async Task OnInitializedAsync()
    {
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    }

    private async Task LoginAsync()
    {
        NavigationManager.NavigateTo("api/account/login", forceLoad: true);
    }

    private async Task LogoutAsync()
    {     
        NavigationManager.NavigateTo("api/account/logout", forceLoad: true);
    }
}

================
File: CampaignManager.Web/Components/Pages/CharacterPage.razor
================
@page "/character"
@using CampaignManager.Web.Components.CharacterComponents
@rendermode InteractiveServer
@inject CharacterGenerationService CharacterGenerationService
@inject NavigationManager Navigation

<PageTitle>@Сharacter.PersonalInfo.Name</PageTitle>
<div class="max-w-7xl mx-auto p-6 bg-gray-100 border-2 border-gray-800 rounded-lg">

    <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
        <PersonalInfoComponent Character="@Сharacter" />
        <CharacteristicsComponent Character="@Сharacter" OnUpdate="StateHasChanged" />
    </div>

    <div class="mt-4">
        <SkillComponent Model="@Сharacter.Skills" />
    </div>

    <div class="mt-4">
        <WeaponsComponent Weapons="@Сharacter.Weapons" />
    </div>

    <div class="mt-4">
        <h3 class="text-xl font-bold mb-2">Предыстория</h3>
        <textarea @bind="Сharacter.Backstory" rows="4" class="w-full p-2 border rounded"></textarea>
    </div>
</div>
@code {
    private Character Сharacter;

    protected override void OnInitialized()
    {
        Сharacter = CharacterGenerationService.GenerateRandomCharacter();
    }
}

================
File: CampaignManager.Web/Components/Pages/Error.razor
================
@page "/Error"
@using System.Diagnostics

<PageTitle>Error</PageTitle>

<h1 class="text-danger">Error.</h1>
<h2 class="text-danger">An error occurred while processing your request.</h2>

@if (ShowRequestId)
{
    <p>
        <strong>Request ID:</strong> <code>@requestId</code>
    </p>
}

<h3>Development Mode</h3>
<p>
    Swapping to <strong>Development</strong> environment will display more detailed information about the error that occurred.
</p>
<p>
    <strong>The Development environment shouldn't be enabled for deployed applications.</strong>
    It can result in displaying sensitive information from exceptions to end users.
    For local debugging, enable the <strong>Development</strong> environment by setting the <strong>ASPNETCORE_ENVIRONMENT</strong> environment variable to <strong>Development</strong>
    and restarting the app.
</p>

@code{
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    private string? requestId;
    private bool ShowRequestId => !string.IsNullOrEmpty(requestId);

    protected override void OnInitialized()
    {
        requestId = Activity.Current?.Id ?? HttpContext?.TraceIdentifier;
    }
}

================
File: CampaignManager.Web/Components/Pages/Home.razor
================
@page "/"
@using CampaignManager.Web.Components.UserComponents

<PageTitle>Home</PageTitle>

<RegisterUserComponent></RegisterUserComponent>

================
File: CampaignManager.Web/Components/Routes.razor
================
<Router AppAssembly="@typeof(Program).Assembly">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(Layout.MainLayout)" />
        <FocusOnNavigate RouteData="@routeData" Selector="h1" />
    </Found>
</Router>

================
File: CampaignManager.Web/Components/UserComponents/RegisterUserComponent.razor
================
@using CampaignManager.Web.Services
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IHttpClientFactory HttpClientFactory
@rendermode InteractiveServer

<h3>RegisterUserComponent</h3>
<Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
            <h2>Welcome, @context.User.Identity?.Name!</h2>
            <button class="btn btn-primary" @onclick="() => JoinAsUser(context.User)">Join as User</button>
        </Authorized>
        <NotAuthorized>
            <h2>Нужно залогиниться, чтобы увидеть доступные компании.</h2>            
        </NotAuthorized>
    </AuthorizeView>
</Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState>
<p>@_message</p>

@code {
    private string _message = "";

    private async Task JoinAsUser(ClaimsPrincipal user)
    {
        var email = user.FindFirst(ClaimTypes.Email)?.Value;
        if (!string.IsNullOrEmpty(email))
        {
            var response = await CallJoinAsUserApi(email);
            _message = response;
        }
        else
        {
            _message = "Unable to join: Email is not available.";
        }
    }

    private async Task<string> CallJoinAsUserApi(string email)
    {
        var client = HttpClientFactory.CreateClient();
        var response = await client.PostAsync(NavigationManager.BaseUri + $"api/join-as-user?userEmail={Uri.EscapeDataString(email)}", null);
        if (response.IsSuccessStatusCode)
        {
            return await response.Content.ReadAsStringAsync();
        }
        return $"Error: {response.StatusCode}";
    }
}

================
File: CampaignManager.Web/Model/Authorozation.cs
================
using Microsoft.AspNetCore.Identity;
namespace CampaignManager.Web.Model;
public class ApplicationUser : IdentityUser
{
    public PlayerRole Role { get; set; }
}

public enum PlayerRole
{
    Player,
    GameMaster,
    Administrator
}

================
File: CampaignManager.Web/Model/CampaignModels.cs
================
namespace CampaignManager.Web.Model
{
    public class Campaign
    {
        public Guid Id { get; set; }
        public string Name { get; set; }
        public Keeper Keeper { get; set; }
        public List<Player> Players { get; set; } = new List<Player>();
        public DateTime CreatedAt { get; set; }
        public DateTime LastUpdated { get; set; }
    }

 

    public class Keeper : ApplicationUser
    {
        public List<Campaign> Campaigns { get; set; } = [];
    }

    public class Player : ApplicationUser
    {
        public Character Character { get; set; }
        public Campaign Campaign { get; set; }
    }
}

================
File: CampaignManager.Web/Model/CharacterModels.cs
================
namespace CampaignManager.Web.Model;

public class Character
{
    public Guid Id { get; set; }

    /// <summary>
    /// Персональная информация о персонаже
    /// </summary>
    public PersonalInfo PersonalInfo { get; set; } = new PersonalInfo();

    /// <summary>
    /// Характеристики персонажа
    /// </summary>
    public Characteristics Characteristics { get; set; } = new Characteristics();

    /// <summary>
    /// Производные характеристики персонажа
    /// </summary>
    public DerivedAttributes DerivedAttributes { get; set; } = new DerivedAttributes();

    /// <summary>
    /// Навыки персонажа
    /// </summary>
    public SkillsModel Skills { get; set; } = new SkillsModel();

    /// <summary>
    /// Оружие персонажа
    /// </summary>
    public List<Weapon> Weapons { get; set; } = new List<Weapon>();

    /// <summary>
    /// Предыстория персонажа
    /// </summary>
    public string Backstory { get; set; }

    /// <summary>
    /// Состояние персонажа
    /// </summary>
    public CharacterState State { get; set; } = new CharacterState();
}

public class PersonalInfo
{
    /// <summary>
    /// Имя игрока, управляющего персонажем
    /// </summary>
    public string PlayerName { get; set; }

    /// <summary>
    /// Имя персонажа
    /// </summary>
    public string Name { get; set; }

    /// <summary>
    /// Профессия или род занятий персонажа
    /// </summary>
    public string Occupation { get; set; }

    /// <summary>
    /// Возраст персонажа
    /// </summary>
    public int Age { get; set; }

    /// <summary>
    /// Пол персонажа
    /// </summary>
    public string Gender { get; set; }

    /// <summary>
    /// Место рождения персонажа
    /// </summary>
    public string Birthplace { get; set; }

    /// <summary>
    /// Текущее место жительства персонажа
    /// </summary>
    public string Residence { get; set; }

    /// <summary>
    /// Бонус к урону персонажа
    /// </summary>
    public string DamageBonus { get; set; }

    /// <summary>
    /// Скорость передвижения персонажа
    /// </summary>
    public int MoveSpeed { get; set; }

    /// <summary>
    /// Значение уклонения персонажа
    /// </summary>
    public int Dodge { get; set; }

    /// <summary>
    /// Телосложение персонажа
    /// </summary>
    public string Build { get; set; }
}

public class Characteristics
{
    public AttributeValue Strength { get; set; } = new AttributeValue(50);
    public AttributeValue Dexterity { get; set; } = new AttributeValue(45);
    public AttributeValue Intelligence { get; set; } = new AttributeValue(80);
    public AttributeValue Constitution { get; set; } = new AttributeValue(80);
    public AttributeValue Appearance { get; set; } = new AttributeValue(40);
    public AttributeValue Power { get; set; } = new AttributeValue(70);
    public AttributeValue Size { get; set; } = new AttributeValue(60);
    public AttributeValue Education { get; set; } = new AttributeValue(75);
}

public class DerivedAttributes
{
    /// <summary>
    /// Очки здоровья персонажа
    /// </summary>
    public AttributeWithMaxValue HitPoints { get; set; }

    /// <summary>
    /// Очки магии персонажа
    /// </summary>
    public AttributeWithMaxValue MagicPoints { get; set; }

    /// <summary>
    /// Уровень рассудка персонажа
    /// </summary>
    public AttributeWithMaxValue Sanity { get; set; }

    /// <summary>
    /// Уровень удачи персонажа
    /// </summary>
    public AttributeWithMaxValue Luck { get; set; }
}

public class CharacterState
{
    /// <summary>
    /// Находится ли персонаж без сознания
    /// </summary>
    public bool IsUnconscious { get; set; }

    /// <summary>
    /// Имеет ли персонаж серьезную рану
    /// </summary>
    public bool HasSeriousInjury { get; set; }

    /// <summary>
    /// Находится ли персонаж при смерти
    /// </summary>
    public bool IsDying { get; set; }

    /// <summary>
    /// Страдает ли персонаж временным безумием
    /// </summary>
    public bool HasTemporaryInsanity { get; set; }

    /// <summary>
    /// Страдает ли персонаж бессрочным безумием
    /// </summary>
    public bool HasIndefiniteInsanity { get; set; }
}

public class AttributeWithMaxValue
{
    public AttributeWithMaxValue(int value, int maxValue)
    {
        Value = value;
        MaxValue = maxValue;
    }

    public int Value { get; set; }
    public int MaxValue { get; set; }
}

public class AttributeValue
{
    public AttributeValue(int regular)
    {
        Regular = regular;
        UpdateDerived();
    }

    public void UpdateDerived()
    {
        Half = Regular / 2;
        Fifth = Regular / 5;
    }

    public int Regular { get; set; }
    public int Half { get; set; }
    public int Fifth { get; set; }
}

public class Weapon
{
    public string Name { get; set; }
    public string Damage { get; set; }
    public int Range { get; set; }
    public int Attacks { get; set; }
    public int Ammo { get; set; }
    public int Malfunction { get; set; }
}

public class SkillsModel
{
    public List<SkillGroup> SkillGroups { get; private set; }

    public SkillsModel()
    {
        InitializeSkillGroups();
    }

    private void InitializeSkillGroups()
    {
        SkillGroups =
        [
            new SkillGroup
            {
                Name = "Решение Проблем",
                Skills =
                [
                    new Skill { Name = "Взлом", Value = new AttributeValue(1), BaseValue = "01%" },
                    new Skill { Name = "Выживание", Value = new AttributeValue(10), BaseValue = "10%" },
                    new Skill { Name = "Ловкость рук", Value = new AttributeValue(10), BaseValue = "10%" },
                    new Skill { Name = "Механика", Value = new AttributeValue(10), BaseValue = "10%" },
                    new Skill { Name = "Ориентирование", Value = new AttributeValue(10), BaseValue = "10%" },
                    new Skill { Name = "Скрытность", Value = new AttributeValue(20), BaseValue = "20%" },
                    new Skill { Name = "Чтение следов", Value = new AttributeValue(10), BaseValue = "10%" },
                    new Skill { Name = "Электрика", Value = new AttributeValue(10), BaseValue = "10%" }
                ]
            },

            new SkillGroup
            {
                Name = "Социальные",
                Skills =
                [
                    new Skill { Name = "Антропология", Value = new AttributeValue(1), BaseValue = "01%" },
                    new Skill { Name = "Запугивание", Value = new AttributeValue(15), BaseValue = "15%" },
                    new Skill { Name = "Красноречие", Value = new AttributeValue(5), BaseValue = "05%" },
                    new Skill { Name = "Маскировка", Value = new AttributeValue(5), BaseValue = "05%" },
                    new Skill { Name = "Обаяние", Value = new AttributeValue(15), BaseValue = "15%" },
                    new Skill { Name = "Психология", Value = new AttributeValue(10), BaseValue = "10%" },
                    new Skill { Name = "Убеждение", Value = new AttributeValue(10), BaseValue = "10%" },
                    new Skill { Name = "Языки (родной)", Value = new AttributeValue(0), BaseValue = "ОБР" },
                    new Skill { Name = "Языки (иностр.)", Value = new AttributeValue(1), BaseValue = "01%" }
                ]
            },

            new SkillGroup
            {
                Name = "Сбор Информации",
                Skills =
                [
                    new Skill { Name = "Внимание", Value = new AttributeValue(25), BaseValue = "25%" },
                    new Skill { Name = "Работа в библиотеке", Value = new AttributeValue(20), BaseValue = "20%" },
                    new Skill { Name = "Слух", Value = new AttributeValue(20), BaseValue = "20%" }
                ]
            },

            new SkillGroup
            {
                Name = "Лечение",
                Skills =
                [
                    new Skill { Name = "Медицина", Value = new AttributeValue(1), BaseValue = "01%" },
                    new Skill { Name = "Первая помощь", Value = new AttributeValue(30), BaseValue = "30%" },
                    new Skill { Name = "Психоанализ", Value = new AttributeValue(1), BaseValue = "01%" }
                ]
            },

            new SkillGroup
            {
                Name = "Знания",
                Skills =
                [
                    new Skill { Name = "Археология", Value = new AttributeValue(1), BaseValue = "01%" },
                    new Skill { Name = "Бухгалтерское дело", Value = new AttributeValue(5), BaseValue = "05%" },
                    new Skill { Name = "Естествознание", Value = new AttributeValue(10), BaseValue = "10%" },
                    new Skill { Name = "Искусство/ремесло", Value = new AttributeValue(5), BaseValue = "05%" },
                    new Skill { Name = "История", Value = new AttributeValue(5), BaseValue = "05%" },
                    new Skill { Name = "Наука", Value = new AttributeValue(1), BaseValue = "01%" },
                    new Skill { Name = "Оккультизм", Value = new AttributeValue(5), BaseValue = "05%" },
                    new Skill { Name = "Оценка", Value = new AttributeValue(5), BaseValue = "05%" },
                    new Skill { Name = "Юриспруденция", Value = new AttributeValue(5), BaseValue = "05%" }
                ]
            },

            new SkillGroup
            {
                Name = "Специальные",
                Skills =
                [
                    new Skill { Name = "Мифы Ктулху", Value = new AttributeValue(0), BaseValue = "00%" },
                    new Skill { Name = "Средства", Value = new AttributeValue(0), BaseValue = "00%" }
                ]
            },

            new SkillGroup
            {
                Name = "Сражение (общее)",
                Skills =
                [
                    new Skill { Name = "Ближний бой (драка)", Value = new AttributeValue(25), BaseValue = "25%" },
                    new Skill { Name = "Метание", Value = new AttributeValue(20), BaseValue = "20%" },
                    new Skill { Name = "Уклонение", Value = new AttributeValue(0), BaseValue = "½ ЛВК" }
                ]
            },

            new SkillGroup
            {
                Name = "Сражение (Огнестрельное)",
                Skills =
                [
                    new Skill { Name = "Автомат", Value = new AttributeValue(15), BaseValue = "15%" },
                    new Skill { Name = "Стрельба (винт./дроб.)", Value = new AttributeValue(25), BaseValue = "25%" },
                    new Skill { Name = "Стрельба (пистолет)", Value = new AttributeValue(20), BaseValue = "20%" }
                ]
            },

            new SkillGroup
            {
                Name = "Действия",
                Skills =
                [
                    new Skill { Name = "Верховая езда", Value = new AttributeValue(5), BaseValue = "05%" },
                    new Skill { Name = "Вождение", Value = new AttributeValue(20), BaseValue = "20%" },
                    new Skill { Name = "Лазание", Value = new AttributeValue(20), BaseValue = "20%" },
                    new Skill { Name = "Пилотирование", Value = new AttributeValue(1), BaseValue = "01%" },
                    new Skill { Name = "Плавание", Value = new AttributeValue(20), BaseValue = "20%" },
                    new Skill { Name = "Прыжки", Value = new AttributeValue(20), BaseValue = "20%" },
                    new Skill { Name = "Упр. тяж. машинами", Value = new AttributeValue(1), BaseValue = "01%" }
                ]

            }
        ];
    }
}
public class SkillGroup
{

    public string Name { get; set; }
    public List<Skill> Skills { get; set; } = new List<Skill>();

    public string NewSkillName { get; set; } = "";
    public string NewSkillBaseValue { get; set; } = "";

    public void AddSkill(Skill skill)
    {
        Skills.Add(skill);
    }

    public void RemoveSkill(Skill skill)
    {
        Skills.Remove(skill);
    }
}

public class Skill
{
    public string Name { get; set; }
    public AttributeValue Value { get; set; }
    public string BaseValue { get; set; }
    public bool IsUsed { get; set; } = false;
}

================
File: CampaignManager.Web/Program.cs
================
using Blazorise;
using Blazorise.Icons.FontAwesome;
using Blazorise.Tailwind;
using CampaignManager.ServiceDefaults;
using CampaignManager.Web.Authorization;
using CampaignManager.Web.Components;
using CampaignManager.Web.Model;
using CampaignManager.Web.Services;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Authentication.Google;
using Microsoft.AspNetCore.Authentication.OAuth;
using Microsoft.AspNetCore.HttpOverrides;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.OpenApi.Models;

var builder = WebApplication.CreateBuilder(args);
// Add service defaults & Aspire components.
builder.AddServiceDefaults();

// Add services to the container.
builder.Services.AddRazorComponents()
    .AddInteractiveServerComponents();

builder.Services.AddDbContext<ApplicationDbContext>(options =>
    options.UseNpgsql(builder.Configuration.GetConnectionString("DefaultConnection")));

builder.Services.AddAuthentication(options =>
{
    options.DefaultAuthenticateScheme = CookieAuthenticationDefaults.AuthenticationScheme;
    options.DefaultSignInScheme = CookieAuthenticationDefaults.AuthenticationScheme;
    options.DefaultChallengeScheme = GoogleDefaults.AuthenticationScheme;
})
.AddCookie()
.AddGoogle(options =>
{
    options.ClientId = builder.Configuration["Authentication:Google:ClientId"];
    options.ClientSecret = builder.Configuration["Authentication:Google:ClientSecret"];
    options.ClaimActions.MapJsonKey("urn:google:profile", "link");
    options.ClaimActions.MapJsonKey("urn:google:image", "picture");
    options.CorrelationCookie.SecurePolicy = CookieSecurePolicy.Always;
    options.CorrelationCookie.SameSite = SameSiteMode.None;
    options.Events = new OAuthEvents
    {
        OnRedirectToAuthorizationEndpoint = context =>
        {
            if (context.RedirectUri.StartsWith("http:"))
            {
                context.RedirectUri = context.RedirectUri.Replace("http:", "https:");
            }
            context.Response.Redirect(context.RedirectUri);
            return Task.CompletedTask;
        }
    };
});

builder.Services.AddAuthorization();
// Add Swagger services
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(c =>
{
    c.SwaggerDoc("v1", new OpenApiInfo { Title = "CampaignManager API", Version = "v1" });
});
builder.Services.AddOutputCache();
builder.Services
    .AddBlazorise()
    .AddTailwindProviders()
    .AddFontAwesomeIcons();
builder.Services.AddScoped<CharacterService>();
builder.Services.AddScoped<CharacterGenerationService>();
builder.Services.AddSingleton<CampaignService>();
builder.Services.AddHttpClient();
var app = builder.Build();

if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Error");
    app.UseHsts();
}

app.UseForwardedHeaders(new ForwardedHeadersOptions
{
    ForwardedHeaders = ForwardedHeaders.XForwardedFor | ForwardedHeaders.XForwardedProto
});

app.UseHttpsRedirection();

app.UseAuthentication();
app.UseAuthorization();

app.UseStaticFiles();
app.UseAntiforgery();

app.UseOutputCache();

app.MapRazorComponents<App>()
    .AddInteractiveServerRenderMode();

app.MapDefaultEndpoints();
// Enable middleware to serve generated Swagger as a JSON endpoint.
app.UseSwagger();

// Enable middleware to serve swagger-ui (HTML, JS, CSS, etc.),
// specifying the Swagger JSON endpoint.
app.UseSwaggerUI(c =>
{
    c.SwaggerEndpoint("/swagger/v1/swagger.json", "CampaignManager API v1");
});

app.MapGet("api/account/login", async (string? returnUrl, HttpContext httpContext) =>
{
    var properties = new AuthenticationProperties { RedirectUri = returnUrl ?? "/" };
    await httpContext.ChallengeAsync(GoogleDefaults.AuthenticationScheme, properties);
});
app.MapGet("api/account/logout", async (HttpContext httpContext) =>
{
    var properties = new AuthenticationProperties { RedirectUri = "/" };
    await httpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme, properties);
    return Results.Ok();
});

app.MapPost("api/join-as-user", async (string userEmail, [FromServices] ApplicationDbContext dbContext) =>
{
    var user = await dbContext.Users.FirstOrDefaultAsync(u => u.Email == userEmail);
    if (user == null)
    {
        user = new ApplicationUser { Email = userEmail, UserName = userEmail, Role = PlayerRole.Player };
        dbContext.Users.Add(user);
    }   

    await dbContext.SaveChangesAsync();
    return Results.Ok($"User {userEmail} joined as a player");
});

app.Run();

================
File: CampaignManager.Web/Properties/launchSettings.json
================
{
  "profiles": {
    "http": {
      "commandName": "Project",
      "launchBrowser": true,
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      },
      "dotnetRunMessages": true,
      "applicationUrl": "http://localhost:5031"
    },
    "https": {
      "commandName": "Project",
      "launchBrowser": true,
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      },
      "dotnetRunMessages": true,
      "applicationUrl": "https://localhost:8080;http://localhost:5031"
    },
    "Container (Dockerfile)": {
      "commandName": "Docker",
      "launchBrowser": true,
      "launchUrl": "{Scheme}://{ServiceHost}:{ServicePort}",
      "environmentVariables": {
        "ASPNETCORE_HTTPS_PORTS": "8081",
        "ASPNETCORE_HTTP_PORTS": "8080"
      },
      "publishAllPorts": true,
      "useSSL": true
    }
  },
  "$schema": "https://json.schemastore.org/launchsettings.json"
}

================
File: CampaignManager.Web/Services/CampaignService.cs
================
using CampaignManager.Web.Model;

public class CampaignService
{
    private List<Campaign> campaigns = [];
    private List<ApplicationUser> users = [];
    private ApplicationUser currentUser;

    public void RegisterUser(string username, string email, bool isKeeper)
    {
        if (isKeeper)
        {
            users.Add(new Keeper { Id = Guid.NewGuid().ToString(), Email = email });
        }
        else
        {
            users.Add(new Player { Id = Guid.NewGuid().ToString(), Email = email });
        }
    }

    public bool Login(string username)
    {
        currentUser = users.FirstOrDefault(u => u.Email == username);
        return currentUser != null;
    }

    public void Logout()
    {
        currentUser = null;
    }

    public Campaign CreateCampaign(string name)
    {
        if (currentUser is Keeper keeper)
        {
            var campaign = new Campaign
            {
                Id = Guid.NewGuid(),
                Name = name,
                Keeper = keeper,
                CreatedAt = DateTime.Now,
                LastUpdated = DateTime.Now
            };
            campaigns.Add(campaign);
            keeper.Campaigns.Add(campaign);
            return campaign;
        }
        throw new UnauthorizedAccessException("Only Keepers can create campaigns.");
    }

    public void AddPlayerToCampaign(Guid campaignId, string playerUsername)
    {
        var campaign = campaigns.FirstOrDefault(c => c.Id == campaignId);
        if (campaign == null) throw new ArgumentException("Campaign not found.");

        if (currentUser != campaign.Keeper)
            throw new UnauthorizedAccessException("Only the campaign Keeper can add players.");

        var player = users.FirstOrDefault(u => u.Email == playerUsername) as Player;
        if (player == null) throw new ArgumentException("Player not found.");

        campaign.Players.Add(player);
        player.Campaign = campaign;
        player.Character = new CharacterGenerationService().GenerateRandomCharacter();
        campaign.LastUpdated = DateTime.Now;
    }

    public List<Character> GetCampaignCharacters(Guid campaignId)
    {
        var campaign = campaigns.FirstOrDefault(c => c.Id == campaignId);
        if (campaign == null) throw new ArgumentException("Campaign not found.");

        if (currentUser == campaign.Keeper)
        {
            return campaign.Players.Select(p => p.Character).ToList();
        }
        else if (currentUser is Player player && player.Campaign == campaign)
        {
            return new List<Character> { player.Character };
        }
        throw new UnauthorizedAccessException("You don't have access to this campaign.");
    }

    public List<Campaign> GetUserCampaigns()
    {
        if (currentUser is Keeper keeper)
        {
            return keeper.Campaigns;
        }
        else if (currentUser is Player player)
        {
            return new List<Campaign> { player.Campaign };
        }
        throw new UnauthorizedAccessException("User not logged in.");
    }
}

================
File: CampaignManager.Web/Services/CharacterGenerationService.cs
================
using System;
using System.Collections.Generic;
using System.Linq;
using CampaignManager.Web.Model;

public class CharacterGenerationService
{
    private Random random = new Random();

    public Character GenerateRandomCharacter()
    {
        var character = new Character();
        
        GenerateCharacteristics(character);
        CalculateDerivedAttributes(character);
        GeneratePersonalInfo(character);
        GenerateSkills(character);
        
        return character;
    }

    private void GenerateCharacteristics(Character character)
    {
        character.Characteristics.Strength = new AttributeValue(RollCharacteristic());
        character.Characteristics.Constitution = new AttributeValue(RollCharacteristic());
        character.Characteristics.Size = new AttributeValue(RollCharacteristic());
        character.Characteristics.Dexterity = new AttributeValue(RollCharacteristic());
        character.Characteristics.Appearance = new AttributeValue(RollCharacteristic());
        character.Characteristics.Intelligence = new AttributeValue(RollCharacteristic());
        character.Characteristics.Power = new AttributeValue(RollCharacteristic());
        character.Characteristics.Education = new AttributeValue(RollCharacteristic());
    }

    private int RollCharacteristic()
    {
        // 3d6 * 5 for most characteristics
        return (random.Next(1, 7) + random.Next(1, 7) + random.Next(1, 7)) * 5;
    }

    private void CalculateDerivedAttributes(Character character)
    {
        // Calculate Hit Points
        int hitPoints = (character.Characteristics.Size.Regular + character.Characteristics.Constitution.Regular) / 10;
        character.DerivedAttributes.HitPoints = new AttributeWithMaxValue(hitPoints, hitPoints);

        // Calculate Magic Points
        int magicPoints = character.Characteristics.Power.Regular / 5;
        character.DerivedAttributes.MagicPoints = new AttributeWithMaxValue(magicPoints, magicPoints);

        // Calculate Sanity
        int sanity = character.Characteristics.Power.Regular;
        character.DerivedAttributes.Sanity = new AttributeWithMaxValue(sanity, 99); // Max sanity is always 99

        // Calculate Luck
        int luck = (random.Next(1, 7) + random.Next(1, 7) + random.Next(1, 7)) * 5;
        character.DerivedAttributes.Luck = new AttributeWithMaxValue(luck, luck);

        // Calculate Move Rate
        character.PersonalInfo.MoveSpeed = CalculateMoveRate(character);

        // Calculate Build and Damage Bonus
        CalculateBuildAndDamageBonus(character);
    }

    private int CalculateMoveRate(Character character)
    {
        int str = character.Characteristics.Strength.Regular;
        int dex = character.Characteristics.Dexterity.Regular;
        int siz = character.Characteristics.Size.Regular;

        if (str < siz && dex < siz) return 7;
        if (str > siz && dex > siz) return 9;
        return 8;
    }

    private void CalculateBuildAndDamageBonus(Character character)
    {
        int strength = character.Characteristics.Strength.Regular;
        int size = character.Characteristics.Size.Regular;
        int sum = strength + size;

        if (sum >= 2 && sum <= 64)
        {
            character.PersonalInfo.Build = "-2";
            character.PersonalInfo.DamageBonus = "-2";
        }
        else if (sum >= 65 && sum <= 84)
        {
            character.PersonalInfo.Build = "-1";
            character.PersonalInfo.DamageBonus = "-1";
        }
        else if (sum >= 85 && sum <= 124)
        {
            character.PersonalInfo.Build = "0";
            character.PersonalInfo.DamageBonus = "0";
        }
        else if (sum >= 125 && sum <= 164)
        {
            character.PersonalInfo.Build = "1";
            character.PersonalInfo.DamageBonus = "+1D4";
        }
        else
        {
            character.PersonalInfo.Build = "2";
            character.PersonalInfo.DamageBonus = "+1D6";
        }
    }

    private void GeneratePersonalInfo(Character character)
    {
        // This is a simplified version. You might want to expand this with more detailed random generation
        character.PersonalInfo.Name = GenerateRandomName();
        character.PersonalInfo.Occupation = GenerateRandomOccupation();
        character.PersonalInfo.Age = random.Next(15, 90);
        character.PersonalInfo.Gender = random.Next(2) == 0 ? "Мужской" : "Женский";
        character.PersonalInfo.Residence = "Аркхем"; // Default for simplicity
        character.PersonalInfo.Birthplace = "Аркхем"; // Default for simplicity
    }

    private string GenerateRandomName()
    {
        string[] firstNames = { "Джон", "Мэри", "Роберт", "Патриция", "Майкл", "Дженнифер", "Уильям", "Линда", "Дэвид", "Элизабет" };
        string[] lastNames = { "Смит", "Джонсон", "Уильямс", "Браун", "Джонс", "Гарсия", "Миллер", "Дэвис", "Родригес", "Мартинес" };

        return $"{firstNames[random.Next(firstNames.Length)]} {lastNames[random.Next(lastNames.Length)]}";
    }

    private string GenerateRandomOccupation()
    {
        string[] occupations = { "Антиквар", "Автор", "Бухгалтер", "Актер", "Археолог", "Художник", "Атлет", "Бармен", "Ботаник", "Священник" };
        return occupations[random.Next(occupations.Length)];
    }

    private void GenerateSkills(Character character)
    {
        foreach (var skillGroup in character.Skills.SkillGroups)
        {
            foreach (var skill in skillGroup.Skills)
            {
                if (skill.Name == "Уклонение")
                {
                    skill.Value.Regular = character.Characteristics.Dexterity.Regular / 2;
                    character.PersonalInfo.Dodge = skill.Value.Regular;
                }
                else if (skill.Name == "Языки (родной)")
                {
                    skill.Value.Regular = character.Characteristics.Education.Regular;
                }
                else if (skill.BaseValue.EndsWith("%"))
                {
                    int baseValue = int.Parse(skill.BaseValue.TrimEnd('%'));
                    skill.Value.Regular = baseValue + random.Next(0, 70); // Случайное увеличение до 70%
                }
                // Для навыков с другими базовыми значениями (например, "00%") оставляем начальное значение

                skill.Value.UpdateDerived();
            }
        }
    }
}

================
File: CampaignManager.Web/Services/CharacterService.cs
================
using CampaignManager.Web.Model;

namespace CampaignManager.Web.Services;

public class CharacterService
{
    private readonly List<Character> _characters = new();

    public async Task<Character> CreateCharacterAsync(Character character)
    {
        character.Id = Guid.NewGuid();
        _characters.Add(character);
        return await Task.FromResult(character);
    }

    public async Task<Character> GetCharacterByIdAsync(Guid id)
    {
        var character = _characters.FirstOrDefault(c => c.Id == id);
        return await Task.FromResult(character);
    }

    public async Task<IEnumerable<Character>> GetAllCharactersAsync()
    {
        return await Task.FromResult(_characters);
    }

    public async Task<Character> UpdateCharacterAsync(Character character)
    {
        var existingCharacter = _characters.FirstOrDefault(c => c.Id == character.Id);
        if (existingCharacter != null)
        {
            _characters.Remove(existingCharacter);
            _characters.Add(character);
        }
        return await Task.FromResult(character);
    }

    public async Task<bool> DeleteCharacterAsync(Guid id)
    {
        var character = _characters.FirstOrDefault(c => c.Id == id);
        if (character != null)
        {
            _characters.Remove(character);
            return await Task.FromResult(true);
        }
        return await Task.FromResult(false);
    }
}

================
File: CampaignManager.Web/Services/UserRegistrationService.cs
================
using CampaignManager.Web.Authorization;
using CampaignManager.Web.Model;
using Microsoft.EntityFrameworkCore;
namespace CampaignManager.Web.Services;

public class UserRegistrationService
{
    private readonly ApplicationDbContext _dbContext;
    private readonly ILogger<UserRegistrationService> _logger;

    public UserRegistrationService(ApplicationDbContext dbContext, ILogger<UserRegistrationService> logger)
    {
        _dbContext = dbContext;
        _logger = logger;
    }

    public async Task<(bool Success, string Message)> RegisterUserAsync(string email)
    {
        if (string.IsNullOrEmpty(email))
        {
            _logger.LogWarning("Attempt to register user with empty email");
            return (false, "Email is required");
        }

        if (!IsValidEmail(email))
        {
            _logger.LogWarning($"Attempt to register user with invalid email: {email}");
            return (false, "Invalid email format");
        }

        try
        {
            using var transaction = await _dbContext.Database.BeginTransactionAsync();

            var user = await _dbContext.Users.FirstOrDefaultAsync(u => u.Email == email);
            if (user == null)
            {
                user = new ApplicationUser { Email = email, UserName = email, Role = PlayerRole.Player };
                _dbContext.Users.Add(user);
                _logger.LogInformation($"Created new user with email: {email}");
            }
            else
            {
                _logger.LogInformation($"User with email {email} already exists and has a role");
                return (true, "User already registered");
            }

            await _dbContext.SaveChangesAsync();
            await transaction.CommitAsync();

            _logger.LogInformation($"User with email {email} successfully registered");
            return (true, "Successfully registered as user");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"Error occurred while registering user with email: {email}");
            return (false, "An error occurred during registration");
        }
    }

    private bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }
}

================
File: Dockerfile
================
# See https://aka.ms/customizecontainer to learn how to customize your debug container and how Visual Studio uses this Dockerfile to build your images for faster debugging.

# This stage is used when running from VS in fast mode (Default for Debug configuration)
FROM mcr.microsoft.com/dotnet/aspnet:8.0-noble-chiseled-extra AS base
USER $APP_UID
WORKDIR /app
EXPOSE 8080
EXPOSE 8081


# This stage is used to build the service project
FROM mcr.microsoft.com/dotnet/sdk:8.0-noble AS build
ARG BUILD_CONFIGURATION=Release
WORKDIR /src
COPY ["CampaignManager.Web/CampaignManager.Web.csproj", "CampaignManager.Web/"]
COPY ["CampaignManager.ServiceDefaults/CampaignManager.ServiceDefaults.csproj", "CampaignManager.ServiceDefaults/"]
RUN dotnet restore "./CampaignManager.Web/CampaignManager.Web.csproj"
COPY . .
WORKDIR "/src/CampaignManager.Web"
RUN dotnet build "./CampaignManager.Web.csproj" -c $BUILD_CONFIGURATION -o /app/build

# This stage is used to publish the service project to be copied to the final stage
FROM build AS publish
ARG BUILD_CONFIGURATION=Release
RUN dotnet publish "./CampaignManager.Web.csproj" -c $BUILD_CONFIGURATION -o /app/publish /p:UseAppHost=false

# This stage is used in production or when running from VS in regular mode (Default when not using the Debug configuration)
FROM base AS final
WORKDIR /app
COPY --from=publish /app/publish .
ENTRYPOINT ["dotnet", "CampaignManager.Web.dll"]

================
File: LICENSE.txt
================
GNU AFFERO GENERAL PUBLIC LICENSE
                       Version 3, 19 November 2007

 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

                            Preamble

  The GNU Affero General Public License is a free, copyleft license for
software and other kinds of works, specifically designed to ensure
cooperation with the community in the case of network server software.

  The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
our General Public Licenses are intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains free
software for all its users.

  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

  Developers that use our General Public Licenses protect your rights
with two steps: (1) assert copyright on the software, and (2) offer
you this License which gives you legal permission to copy, distribute
and/or modify the software.

  A secondary benefit of defending all users' freedom is that
improvements made in alternate versions of the program, if they
receive widespread use, become available for other developers to
incorporate.  Many developers of free software are heartened and
encouraged by the resulting cooperation.  However, in the case of
software used on network servers, this result may fail to come about.
The GNU General Public License permits making a modified version and
letting the public access it on a server without ever releasing its
source code to the public.

  The GNU Affero General Public License is designed specifically to
ensure that, in such cases, the modified source code becomes available
to the community.  It requires the operator of a network server to
provide the source code of the modified version running there to the
users of that server.  Therefore, public use of a modified version, on
a publicly accessible server, gives the public access to the source
code of the modified version.

  An older license, called the Affero General Public License and
published by Affero, was designed to accomplish similar goals.  This is
a different license, not a version of the Affero GPL, but Affero has
released a new version of the Affero GPL which permits relicensing under
this license.

  The precise terms and conditions for copying, distribution and
modification follow.

                       TERMS AND CONDITIONS

  0. Definitions.

  "This License" refers to version 3 of the GNU Affero General Public License.

  "Copyright" also means copyright-like laws that apply to other kinds of
works, such as semiconductor masks.

  "The Program" refers to any copyrightable work licensed under this
License.  Each licensee is addressed as "you".  "Licensees" and
"recipients" may be individuals or organizations.

  To "modify" a work means to copy from or adapt all or part of the work
in a fashion requiring copyright permission, other than the making of an
exact copy.  The resulting work is called a "modified version" of the
earlier work or a work "based on" the earlier work.

  A "covered work" means either the unmodified Program or a work based
on the Program.

  To "propagate" a work means to do anything with it that, without
permission, would make you directly or secondarily liable for
infringement under applicable copyright law, except executing it on a
computer or modifying a private copy.  Propagation includes copying,
distribution (with or without modification), making available to the
public, and in some countries other activities as well.

  To "convey" a work means any kind of propagation that enables other
parties to make or receive copies.  Mere interaction with a user through
a computer network, with no transfer of a copy, is not conveying.

  An interactive user interface displays "Appropriate Legal Notices"
to the extent that it includes a convenient and prominently visible
feature that (1) displays an appropriate copyright notice, and (2)
tells the user that there is no warranty for the work (except to the
extent that warranties are provided), that licensees may convey the
work under this License, and how to view a copy of this License.  If
the interface presents a list of user commands or options, such as a
menu, a prominent item in the list meets this criterion.

  1. Source Code.

  The "source code" for a work means the preferred form of the work
for making modifications to it.  "Object code" means any non-source
form of a work.

  A "Standard Interface" means an interface that either is an official
standard defined by a recognized standards body, or, in the case of
interfaces specified for a particular programming language, one that
is widely used among developers working in that language.

  The "System Libraries" of an executable work include anything, other
than the work as a whole, that (a) is included in the normal form of
packaging a Major Component, but which is not part of that Major
Component, and (b) serves only to enable use of the work with that
Major Component, or to implement a Standard Interface for which an
implementation is available to the public in source code form.  A
"Major Component", in this context, means a major essential component
(kernel, window system, and so on) of the specific operating system
(if any) on which the executable work runs, or a compiler used to
produce the work, or an object code interpreter used to run it.

  The "Corresponding Source" for a work in object code form means all
the source code needed to generate, install, and (for an executable
work) run the object code and to modify the work, including scripts to
control those activities.  However, it does not include the work's
System Libraries, or general-purpose tools or generally available free
programs which are used unmodified in performing those activities but
which are not part of the work.  For example, Corresponding Source
includes interface definition files associated with source files for
the work, and the source code for shared libraries and dynamically
linked subprograms that the work is specifically designed to require,
such as by intimate data communication or control flow between those
subprograms and other parts of the work.

  The Corresponding Source need not include anything that users
can regenerate automatically from other parts of the Corresponding
Source.

  The Corresponding Source for a work in source code form is that
same work.

  2. Basic Permissions.

  All rights granted under this License are granted for the term of
copyright on the Program, and are irrevocable provided the stated
conditions are met.  This License explicitly affirms your unlimited
permission to run the unmodified Program.  The output from running a
covered work is covered by this License only if the output, given its
content, constitutes a covered work.  This License acknowledges your
rights of fair use or other equivalent, as provided by copyright law.

  You may make, run and propagate covered works that you do not
convey, without conditions so long as your license otherwise remains
in force.  You may convey covered works to others for the sole purpose
of having them make modifications exclusively for you, or provide you
with facilities for running those works, provided that you comply with
the terms of this License in conveying all material for which you do
not control copyright.  Those thus making or running the covered works
for you must do so exclusively on your behalf, under your direction
and control, on terms that prohibit them from making any copies of
your copyrighted material outside their relationship with you.

  Conveying under any other circumstances is permitted solely under
the conditions stated below.  Sublicensing is not allowed; section 10
makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

  No covered work shall be deemed part of an effective technological
measure under any applicable law fulfilling obligations under article
11 of the WIPO copyright treaty adopted on 20 December 1996, or
similar laws prohibiting or restricting circumvention of such
measures.

  When you convey a covered work, you waive any legal power to forbid
circumvention of technological measures to the extent such circumvention
is effected by exercising rights under this License with respect to
the covered work, and you disclaim any intention to limit operation or
modification of the work as a means of enforcing, against the work's
users, your or third parties' legal rights to forbid circumvention of
technological measures.

  4. Conveying Verbatim Copies.

  You may convey verbatim copies of the Program's source code as you
receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice;
keep intact all notices stating that this License and any
non-permissive terms added in accord with section 7 apply to the code;
keep intact all notices of the absence of any warranty; and give all
recipients a copy of this License along with the Program.

  You may charge any price or no price for each copy that you convey,
and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

  You may convey a work based on the Program, or the modifications to
produce it from the Program, in the form of source code under the
terms of section 4, provided that you also meet all of these conditions:

    a) The work must carry prominent notices stating that you modified
    it, and giving a relevant date.

    b) The work must carry prominent notices stating that it is
    released under this License and any conditions added under section
    7.  This requirement modifies the requirement in section 4 to
    "keep intact all notices".

    c) You must license the entire work, as a whole, under this
    License to anyone who comes into possession of a copy.  This
    License will therefore apply, along with any applicable section 7
    additional terms, to the whole of the work, and all its parts,
    regardless of how they are packaged.  This License gives no
    permission to license the work in any other way, but it does not
    invalidate such permission if you have separately received it.

    d) If the work has interactive user interfaces, each must display
    Appropriate Legal Notices; however, if the Program has interactive
    interfaces that do not display Appropriate Legal Notices, your
    work need not make them do so.

  A compilation of a covered work with other separate and independent
works, which are not by their nature extensions of the covered work,
and which are not combined with it such as to form a larger program,
in or on a volume of a storage or distribution medium, is called an
"aggregate" if the compilation and its resulting copyright are not
used to limit the access or legal rights of the compilation's users
beyond what the individual works permit.  Inclusion of a covered work
in an aggregate does not cause this License to apply to the other
parts of the aggregate.

  6. Conveying Non-Source Forms.

  You may convey a covered work in object code form under the terms
of sections 4 and 5, provided that you also convey the
machine-readable Corresponding Source under the terms of this License,
in one of these ways:

    a) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by the
    Corresponding Source fixed on a durable physical medium
    customarily used for software interchange.

    b) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by a
    written offer, valid for at least three years and valid for as
    long as you offer spare parts or customer support for that product
    model, to give anyone who possesses the object code either (1) a
    copy of the Corresponding Source for all the software in the
    product that is covered by this License, on a durable physical
    medium customarily used for software interchange, for a price no
    more than your reasonable cost of physically performing this
    conveying of source, or (2) access to copy the
    Corresponding Source from a network server at no charge.

    c) Convey individual copies of the object code with a copy of the
    written offer to provide the Corresponding Source.  This
    alternative is allowed only occasionally and noncommercially, and
    only if you received the object code with such an offer, in accord
    with subsection 6b.

    d) Convey the object code by offering access from a designated
    place (gratis or for a charge), and offer equivalent access to the
    Corresponding Source in the same way through the same place at no
    further charge.  You need not require recipients to copy the
    Corresponding Source along with the object code.  If the place to
    copy the object code is a network server, the Corresponding Source
    may be on a different server (operated by you or a third party)
    that supports equivalent copying facilities, provided you maintain
    clear directions next to the object code saying where to find the
    Corresponding Source.  Regardless of what server hosts the
    Corresponding Source, you remain obligated to ensure that it is
    available for as long as needed to satisfy these requirements.

    e) Convey the object code using peer-to-peer transmission, provided
    you inform other peers where the object code and Corresponding
    Source of the work are being offered to the general public at no
    charge under subsection 6d.

  A separable portion of the object code, whose source code is excluded
from the Corresponding Source as a System Library, need not be
included in conveying the object code work.

  A "User Product" is either (1) a "consumer product", which means any
tangible personal property which is normally used for personal, family,
or household purposes, or (2) anything designed or sold for incorporation
into a dwelling.  In determining whether a product is a consumer product,
doubtful cases shall be resolved in favor of coverage.  For a particular
product received by a particular user, "normally used" refers to a
typical or common use of that class of product, regardless of the status
of the particular user or of the way in which the particular user
actually uses, or expects or is expected to use, the product.  A product
is a consumer product regardless of whether the product has substantial
commercial, industrial or non-consumer uses, unless such uses represent
the only significant mode of use of the product.

  "Installation Information" for a User Product means any methods,
procedures, authorization keys, or other information required to install
and execute modified versions of a covered work in that User Product from
a modified version of its Corresponding Source.  The information must
suffice to ensure that the continued functioning of the modified object
code is in no case prevented or interfered with solely because
modification has been made.

  If you convey an object code work under this section in, or with, or
specifically for use in, a User Product, and the conveying occurs as
part of a transaction in which the right of possession and use of the
User Product is transferred to the recipient in perpetuity or for a
fixed term (regardless of how the transaction is characterized), the
Corresponding Source conveyed under this section must be accompanied
by the Installation Information.  But this requirement does not apply
if neither you nor any third party retains the ability to install
modified object code on the User Product (for example, the work has
been installed in ROM).

  The requirement to provide Installation Information does not include a
requirement to continue to provide support service, warranty, or updates
for a work that has been modified or installed by the recipient, or for
the User Product in which it has been modified or installed.  Access to a
network may be denied when the modification itself materially and
adversely affects the operation of the network or violates the rules and
protocols for communication across the network.

  Corresponding Source conveyed, and Installation Information provided,
in accord with this section must be in a format that is publicly
documented (and with an implementation available to the public in
source code form), and must require no special password or key for
unpacking, reading or copying.

  7. Additional Terms.

  "Additional permissions" are terms that supplement the terms of this
License by making exceptions from one or more of its conditions.
Additional permissions that are applicable to the entire Program shall
be treated as though they were included in this License, to the extent
that they are valid under applicable law.  If additional permissions
apply only to part of the Program, that part may be used separately
under those permissions, but the entire Program remains governed by
this License without regard to the additional permissions.

  When you convey a copy of a covered work, you may at your option
remove any additional permissions from that copy, or from any part of
it.  (Additional permissions may be written to require their own
removal in certain cases when you modify the work.)  You may place
additional permissions on material, added by you to a covered work,
for which you have or can give appropriate copyright permission.

  Notwithstanding any other provision of this License, for material you
add to a covered work, you may (if authorized by the copyright holders of
that material) supplement the terms of this License with terms:

    a) Disclaiming warranty or limiting liability differently from the
    terms of sections 15 and 16 of this License; or

    b) Requiring preservation of specified reasonable legal notices or
    author attributions in that material or in the Appropriate Legal
    Notices displayed by works containing it; or

    c) Prohibiting misrepresentation of the origin of that material, or
    requiring that modified versions of such material be marked in
    reasonable ways as different from the original version; or

    d) Limiting the use for publicity purposes of names of licensors or
    authors of the material; or

    e) Declining to grant rights under trademark law for use of some
    trade names, trademarks, or service marks; or

    f) Requiring indemnification of licensors and authors of that
    material by anyone who conveys the material (or modified versions of
    it) with contractual assumptions of liability to the recipient, for
    any liability that these contractual assumptions directly impose on
    those licensors and authors.

  All other non-permissive additional terms are considered "further
restrictions" within the meaning of section 10.  If the Program as you
received it, or any part of it, contains a notice stating that it is
governed by this License along with a term that is a further
restriction, you may remove that term.  If a license document contains
a further restriction but permits relicensing or conveying under this
License, you may add to a covered work material governed by the terms
of that license document, provided that the further restriction does
not survive such relicensing or conveying.

  If you add terms to a covered work in accord with this section, you
must place, in the relevant source files, a statement of the
additional terms that apply to those files, or a notice indicating
where to find the applicable terms.

  Additional terms, permissive or non-permissive, may be stated in the
form of a separately written license, or stated as exceptions;
the above requirements apply either way.

  8. Termination.

  You may not propagate or modify a covered work except as expressly
provided under this License.  Any attempt otherwise to propagate or
modify it is void, and will automatically terminate your rights under
this License (including any patent licenses granted under the third
paragraph of section 11).

  However, if you cease all violation of this License, then your
license from a particular copyright holder is reinstated (a)
provisionally, unless and until the copyright holder explicitly and
finally terminates your license, and (b) permanently, if the copyright
holder fails to notify you of the violation by some reasonable means
prior to 60 days after the cessation.

  Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

  Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, you do not qualify to receive new licenses for the same
material under section 10.

  9. Acceptance Not Required for Having Copies.

  You are not required to accept this License in order to receive or
run a copy of the Program.  Ancillary propagation of a covered work
occurring solely as a consequence of using peer-to-peer transmission
to receive a copy likewise does not require acceptance.  However,
nothing other than this License grants you permission to propagate or
modify any covered work.  These actions infringe copyright if you do
not accept this License.  Therefore, by modifying or propagating a
covered work, you indicate your acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

  Each time you convey a covered work, the recipient automatically
receives a license from the original licensors, to run, modify and
propagate that work, subject to this License.  You are not responsible
for enforcing compliance by third parties with this License.

  An "entity transaction" is a transaction transferring control of an
organization, or substantially all assets of one, or subdividing an
organization, or merging organizations.  If propagation of a covered
work results from an entity transaction, each party to that
transaction who receives a copy of the work also receives whatever
licenses to the work the party's predecessor in interest had or could
give under the previous paragraph, plus a right to possession of the
Corresponding Source of the work from the predecessor in interest, if
the predecessor has it or can get it with reasonable efforts.

  You may not impose any further restrictions on the exercise of the
rights granted or affirmed under this License.  For example, you may
not impose a license fee, royalty, or other charge for exercise of
rights granted under this License, and you may not initiate litigation
(including a cross-claim or counterclaim in a lawsuit) alleging that
any patent claim is infringed by making, using, selling, offering for
sale, or importing the Program or any portion of it.

  11. Patents.

  A "contributor" is a copyright holder who authorizes use under this
License of the Program or a work on which the Program is based.  The
work thus licensed is called the contributor's "contributor version".

  A contributor's "essential patent claims" are all patent claims
owned or controlled by the contributor, whether already acquired or
hereafter acquired, that would be infringed by some manner, permitted
by this License, of making, using, or selling its contributor version,
but do not include claims that would be infringed only as a
consequence of further modification of the contributor version.  For
purposes of this definition, "control" includes the right to grant
patent sublicenses in a manner consistent with the requirements of
this License.

  Each contributor grants you a non-exclusive, worldwide, royalty-free
patent license under the contributor's essential patent claims, to
make, use, sell, offer for sale, import and otherwise run, modify and
propagate the contents of its contributor version.

  In the following three paragraphs, a "patent license" is any express
agreement or commitment, however denominated, not to enforce a patent
(such as an express permission to practice a patent or covenant not to
sue for patent infringement).  To "grant" such a patent license to a
party means to make such an agreement or commitment not to enforce a
patent against the party.

  If you convey a covered work, knowingly relying on a patent license,
and the Corresponding Source of the work is not available for anyone
to copy, free of charge and under the terms of this License, through a
publicly available network server or other readily accessible means,
then you must either (1) cause the Corresponding Source to be so
available, or (2) arrange to deprive yourself of the benefit of the
patent license for this particular work, or (3) arrange, in a manner
consistent with the requirements of this License, to extend the patent
license to downstream recipients.  "Knowingly relying" means you have
actual knowledge that, but for the patent license, your conveying the
covered work in a country, or your recipient's use of the covered work
in a country, would infringe one or more identifiable patents in that
country that you have reason to believe are valid.

  If, pursuant to or in connection with a single transaction or
arrangement, you convey, or propagate by procuring conveyance of, a
covered work, and grant a patent license to some of the parties
receiving the covered work authorizing them to use, propagate, modify
or convey a specific copy of the covered work, then the patent license
you grant is automatically extended to all recipients of the covered
work and works based on it.

  A patent license is "discriminatory" if it does not include within
the scope of its coverage, prohibits the exercise of, or is
conditioned on the non-exercise of one or more of the rights that are
specifically granted under this License.  You may not convey a covered
work if you are a party to an arrangement with a third party that is
in the business of distributing software, under which you make payment
to the third party based on the extent of your activity of conveying
the work, and under which the third party grants, to any of the
parties who would receive the covered work from you, a discriminatory
patent license (a) in connection with copies of the covered work
conveyed by you (or copies made from those copies), or (b) primarily
for and in connection with specific products or compilations that
contain the covered work, unless you entered into that arrangement,
or that patent license was granted, prior to 28 March 2007.

  Nothing in this License shall be construed as excluding or limiting
any implied license or other defenses to infringement that may
otherwise be available to you under applicable patent law.

  12. No Surrender of Others' Freedom.

  If conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot convey a
covered work so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you may
not convey it at all.  For example, if you agree to terms that obligate you
to collect a royalty for further conveying from those to whom you convey
the Program, the only way you could satisfy both those terms and this
License would be to refrain entirely from conveying the Program.

  13. Remote Network Interaction; Use with the GNU General Public License.

  Notwithstanding any other provision of this License, if you modify the
Program, your modified version must prominently offer all users
interacting with it remotely through a computer network (if your version
supports such interaction) an opportunity to receive the Corresponding
Source of your version by providing access to the Corresponding Source
from a network server at no charge, through some standard or customary
means of facilitating copying of software.  This Corresponding Source
shall include the Corresponding Source for any work covered by version 3
of the GNU General Public License that is incorporated pursuant to the
following paragraph.

  Notwithstanding any other provision of this License, you have
permission to link or combine any covered work with a work licensed
under version 3 of the GNU General Public License into a single
combined work, and to convey the resulting work.  The terms of this
License will continue to apply to the part which is the covered work,
but the work with which it is combined will remain governed by version
3 of the GNU General Public License.

  14. Revised Versions of this License.

  The Free Software Foundation may publish revised and/or new versions of
the GNU Affero General Public License from time to time.  Such new versions
will be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

  Each version is given a distinguishing version number.  If the
Program specifies that a certain numbered version of the GNU Affero General
Public License "or any later version" applies to it, you have the
option of following the terms and conditions either of that numbered
version or of any later version published by the Free Software
Foundation.  If the Program does not specify a version number of the
GNU Affero General Public License, you may choose any version ever published
by the Free Software Foundation.

  If the Program specifies that a proxy can decide which future
versions of the GNU Affero General Public License can be used, that proxy's
public statement of acceptance of a version permanently authorizes you
to choose that version for the Program.

  Later license versions may give you additional or different
permissions.  However, no additional obligations are imposed on any
author or copyright holder as a result of your choosing to follow a
later version.

  15. Disclaimer of Warranty.

  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

  If the disclaimer of warranty and limitation of liability provided
above cannot be given local legal effect according to their terms,
reviewing courts shall apply local law that most closely approximates
an absolute waiver of all civil liability in connection with the
Program, unless a warranty or assumption of liability accompanies a
copy of the Program in return for a fee.

                     END OF TERMS AND CONDITIONS

            How to Apply These Terms to Your New Programs

  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.

  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

    <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) <year>  <name of author>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published
    by the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

Also add information on how to contact you by electronic and paper mail.

  If your software can interact with users remotely through a computer
network, you should also make sure that it provides a way for users to
get its source.  For example, if your program is a web application, its
interface could display a "Source" link that leads users to an archive
of the code.  There are many ways you could offer source, and different
solutions will be better for different programs; see section 13 for the
specific requirements.

  You should also get your employer (if you work as a programmer) or school,
if any, to sign a "copyright disclaimer" for the program, if necessary.
For more information on this, and how to apply and follow the GNU AGPL, see
<https://www.gnu.org/licenses/>.
